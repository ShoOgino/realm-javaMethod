    public static AllTypes createOrUpdateUsingJsonObject(Realm realm, JSONObject json, boolean update)
            throws JSONException {
        AllTypes obj = null;
        if (update) {
            Table table = realm.getTable(AllTypes.class);
            long pkColumnIndex = table.getPrimaryKey();
            if (!json.isNull("columnString")) {
                long rowIndex = table.findFirstString(pkColumnIndex, json.getString("columnString"));
                if (rowIndex != TableOrView.NO_MATCH) {
                    obj = new AllTypesRealmProxy();
                    obj.realm = realm;
                    obj.row = table.getUncheckedRow(rowIndex);
                }
            }
        }
        if (obj == null) {
            obj = realm.createObject(AllTypes.class);
        }
        if (!json.isNull("columnString")) {
            obj.setColumnString((String) json.getString("columnString"));
        }
        if (!json.isNull("columnLong")) {
            obj.setColumnLong((long) json.getLong("columnLong"));
        }
        if (!json.isNull("columnFloat")) {
            obj.setColumnFloat((float) json.getDouble("columnFloat"));
        }
        if (!json.isNull("columnDouble")) {
            obj.setColumnDouble((double) json.getDouble("columnDouble"));
        }
        if (!json.isNull("columnBoolean")) {
            obj.setColumnBoolean((boolean) json.getBoolean("columnBoolean"));
        }
        if (!json.isNull("columnDate")) {
            Object timestamp = json.get("columnDate");
            if (timestamp instanceof String) {
                obj.setColumnDate(JsonUtils.stringToDate((String) timestamp));
            } else {
                obj.setColumnDate(new Date(json.getLong("columnDate")));
            }
        }
        if (!json.isNull("columnBinary")) {
            obj.setColumnBinary(JsonUtils.stringToBytes(json.getString("columnBinary")));
        }
        if (!json.isNull("columnObject")) {
            some.test.AllTypes columnObjectObj = AllTypesRealmProxy.createOrUpdateUsingJsonObject(realm, json.getJSONObject("columnObject"), update);
            obj.setColumnObject(columnObjectObj);
        }
        if (!json.isNull("columnRealmList")) {
            obj.getColumnRealmList().clear();
            JSONArray array = json.getJSONArray("columnRealmList");
            for (int i = 0; i < array.length(); i++) {
                some.test.AllTypes item = AllTypesRealmProxy.createOrUpdateUsingJsonObject(realm, array.getJSONObject(i), update);
                obj.getColumnRealmList().add(item);
            }
        }
        return obj;
    }

