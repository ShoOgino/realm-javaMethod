    public static void populateUsingJsonObject(AllTypes obj, JSONObject json)
            throws JSONException {
        boolean standalone = obj.realm == null;
        if (!json.isNull("columnString")) {
            obj.setColumnString((String) json.getString("columnString"));
        }
        if (!json.isNull("columnLong")) {
            obj.setColumnLong((long) json.getLong("columnLong"));
        }
        if (!json.isNull("columnFloat")) {
            obj.setColumnFloat((float) json.getDouble("columnFloat"));
        }
        if (!json.isNull("columnDouble")) {
            obj.setColumnDouble((double) json.getDouble("columnDouble"));
        }
        if (!json.isNull("columnBoolean")) {
            obj.setColumnBoolean((boolean) json.getBoolean("columnBoolean"));
        }
        if (!json.isNull("columnDate")) {
            Object timestamp = json.get("columnDate");
            if (timestamp instanceof String) {
                obj.setColumnDate(JsonUtils.stringToDate((String) timestamp));
            } else {
                obj.setColumnDate(new Date(json.getLong("columnDate")));
            }
        } else {
            obj.setColumnDate(new Date(0));
        }
        obj.setColumnBinary(JsonUtils.stringToBytes(json.isNull("columnBinary") ? null : json.getString("columnBinary")));
        if (!json.isNull("columnObject")) {
            some.test.AllTypes columnObject = standalone ? new some.test.AllTypes() : obj.realm.createObject(some.test.AllTypes.class);
            AllTypesRealmProxy.populateUsingJsonObject(columnObject, json.getJSONObject("columnObject"));
            obj.setColumnObject(columnObject);
        }
        if (!json.isNull("columnRealmList")) {
            if (standalone) {
                obj.setColumnRealmList(new RealmList<some.test.AllTypes>());
            }
            JSONArray array = json.getJSONArray("columnRealmList");
            for (int i = 0; i < array.length(); i++) {
                some.test.AllTypes item = standalone ? new some.test.AllTypes() : obj.realm.createObject(some.test.AllTypes.class);
                AllTypesRealmProxy.populateUsingJsonObject(item, array.getJSONObject(i));
                obj.getColumnRealmList().add(item);
            }
        }
    }

