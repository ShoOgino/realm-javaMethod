	public boolean generate() throws Exception
	{
		_bw.append(generateFragment(_codeHeader));
		
		Set<String> keys = _methods.keySet();
		Iterator<String> it = keys.iterator();
		String _fieldTable = "";
		String _typeTable = "";
		
		int fieldIndex = 0;

		while (it.hasNext())
		{
			String k = it.next();
			
			
			if (ignoreFields.contains(k))
			{
				continue;
			}

			_bw.append(generateMethod(_codeGetter, k, fieldIndex));
			_bw.append(generateMethod(_codeSetter, k, fieldIndex));
			
			fieldIndex++;
			
			Element e = _methods.get(k);
			if (_fieldTable.length() > 0) _fieldTable += " ,";
			_fieldTable += "\""+k+"\"";
			
			if (_typeTable.length() > 0) _typeTable += " ,";
			
			if (e.asType().toString().compareTo("java.lang.String") == 0)
			{
				_typeTable += ColumnType.STRING.getValue();
			}
			else if (e.asType().toString().compareTo("int") == 0 || e.asType().toString().compareTo("long") == 0 || 
					 e.asType().toString().compareTo("java.lang.Integer") == 0 || e.asType().toString().compareTo("java.lang.Long") == 0)
			{
				_typeTable += ColumnType.INTEGER.getValue();
			}
			else if (e.asType().toString().compareTo("double") == 0 || e.asType().toString().compareTo("java.lang.Double") == 0)
			{
				_typeTable += ColumnType.DOUBLE.getValue();
			}
			else if (e.asType().toString().compareTo("float") == 0 || e.asType().toString().compareTo("java.lang.Float") == 0)
			{
				_typeTable += ColumnType.FLOAT.getValue();
			}
			else if (e.asType().toString().compareTo("boolean")  == 0 || e.asType().toString().compareTo("java.lang.Boolean") == 0)
			{
				_typeTable += ColumnType.BOOLEAN.getValue();				
			}
			else if (e.asType().toString().compareTo("java.util.Date") == 0)
			{
				_typeTable += ColumnType.DATE.getValue();
			}
//			else if (e.asType().equals(byte[].class) )
//			{
//				_typeTable += ColumnType.BINARY.getValue();				
//			}
			else
			{
				_typeTable += e.asType().toString()+" - "+String.class.toString();				
			}
		}
		
		_bw.append(_fieldTableHeader);
		_bw.append(_fieldTable);
		_bw.append(_fieldTableFooter);

		_bw.append(_typeTableHeader);
		_bw.append(_typeTable);
		_bw.append(_typeTableFooter);
		
		_bw.append(_getTableName);
		
		_bw.append(generateFragment(_codeFooter));
		
		_methods.clear();

		return true;
	}

