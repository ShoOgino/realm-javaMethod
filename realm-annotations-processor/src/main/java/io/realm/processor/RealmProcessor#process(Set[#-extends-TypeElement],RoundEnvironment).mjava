    @Override
    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {

        for (Element classElement : roundEnv.getElementsAnnotatedWith(RealmClass.class)) {
            // Check the annotation was applied to a Class
            if (!classElement.getKind().equals(ElementKind.CLASS)) {
                error("The RealmClass annotation can only be applied to classes");
                return false;
            }
            TypeElement typeElement = (TypeElement) classElement;

            // Get the package of the class
            Element enclosingElement = typeElement.getEnclosingElement();
            if (!enclosingElement.getKind().equals(ElementKind.PACKAGE)) {
                error("The RealmClass annotation does not support nested classes");
                return false;
            }

            PackageElement packageElement = (PackageElement) enclosingElement;
            String qualifiedPackageName = packageElement.getQualifiedName().toString();

            if (qualifiedPackageName != null) {
                String qualifiedClassName = qualifiedPackageName + "." + classElement.getSimpleName() + "RealmProxy";
                //qualifiedClassName = qualifiedClassName.replace(".", "/");

                JavaFileObject javaFileObject = null;
                BufferedWriter bufferWriter = null;

                try {
                    javaFileObject = processingEnv.getFiler().createSourceFile(qualifiedClassName);
                    bufferWriter = new BufferedWriter(javaFileObject.openWriter());
                } catch (IOException e) {
                    e.printStackTrace();
                    error("Unable to create file: " + e.getMessage());
                    return false;
                }

                if (!codeGenerator.setBufferedWriter(bufferWriter)) {
                    error(codeGenerator.getError());
                    return false;
                }

                if (!codeGenerator.setPackageName(qualifiedPackageName)) {
                    error(codeGenerator.getError());
                    return false;
                }

                if (!codeGenerator.setClassName(classElement.getSimpleName().toString())) {
                    error(codeGenerator.getError());
                    return false;
                }

                for (Element element : typeElement.getEnclosedElements()) {
                    if (element.getKind().equals(ElementKind.FIELD)) {
                        String elementName = element.getSimpleName().toString();
                        VariableElement varElem = (VariableElement) element;

                        if (varElem.getAnnotation(Ignore.class) != null) {
                            continue;
                        }

                        Set<Modifier> modifiers = varElem.getModifiers();
                        for (Modifier modifier : modifiers) {
                            if (modifier == Modifier.PRIVATE) {
                                if (!codeGenerator.setField(elementName, varElem)) {
                                    error(codeGenerator.getError());
                                    return false;
                                }
                            }
                        }
                    }
                }
                try {
                    if (!codeGenerator.generate()) {
                        error(codeGenerator.getError());
                        return false;
                    }
                } catch (IOException e) {
                    e.printStackTrace();
                    return false;
                }
            }
        }
        return true;
    }

