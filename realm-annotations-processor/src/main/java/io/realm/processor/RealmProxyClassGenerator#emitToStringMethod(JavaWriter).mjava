    private void emitToStringMethod(JavaWriter writer) throws IOException {
        writer.emitAnnotation("Override");
        writer.beginMethod("String", "toString", EnumSet.of(Modifier.PUBLIC));
        writer.emitStatement("StringBuilder stringBuilder = new StringBuilder(\"%s = [\")", className);
        for (int i = 0; i < fields.size(); i++) {
            VariableElement field = fields.get(i);
            if (typeUtils.isAssignable(field.asType(), realmObject)) {

                String fieldTypeCanonicalName = field.asType().toString();
                String fieldTypeName;
                if (fieldTypeCanonicalName.contains(".")) {
                    fieldTypeName = fieldTypeCanonicalName.substring(fieldTypeCanonicalName.lastIndexOf('.') + 1);
                } else {
                    fieldTypeName = fieldTypeCanonicalName;
                }

                String fieldName = field.getSimpleName().toString();
                writer.emitStatement("stringBuilder.append(\"{%s:\")", fieldName);
                writer.emitStatement("stringBuilder.append(%s() != null ? \"%s\" + \"@\" + %s().row.getIndex() : \"null\")", getters.get(fieldName), fieldTypeName, getters.get(fieldName));
                writer.emitStatement("stringBuilder.append(\"}\")");

            } else {
                String fieldName = field.getSimpleName().toString();
                writer.emitStatement("stringBuilder.append(\"{%s:\")", fieldName);
                writer.emitStatement("stringBuilder.append(%s())", getters.get(fieldName));
                writer.emitStatement("stringBuilder.append(\"}\")");
            }

            if (i < fields.size() - 1) {
                writer.emitStatement("stringBuilder.append(\",\")");
            }
        }

        writer.emitStatement("stringBuilder.append(\"]\")");
        writer.emitStatement("return stringBuilder.toString()");
        writer.endMethod();
        writer.emitEmptyLine();
    }

