	private void processAnnotatedElements(Set<? extends Element> elements, boolean insideEclipse)
			throws IOException {
		logger.info("Processing " + elements.size() + " elements...");

		URI uri = filer.getResource(StandardLocation.SOURCE_OUTPUT, "", "foo")
				.toUri();
		if (uri.toString().equals("foo")) {
			throw new RuntimeException(
					"The path of the Java source and generated files must be configured as source output! (see -s option of javac)");
		}

		List<File> sourcesPath = new LinkedList<File>();

		// FIXME: Workaround for OS X 
		try {
			if (uri.getScheme() == null) uri = new URI("file", uri.getSchemeSpecificPart(), uri.getFragment());
		}
		catch (URISyntaxException e) {
			logger.error("Failed to add 'file:' schema to schema-less URI '"+uri+"'");
		}

		File file = new File(uri);
		File outputFolder = file.getParentFile();
		File generatedSourcesPath = outputFolder;

		String[] sourceFolders = getSourceFolders();
		while (generatedSourcesPath != null) {
			for (String sourceFolder : sourceFolders) {
				File potentialPath = new File(generatedSourcesPath, sourceFolder);
				if (potentialPath.exists()) {
					sourcesPath.add(potentialPath);
					logger.info("Configured source folder: " + potentialPath);
				}
			}
			generatedSourcesPath = generatedSourcesPath.getParentFile();
		}

		// add the sources output folder as the last option to search sources
		sourcesPath.add(outputFolder);
		logger.info("Configured destination folder: " + outputFolder);

		prepareTables(elements);

		for (Element element : elements) {
			if (element instanceof TypeElement) {
				TypeElement model = (TypeElement) element;
				setupModelInfo(model);
			}
		}

		for (Element element : elements) {
			if (element instanceof TypeElement) {
				TypeElement model = (TypeElement) element;
				processModel(sourcesPath, model, insideEclipse);
			}
		}
	}

