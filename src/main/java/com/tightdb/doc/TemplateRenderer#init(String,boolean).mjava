	public void init(String templatesPath, boolean debugMode) {
		Properties velocityConfig = new Properties();

		if (templatesPath != null) {
			velocityConfig.setProperty("resource.loader", "file, classpath");

			velocityConfig.setProperty(RESOURCE_LOADER_CLASS, FileResourceLoader.class.getCanonicalName());
			velocityConfig.setProperty(FILE_RESOURCE_LOADER_PATH, templatesPath);

			velocityConfig.setProperty("classpath.resource.loader.class", ClasspathResourceLoader.class.getCanonicalName());
			velocityConfig.setProperty("classpath.resource.loader.cache", "false");
		} else {
			velocityConfig.setProperty(RESOURCE_LOADER_CLASS, ClasspathResourceLoader.class.getCanonicalName());
		}

		velocityConfig.setProperty(VM_MAX_DEPTH, "1000");
		velocityConfig.setProperty(VM_PERM_ALLOW_INLINE_REPLACE_GLOBAL, "true");
		velocityConfig.setProperty(VM_PERM_INLINE_LOCAL, "false");
		velocityConfig.setProperty(VM_PERM_ALLOW_INLINE, "true");

		if (debugMode) {
			velocityConfig.setProperty(VM_LIBRARY_AUTORELOAD, "true");
			velocityConfig.setProperty(FILE_RESOURCE_LOADER_CACHE, "false");
		} else {
			velocityConfig.setProperty(VM_LIBRARY_AUTORELOAD, "false");
			velocityConfig.setProperty(FILE_RESOURCE_LOADER_CACHE, "true");
		}

		engine.setProperty(RUNTIME_LOG_LOGSYSTEM, this);
		engine.init(velocityConfig);
	}

