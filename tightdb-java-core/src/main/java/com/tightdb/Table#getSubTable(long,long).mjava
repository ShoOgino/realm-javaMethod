    /**
     *
     * Note: The subtable returned will have to be closed again after use.
     * You can let javas garbage collector handle that or better yet call close()
     * after use.
     *
     * @param columnIndex column index of the cell
     * @param rowIndex row index of the cell
     * @return TableBase the subtable at the requested cell
     */
    @Override
    public Table getSubTable(long columnIndex, long rowIndex) {
        // Execute the disposal of abandoned tightdb objects each time a new tightdb object is created
        context.executeDelayedDisposal();
        long nativeSubtablePointer = nativeGetSubTable(nativePtr, columnIndex, rowIndex);
        try {
            // Copy context reference from parent
            return new Table(context, this, nativeSubtablePointer, immutable);
        }
        catch (RuntimeException e) {
            nativeClose(nativeSubtablePointer);
            throw e;
        }
    }

