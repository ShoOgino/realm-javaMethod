    public void set(long rowIndex, Object... values) {
        if (immutable) throwImmutable();
        
        // Check index
        long size = size();
        if (rowIndex >= size) {
            throw new IllegalArgumentException("rowIndex " + String.valueOf(rowIndex) + 
                    " must be < table.size() " + String.valueOf(size) + ".");
        }
        
        // Verify number of 'values'
        int columns = (int)getColumnCount();
        if (columns != values.length) {
            throw new IllegalArgumentException("The number of value parameters (" + 
                    String.valueOf(values.length) + 
                    ") does not match the number of columns in the table (" + 
                    String.valueOf(columns) + ").");
        }       
        // Verify type of 'values'
        ColumnType colTypes[] = new ColumnType[columns];
        for (int columnIndex = 0; columnIndex < columns; columnIndex++) {  
            Object value = values[columnIndex];
            ColumnType colType = getColumnType(columnIndex);
            colTypes[columnIndex] = colType;
            if (!colType.matchObject(value)) {
                throw new IllegalArgumentException("Invalid argument no " + String.valueOf(1 + columnIndex) + 
                        ". Expected a value compatible with column type " + colType + ", but got " + value.getClass() + ".");
            }
        }       

        // Now that all values are verified, we can remove the row and insert it again.
        // TODO: Can be optimized to only set the values (but clear any subtables)
        remove(rowIndex);
        insert(rowIndex, values);
    }

