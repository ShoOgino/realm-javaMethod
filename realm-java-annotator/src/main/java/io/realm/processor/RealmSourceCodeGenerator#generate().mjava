	public boolean generate() throws IOException
	{
		JavaWriter writer = new JavaWriter(_bw);

		writer.emitPackage(_values.get("package")).beginType(_values.get("package")+
				           "."+_values.get("class")+"RealmProxy", "class", 
				           EnumSet.of(Modifier.PUBLIC,Modifier.FINAL),_values.get("class")).emitEmptyLine();

		Iterator<String> methodNamesIterator = _methods.keySet().iterator();
		int fieldIndex = 0;

		while (methodNamesIterator.hasNext())
		{
			String fieldName = methodNamesIterator.next();
			
			// For now ignore fields is not implemented at runtime
//			if (ignoreFields.contains(fieldName))
//			{
//				continue;
//			}
			
			Element e = _methods.get(fieldName);
			String originalType = e.asType().toString();
			String fullType =  convertSimpleTypesToObject(originalType);
			String shortType = fullType.substring(fullType.lastIndexOf(".") + 1);
			
			String returnCast = "";
			String camelCase = Character.toUpperCase(fieldName.charAt(0)) + fieldName.substring(1);
			String fieldId = "rowIndex"+camelCase;

			if (originalType.compareTo("int") == 0)
			{
				fullType = "long";
				shortType = "Long";
				returnCast ="("+originalType+")";
			}
			
			if (shortType.compareTo("Integer") == 0)
			{
				fullType = "long";
				shortType = "Long";
				returnCast ="(int)";
			}
			
			String getterStmt = "return "+returnCast+"row.get"+shortType+"( "+fieldId+" )";
			
			String setterStmt = "row.set"+shortType+"( "+fieldId+", value )";

			writer.emitField("int", fieldId, EnumSet.of(Modifier.PRIVATE,Modifier.FINAL,Modifier.STATIC),
					Integer.toString(fieldIndex));
			fieldIndex++;

			writer.beginMethod(originalType, "get"+camelCase, EnumSet.of(Modifier.PUBLIC))
    		  .emitStatement(getterStmt)
    	      .endMethod();

			writer.beginMethod("void", "set"+camelCase, EnumSet.of(Modifier.PUBLIC),
					originalType, "value")
  		       .emitStatement(setterStmt)
  	           .endMethod().emitEmptyLine();
			
		}
		
		writer.endType();
		writer.close();
		
		_values.clear();
		_methods.clear();
		ignoreFields.clear();

		
		return true;
	}

