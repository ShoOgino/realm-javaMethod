    public static TestResult TestPerformance(IPerformance test, int rows)
    {
        TestResult  result = new TestResult();
        Timer       timer = new Timer();
        int         testNo = 0;

        if (pause) Util.waitForEnter();
        long memBefore = ExampleHelper.getUsedMemory(); memBefore = ExampleHelper.getUsedMemory();

        // Build the test database
        test.buildTable(rows);

        result.javaDBMemUsed = Math.max(ExampleHelper.getUsedMemory() - memBefore, 1);
        result.nativeDBMemUsed = test.usedNativeMemory();

        // Search small integer column
        {
            // Do a search over entire column (value not found)
            test.begin_findSmallInt(SMALL_TEST_VAL + 1);
            timer.Start();
            for (int i = 0; i < REPEAT_SEARCH; ++i) {
                if (test.findSmallInt(SMALL_TEST_VAL + 1)) {
                    System.out.println("Error - found value.");
                    break;
                }
            }
            result.testTime[testNo++] = timer.GetTimeInMs();
            test.end_findSmallInt();
            System.out.printf("*");
        }

        // Search byte-size integer column
        {
            test.begin_findByteInt(BYTE_TEST_VAL + 1);
            timer.Start();
            // Do a search over entire column (value not found)
            for (int i = 0; i < REPEAT_SEARCH; ++i) {
                if (test.findByteInt(BYTE_TEST_VAL + 1)) {
                    System.out.printf("Error - found value.");
                    break;
                }
            }
            result.testTime[testNo++] = timer.GetTimeInMs();
            test.end_findByteInt();
            System.out.printf("*");
        }

        // Search long-size integer column
        {
            test.begin_findLongInt(LONG_TEST_VAL + 1);
            timer.Start();
            // Do a search over entire column (value not found)
            for (int i = 0; i < REPEAT_SEARCH; ++i) {
                if (test.findLongInt(LONG_TEST_VAL + 1)) {
                    System.out.printf("Error - found value.");
                    break;
                }
            }
            result.testTime[testNo++] = timer.GetTimeInMs();
            test.end_findLongInt();
            System.out.printf("*");
        }

        // Search string column
        {
            test.begin_findString("abcde");
            timer.Start();
            // Do a search over entire column (value not found)
            for (int i = 0; i < REPEAT_SEARCH; ++i) {
                if (test.findString("abcde")) {
                      System.out.printf("error - found value.");
                      break;
                }
            }
            result.testTime[testNo++] = timer.GetTimeInMs();
            test.end_findString();
            System.out.printf("*");
        }
/*
        // Add index, and search
        {
            timer.Start();

            boolean indexSupported = test.addIndex();

            if (indexSupported) {
                result.testTime[testNo++] = timer.GetTimeInMs();
                System.out.printf("*");
                //System.out.printf("Memory usage2: %lld bytes\n", (long long)GetMemUsage());

                // Search with index
                test.begin_findIntWithIndex();
                timer.Start();
                for (int i = 0; i < REPEAT_SEARCH; ++i) {
                    int n = Util.getRandNumber();
                    if (test.findIntWithIndex(n) != n) {
                        System.out.printf("error - didn't find value.");
                        break;
                    }
                }
                result.testTime[testNo++] = timer.GetTimeInMs();
                test.end_findIntWithIndex();
                System.out.printf("*");
            }
        }
*/
        if (pause) Util.waitForEnter();
        test.closeTable();

        return result;
    }

