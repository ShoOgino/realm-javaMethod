    public static void main(String[] args) {
// FIXME: Wrong approach - must use 'java -Djava-library.path=...'
//        TightDB.addNativeLibraryPath("lib-sqlite");

        // Measuring memory is not very reliable in Java...
        // Util.test_getMemUsed();

        int numOfValues = 250000;

        System.out.println("Performance tests with " + numOfValues + " rows. Search repeated "
                + REPEAT_SEARCH + " times.");

        System.out.print("Performance testing TightDB: ");
        TestResult tightdb = TestPerformance(new Tightdb(), numOfValues);

      //  System.out.print("\nPerformance testing TightDB iterate: ");
      //  TestResult tightdb2 = TestPerformance(new TightdbIterate(), numOfValues);

        System.out.print("\nPerformance testing Java ArrayList: ");
        TestResult javaArray = TestPerformance(new JavaArrayList(), numOfValues);

        System.out.print("\nPerformance testing SQLite: ");
        TestResult sqlite = TestPerformance(new SQLiteTest(), numOfValues);

        System.out.println("\n\nRESULTS:");
        String[] testText = {
                "Search for small integer:     \t",
                "Search for byte sized integer:\t",
                "Search for long sized integer:\t",
                "Search for string:            \t",
                "Add Index:                    \t",
                "Search for byte (indexed):    \t"
        };

        System.out.println("\t\t\t\t\t   TightDB\tTightdb2\tArrayList\tSQLite");
        for (int test = 0; test < TESTS; ++test) {
            System.out.print( testText[test] );
            printTime(tightdb.testTime[test], " ms (x1)", "\t");

          /*  printTime(tightdb2.testTime[test], " ms ", "");
            if (tightdb.testTime[test] > 0)
                System.out.print( "(x" + tightdb2.testTime[test] / tightdb.testTime[test] + ")\t");
            else
                System.out.print("\t");*/

            printTime(javaArray.testTime[test], " ms ", "");
            if (tightdb.testTime[test] > 0)
                System.out.print( "(x" + javaArray.testTime[test] / tightdb.testTime[test] + ")\t");
            else
                System.out.print("\t");

            printTime(sqlite.testTime[test], " ms ", "");
            if (tightdb.testTime[test] > 0)
                System.out.print( "(x" + sqlite.testTime[test] / tightdb.testTime[test] + ")\t");
            else
                System.out.print("\t");
            System.out.println();
        }

        long tightTotal  = tightdb.javaDBMemUsed + tightdb.nativeDBMemUsed;
        long javaTotal   = javaArray.javaDBMemUsed + javaArray.nativeDBMemUsed;
        long sqliteTotal = sqlite.javaDBMemUsed + sqlite.nativeDBMemUsed;
        System.out.printf("Memory use (java+native):\t%5d KB (x1)\t%5d KB (x%d)\t%5d KB (x%x)\n",
                toKB(tightTotal),
                toKB(javaTotal), javaTotal/tightTotal,
                toKB(sqliteTotal), sqliteTotal/tightTotal);

        System.out.println("\nDONE.");
        if (pause) Util.waitForEnter();
    }

