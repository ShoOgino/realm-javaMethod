    // Get the application's 256-bit AES key
    private byte[] getKey() throws GeneralSecurityException, IOException, java.io.IOException {
        // As of 4.3, Android has a secure per-application key store, but it can't store symmetric keys
        // As a result, we use it to store a public/private keypair which is used to encrypt the
        // symmetric key which is stored in a file in the application context

        byte[] keyData;
        try {
            File file = new File(getFilesDir(), Realm.DEFAULT_REALM_NAME + ".key");
            keyData = new byte[256];
            FileInputStream stream = new FileInputStream(file);
            try {
                int read = stream.read(keyData);
                if (read != keyData.length) {
                    keyData = null;
                }
            }
            finally {
                stream.close();
            }
        } catch (java.io.IOException e) {
            // Generate a new key if reading the existing one failed for any reason
            keyData = null;
        }

        KeyPair keyPair = getKeyPair();
        final Cipher cipher = Cipher.getInstance("RSA/NONE/PKCS1Padding");

        // We have an existing secret key, so decrypt and return it
        if (keyData != null) {
            cipher.init(Cipher.UNWRAP_MODE, keyPair.getPrivate());
            return ((SecretKey)cipher.unwrap(keyData, "AES", Cipher.SECRET_KEY)).getEncoded();
        }

        // We need to generate a new secret key
        keyData = new byte[32];
        new SecureRandom().nextBytes(keyData);

        cipher.init(Cipher.WRAP_MODE, keyPair.getPublic());

        // Save the secret key to the file
        File file = new File(getFilesDir(), Realm.DEFAULT_REALM_NAME + ".key");
        FileOutputStream stream = new FileOutputStream(file);
        try {
            stream.write(cipher.wrap(new SecretKeySpec(keyData, "AES")));
        }
        finally {
            stream.close();
        }

        // Delete any existing default Realm since we won't be able to open it with the new key
        Realm.deleteRealmFile(this);

        return keyData;
    }

