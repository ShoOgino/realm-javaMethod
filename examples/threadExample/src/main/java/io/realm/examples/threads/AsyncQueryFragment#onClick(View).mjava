    @Override
    public void onClick(View view) {
        switch (view.getId()) {
            case R.id.start_button: {
                // cancel any previously running request
                cancelRequest();

                mAsyncRequest = realm.where(Dot.class)
                        .between("x", 25, 75)
                        .between("y", 0, 50)
                        .findAllSorted(
                                "x", RealmResults.SORT_ORDER_ASCENDING,
                                "y", RealmResults.SORT_ORDER_ASCENDING,
                                new RealmResults.QueryCallback<Dot>() {
                                    @Override
                                    public void onSuccess(RealmResults<Dot> results) {
                                        mAdapter.updateList(results);
                                    }

                                    @Override
                                    public void onError(Exception t) {
                                        t.printStackTrace();
                                    }
                                });
                break;
            }
            case R.id.translate_button: {
                cancelTransaction();
                // translate all points coordinates using an async transaction
                mAsyncTransaction = realm.executeTransaction(new Realm.Transaction() {
                                            @Override
                                            public void execute(Realm realm) {
                                                // query for all points
                                                RealmResults<Dot> dots = realm.where(Dot.class).findAll();
                                                for (int i = dots.size()-1; i>=0; i--) {
                                                    Dot dot = dots.get(i);
                                                    if (dot.isValid()) {
                                                        int x = dot.getX();
                                                        int y = dot.getY();
                                                        dot.setX(y);
                                                        dot.setY(x);
                                                    }
                                                    SystemClock.sleep(60);
                                                }
                                            }
                                        }, new Realm.Transaction.Callback() {
                                            @Override
                                            public void onSuccess() {
                                                if (isAdded()) {
                                                    Toast.makeText(getActivity(), "Translation completed", Toast.LENGTH_SHORT).show();
                                                }
                                            }

                                            @Override
                                            public void onError(Throwable e) {
                                                if (isAdded()) {
                                                    Toast.makeText(getActivity(), "Error while translating dots", Toast.LENGTH_SHORT).show();
                                                    e.printStackTrace();
                                                }
                                            }
                                        });
                break;
            }
        }
    }

