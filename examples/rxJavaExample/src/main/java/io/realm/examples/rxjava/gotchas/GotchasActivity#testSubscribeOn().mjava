    /**
     * Shows how to be careful with `subscribeOn()`
     */
    private Subscription testSubscribeOn() {
        Subscription subscribeOn = realm.observable().map(new Func1<Realm, Person>() {
            @Override
            public Person call(Realm realm) {
                // The Realm object was created on the UI thread. Accessing it on `Schedulers.io()` will crash.
                // Avoid using subscribeOn() and use Realms `findAllAsync*()` methods instead.
                return realm.where(Person.class).findAllSorted("name").get(0);
            }
        })
                .subscribeOn(Schedulers.io())
                .subscribe(new Action1<Person>() {
                    @Override
                    public void call(Person person) {
                        // Do nothing
                    }
                }, new Action1<Throwable>() {
                    @Override
                    public void call(Throwable throwable) {
                        showStatus("subscribeOn: " + throwable.toString());
                    }
                });

        // Use Realms Async API instead
        Subscription asyncSubscribeOn = realm.where(Person.class).findAllSortedAsync("name").get(0).observable()
                .subscribe(new Action1<Person>() {
                    @Override
                    public void call(Person person) {
                        showStatus("subscribeOn/async: " + person.getName() + ":" + person.getAge());
                    }
                }, new Action1<Throwable>() {
                    @Override
                    public void call(Throwable throwable) {
                        showStatus("subscribeOn/async: " + throwable.toString());
                    }
                });

        return new CompositeSubscription(subscribeOn, asyncSubscribeOn);
    }

