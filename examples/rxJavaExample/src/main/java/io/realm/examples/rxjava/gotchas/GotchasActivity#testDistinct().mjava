    /**
     * Shows how to to be careful when using `distinct()`
     */
    private void testDistinct() {
        Flowable<Person> personFlowable =
                realm.asFlowable().map(realm -> realm.where(Person.class).findAllSorted("name").get(0));

        // distinct() and distinctUntilChanged() uses standard equals with older objects stored in a HashMap.
        // Realm objects auto-update which means the objects stored will also auto-update.
        // This makes comparing against older objects impossible (even if the new object has changed) because the
        // cached object will also have changed.
        // Use a keySelector function to work around this.
        Disposable distinctDisposable = personFlowable
                .distinct() // Because old == new. This will only allow the first version of the "Chris" object to pass.
                .subscribe(person -> showStatus("distinct(): " + person.getName() + ":" + person.getAge()));
        compositeDisposable.add(distinctDisposable);

        Disposable distinctKeySelectorDisposable = personFlowable
                .distinct(person -> person.getAge())
                .subscribe(person -> showStatus("distinct(keySelector): " + person.getName() + ":" + person.getAge()));
        compositeDisposable.add(distinctKeySelectorDisposable);
    }

