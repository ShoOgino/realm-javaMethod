    private String complexReadWrite() {
        String status = "\nPerforming complex Read/Write operation...";

        // Open the default realm. All threads must use it's own reference to the realm.
        // Those can not be transferred across threads.
        Realm realm = Realm.getInstance(realmConfig);

        // Add ten persons in one transaction
        realm.beginTransaction();
        Dog fido = realm.createObject(Dog.class);
        fido.name = "fido";
        for (int i = 0; i < 10; i++) {
            Person person = realm.createObject(Person.class);
            person.id = i;
            person.name = "Person no. " + i;
            person.age = i;
            person.dog = fido;

            // The field tempReference is annotated with @Ignore.
            // This means setTempReference sets the Person tempReference
            // field directly. The tempReference is NOT saved as part of
            // the RealmObject:
            person.tempReference = 42;

            for (int j = 0; j < i; j++) {
                Cat cat = realm.createObject(Cat.class);
                cat.name = "Cat_" + j;
                person.cats.add(cat);
            }
        }
        realm.commitTransaction();

        // Implicit read transactions allow you to access your objects
        status += "\nNumber of persons: " + realm.allObjects(Person.class).size();

        // Iterate over all objects
        for (Person pers : realm.allObjects(Person.class)) {
            String dogName;
            if (pers.dog == null) {
                dogName = "None";
            } else {
                dogName = pers.dog.name;
            }
            status += "\n" + pers.name + ":" + pers.age + " : " + dogName + " : " + pers.cats.size();
        }

        // Sorting
        RealmResults<Person> sortedPersons = realm.allObjects(Person.class);
        sortedPersons.sort("age", Sort.DESCENDING);
        status += "\nSorting " + sortedPersons.last().name + " == " + realm.allObjects(Person.class).first().name;

        realm.close();
        return status;
    }

