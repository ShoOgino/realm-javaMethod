    public void testExample() throws IOException {

        // Realms are used to group data together
        Realm realm = new Realm(getContext().getFilesDir());

        // Update your object in a transaction
        realm.beginWrite();
        Dog myDog = realm.create(Dog.class);
        myDog.setName("Rex");
        realm.commit();

        // Read properties
        System.out.println(myDog.getName());

        // Query
        RealmList<Dog> results = realm.where(Dog.class).contains("name", "x").findAll();

        // Queries are chainable!
        results.where().greaterThan("age", 8);

        // Link objects
        Person person = new Person("Tim");


        //TODO:  person.getDogs().add(myDog);

        realm.beginWrite();
        //TODO: realm.add(person);
        realm.commit();

        // Query across links
        // RealmList<Person> persons = realm.where(Person.class).with("dogs").contains("name", "x").findAll();

        // Query from another thread
        new Thread() {
            public void run() {

                Realm realm = null;
                try {
                    realm = new Realm(getContext().getFilesDir());
                } catch (IOException e) {
                    e.printStackTrace();
                }
                realm.where(Dog.class).contains("name", "x").findAll();

            }
        }.run();

    }

