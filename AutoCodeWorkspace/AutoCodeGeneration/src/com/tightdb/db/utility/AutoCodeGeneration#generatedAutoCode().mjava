	@SuppressWarnings("unused")
	public void generatedAutoCode()
	{

		String fileName = "";
		String packageName = "";
		int noOfPackages = 0;
		String basePath = "";
		try
		{
			noOfPackages = getIntegerProperty(NO_OF_PKG);
			basePath = getProperty(BASE_PATH);

			System.out.println("Base path :: " + basePath);

			if (noOfPackages > 0 && !basePath.equals(""))
			{
				for (int i = 0; i < noOfPackages; i++)
				{
					String scanPkgName = getProperty("PKG" + (i + 1));
					System.out.println("Name of " + i + "th package ::" + scanPkgName);

					List<String> lstPkgs = new ArrayList<String>();
					findPkgAndSubPkgs(lstPkgs, scanPkgName);

					System.out.println("Packages to scan :: " + lstPkgs);

					ArrayList<Class> allClasses = new ArrayList<Class>();

					for (String pkg : lstPkgs)
					{
						Class[] clzs = getClassesInPackage(pkg);
						if (clzs != null)
						{
							allClasses.addAll(Arrays.asList(clzs));
						}
					}

					// findClasses(allClasses, new File(basePath), scanPkgName);

					System.out.println("All Classes ::" + allClasses);

					allClasses = removeUnwantedClasses(allClasses);
					System.out.println("Classes only which have annotation::" + allClasses);

					if (allClasses != null && !allClasses.isEmpty())
					{
						for (Class cls : allClasses)
						{

							autoCode = new StringBuilder();

							fileName = cls.getSimpleName();
							packageName = cls.getPackage().getName();

							// Generate Package Name
							autoCode.append("package " + packageName + "." + GENERATEDPKGPREFIX).append(";").append(NEW_LINE);

							// Generate Class Name and Variables
							generateClassNameAndDefinedVariable(cls);

							Field[] fields = cls.getDeclaredFields();

							for (Field field : fields)
							{
								String fieldName = field.getName();
								String fieldType = field.getType().getSimpleName();
								System.out.println("Name  " + fieldName + "\tTye " + fieldType);
								generateGetter(fieldName, fieldType, autoCode);
								generateSetter(fieldName, fieldType, autoCode);
							}

							autoCode.append(CLOSE_CURLY_BRACKET).append(NEW_LINE);

							String postFix = getProperty(POSTFIX_FOR_CLASSNAME);

							String path = (packageName + "." + GENERATEDPKGPREFIX).replaceAll("\\.", "/");
							File baseFolder = new File(basePath + "src/" + path);
							if (!baseFolder.exists())
							{
								baseFolder.mkdirs();
							}
							File sourceFile = new File(baseFolder, cls.getSimpleName() + postFix + ".java");

							System.out.println("File Path::" + sourceFile);
							writeStringToFile(sourceFile, autoCode.toString());
						}
					}

				}
			}
			else
			{
				System.out.println("No classes define in property file.");
			}

		}
		catch (Exception e)
		{
			System.out.println("Error ::" + e);
			e.printStackTrace();
		}

	}

