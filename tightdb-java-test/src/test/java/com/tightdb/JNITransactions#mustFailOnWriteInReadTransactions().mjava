    @Test
    public void mustFailOnWriteInReadTransactions() {

        writeOneTransaction(1);

        ReadTransaction t = db.beginRead();
        Table table = t.getTable("EmployeeTable");

        try { table.addAt(0, 0, false);             assert(false);} catch (IllegalStateException e) {}
        try { table.add(0, false);                  assert(false);} catch (IllegalStateException e) {}
        try { table.addEmptyRow();                  assert(false);} catch (IllegalStateException e) {}
        try { table.addEmptyRows(1);                assert(false);} catch (IllegalStateException e) {}
        try { table.adjust(0,0);                    assert(false);} catch (IllegalStateException e) {}
        try { table.clear();                        assert(false);} catch (IllegalStateException e) {}
        try { table.clearSubtable(0,0);             assert(false);} catch (IllegalStateException e) {}
        try { table.optimize();                     assert(false);} catch (IllegalStateException e) {}
        try { table.remove(0);                      assert(false);} catch (IllegalStateException e) {}
        try { table.removeLast();                   assert(false);} catch (IllegalStateException e) {}
        try { table.setBinaryByteArray(0,0,null);   assert(false);} catch (IllegalStateException e) {}
        try { table.setBoolean(0,0,false);          assert(false);} catch (IllegalStateException e) {}
        try { table.setDate(0,0,new Date(0));       assert(false);} catch (IllegalStateException e) {}
        try { table.setIndex(0);                    assert(false);} catch (IllegalStateException e) {}
        try { table.setLong(0,0,0);                 assert(false);} catch (IllegalStateException e) {}
        try { table.setMixed(0,0,null);             assert(false);} catch (IllegalStateException e) {}
        try { table.setString(0,0,"");              assert(false);} catch (IllegalStateException e) {}
        try { table.updateFromSpec(null);           assert(false);} catch (IllegalStateException e) {}

        TableQuery q = table.where();
        try { q.remove();                           assert(false);} catch (IllegalStateException e) {}
        try { q.remove(0,0);                        assert(false);} catch (IllegalStateException e) {}

        TableView v = q.findAll();
        try { v.adjust(0, 0);                       assert(false);} catch (IllegalStateException e) {}
        try { v.clear();                            assert(false);} catch (IllegalStateException e) {}
        try { v.clearSubtable(0, 0);                assert(false);} catch (IllegalStateException e) {}
        try { v.remove(0);                          assert(false);} catch (IllegalStateException e) {}
        try { v.removeLast();                       assert(false);} catch (IllegalStateException e) {}
        try { v.setBinaryByteArray(0, 0, null);     assert(false);} catch (IllegalStateException e) {}
        try { v.setBoolean(0, 0, false);            assert(false);} catch (IllegalStateException e) {}
        try { v.setDate(0, 0, new Date());          assert(false);} catch (IllegalStateException e) {}
        try { v.setLong(0, 0, 0);                   assert(false);} catch (IllegalStateException e) {}
        try { v.setString(0,0,"");                  assert(false);} catch (IllegalStateException e) {}
        try { v.setMixed(0, 0, null);               assert(false);} catch (IllegalStateException e) {}

        t.endRead();
        clear();
    }

