    @Test
    public void shouldAggregateDoubles() {
        assertEquals(10000.1d, numbers.doubleNum.minimum());
        assertEquals(10000.1d, numbers.doubleNum.minimum(0, 1, Table.INFINITE)); // first
        assertEquals(30000.6d, numbers.doubleNum.minimum(1, 2, Table.INFINITE)); // second
        assertEquals(10000.1d, numbers.doubleNum.minimum(0, 2, Table.INFINITE)); // 1st & 2nd

        assertEquals(30000.6d, numbers.doubleNum.maximum());
        assertEquals(10000.1d, numbers.doubleNum.maximum(0, 1, Table.INFINITE)); // first
        assertEquals(30000.6d, numbers.doubleNum.maximum(1, 2, Table.INFINITE)); // second
        assertEquals(30000.6d, numbers.doubleNum.maximum(0, 2, Table.INFINITE)); // 1st & 2nd

        assertEquals(50000.8d, numbers.doubleNum.sum(), 0.01);
        assertEquals(10000.1d, numbers.doubleNum.sum(0, 1, Table.INFINITE)); // first
        assertEquals(30000.6d, numbers.doubleNum.sum(1, 2, Table.INFINITE)); // second
        assertEquals(40000.7d, numbers.doubleNum.sum(0, 2, Table.INFINITE)); // 1st & 2nd

        assertEquals(50000.8d/3, numbers.doubleNum.average(), 0.01);
        assertEquals(30000.6d, numbers.doubleNum.average(1, 2, Table.INFINITE)); // second
        assertEquals(40000.7d/2, numbers.doubleNum.average(0, 2, Table.INFINITE)); // 1st & 2nd
        assertEquals(10000.1d, numbers.doubleNum.average(0, 1, Table.INFINITE)); // first
    }

