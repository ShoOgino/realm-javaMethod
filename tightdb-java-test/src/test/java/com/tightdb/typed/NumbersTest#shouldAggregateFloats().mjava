    @Test
    public void shouldAggregateFloats() {
        assertEquals(10000.1f, numbers.floatNum.minimum());
        assertEquals(10000.1f, numbers.floatNum.minimum(0, 1)); // first
        assertEquals(30000.6f, numbers.floatNum.minimum(1, 2)); // second
        assertEquals(10000.1f, numbers.floatNum.minimum(0, 2)); // 1st & 2nd

        assertEquals(30000.6f, numbers.floatNum.maximum());
        assertEquals(10000.1f, numbers.floatNum.maximum(0, 1)); // first
        assertEquals(30000.6f, numbers.floatNum.maximum(1, 2)); // second
        assertEquals(30000.6f, numbers.floatNum.maximum(0, 2)); // 1st & 2nd

        assertEquals(50000.8d, numbers.floatNum.sum(), 0.01);
        assertEquals(10000.1d, numbers.floatNum.sum(0, 1), 0.01); // first
        assertEquals(30000.6d, numbers.floatNum.sum(1, 2), 0.01); // second
        assertEquals(40000.7d, numbers.floatNum.sum(0, 2), 0.01); // 1st & 2nd

        assertEquals(50000.8d/3, numbers.floatNum.average(), 0.01);
        assertEquals(30000.6d, numbers.floatNum.average(1, 2), 0.01); // second
        assertEquals(40000.7d/2, numbers.floatNum.average(0, 2), 0.01); // 1st & 2nd
        assertEquals(10000.1d, numbers.floatNum.average(0, 1), 0.01); // first
    }

