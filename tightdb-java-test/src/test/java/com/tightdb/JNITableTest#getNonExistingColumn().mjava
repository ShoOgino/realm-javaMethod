    /*
    @Test
    public void lookupTableTest() {
        Table t = new Table();
      
        t.addColumn(ColumnType.STRING, "col0");
        t.addColumn(ColumnType.INTEGER, "col1");
        
        t.add("s", 1);
        t.add("s", 2);
        t.add("ss",1);
        t.add("ss", 2);
        
        // Currently lookup works, even if no index has been set on first string column. Shouldn't there be an index? TODO
        // try {  t.lookup("ss"); fail("Index not set"); } catch (RuntimeException r) { };
        
        assertEquals(2, t.lookup("ss"));
        
        t.setIndex(0);
        long rowIndex = t.lookup("ss");
        assertEquals(1, t.getLong(1, rowIndex));
        
        Table t2 = new Table();
        
        t2.addColumn(ColumnType.INTEGER, "col0");
        t2.addColumn(ColumnType.INTEGER, "col1");
        
        t2.add(1, 2);
        t2.add(3, 4);
        
        try {  t2.lookup("ss"); fail("Column not String"); } catch (RuntimeException r) { };
    }
    
*/
    @Test
    public void getNonExistingColumn() {
        Table t = new Table();
        t.addColumn(ColumnType.INTEGER, "int");
        
        assertEquals(-1, t.getColumnIndex("non-existing column"));
    }

