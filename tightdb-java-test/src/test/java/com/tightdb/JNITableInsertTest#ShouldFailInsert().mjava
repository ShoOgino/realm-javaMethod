    @Test
    public void ShouldFailInsert() {
        Table table = new Table();
        TableSpec tableSpec = new TableSpec();
        tableSpec.addColumn(ColumnType.BOOLEAN, "bool");
        tableSpec.addColumn(ColumnType.INTEGER, "number");
        tableSpec.addColumn(ColumnType.STRING, "string");
        tableSpec.addColumn(ColumnType.BINARY, "Bin");
        tableSpec.addColumn(ColumnType.DATE, "date");
        tableSpec.addColumn(ColumnType.MIXED, "mix");
        TableSpec subspec = tableSpec.addSubtableColumn("sub");
        subspec.addColumn(ColumnType.INTEGER, "sub-num");
        table.updateFromSpec(tableSpec);

        // Wrong number of parameters
        byte[] buf = new byte[23];
        try { 
            table.addAt(0, false); fail("expected exception."); 
            } catch (IllegalArgumentException e) {}

        // wrong row index
        long mix = 123;
        try { 
            table.addAt(1, false, 1, "hi", buf, new Date(), mix, null);                           
            fail("expected exception."); 
        } catch (IllegalArgumentException e) {}
        
        // wrong row index
        table.addAt(0, false, 1, "hi", buf, new Date(), 123, null);
        table.addAt(1, false, 1, "hi", buf, new Date(), 123, null);
        try { 
            table.addAt(3, false, 1, "hi", buf, new Date(), mix, null);                           
            fail("expected exception."); 
        } catch (IllegalArgumentException e) {}
        
        // Wrong type of parameter (999 instead of bool)
        try { 
            table.addAt(0, 999, 1, "hi", buf, new Date(), mix, null);                             
            fail("expected exception."); 
        } catch (IllegalArgumentException e) {}
        
        // Wrong type of parameter (bool instead of 1)
        try { 
            table.addAt(0, true, false, "hi", buf, new Date(), mix, null);                        
            fail("expected exception."); 
        } catch (IllegalArgumentException e) {}
        
        // Wrong type of parameter (999 instead of string)
        try { 
            table.addAt(0, false, 1, 999, buf, new Date(), mix, null);                            
            fail("expected exception."); 
        } catch (IllegalArgumentException e) {}
        
        // Wrong type of parameter (999 instead of Binary)
        try { 
            table.addAt(0, false, 1, "hi", 999, new Date(), mix, null);                           
            fail("expected exception."); 
        } catch (IllegalArgumentException e) {}
        
        // Wrong type of parameter (999 instead of Date)
        try { 
            table.addAt(0, false, 1, "hi", buf, 999, mix, null);                                  
            fail("expected exception."); 
        } catch (IllegalArgumentException e) {}
        
        // Wrong type of parameter (999 instead of subtable)
        try { 
            table.addAt(0, false, 1, "hi", buf, new Date(), mix, 999);                            
            fail("expected exception."); 
        } catch (IllegalArgumentException e) {}
        
        // Wrong type of parameter (String instead of subtable-Int)
        try { 
            table.addAt(0, false, 1, "hi", buf, new Date(), mix, new Object[][] { {"err",2,3}} ); 
            fail("expected exception."); 
        } catch (IllegalArgumentException e) {}
        
        // Wrong type of parameter (String instead of subtable-Int)
        try { 
            table.addAt(0, false, 1, "hi", buf, new Date(), mix, new Object[] {1,2,3} );          
            fail("expected exception."); 
        } catch (IllegalArgumentException e) {}
    }

