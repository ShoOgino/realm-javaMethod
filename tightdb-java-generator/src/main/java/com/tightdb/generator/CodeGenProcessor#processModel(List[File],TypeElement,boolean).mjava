    private void processModel(List<File> sourceFolders, TypeElement model, boolean insideEclipse) {
        String modelType = model.getQualifiedName().toString();

        List<VariableElement> fields = getFields(model);

        // work-around for Eclipse
        if (insideEclipse) {
            // sort the fields, due to unresolved bug in Eclipse APT
            fieldSorter.sortFields(fields, model, sourceFolders);
        }

        // get the capitalized model name
        String entity = StringUtils.capitalize(model.getSimpleName().toString());

        logger.info("Generating code for entity '" + entity + "' with " + fields.size() + " columns...");

        /*********** Prepare the attributes for the templates ****************/

        /* Construct the list of columns */

        final List<Model> columns = getColumns(fields);
        if (columns.isEmpty()) {
            logger.warn(MSG_NO_COLUMNS, model);
        }

        /* Set the attributes */

        String packageName = calculatePackageName(model);
        boolean isNested = isSubtable(modelType);

        ModelInfo modelInfo = modelsInfo.get(entity);

        Map<String, Object> commonAttr = new HashMap<String, Object>();
        commonAttr.put("columns", columns);
        commonAttr.put("isNested", isNested);
        commonAttr.put("packageName", packageName);
        commonAttr.put("tableName", modelInfo.getTableName());
        commonAttr.put("viewName", modelInfo.getViewName());
        commonAttr.put("cursorName", modelInfo.getCursorName());
        commonAttr.put("queryName", modelInfo.getQueryName());
        commonAttr.put("java_header", INFO_GENERATED);

        generateSources(model, modelInfo.getTableName(), modelInfo.getCursorName(), modelInfo.getViewName(),
                modelInfo.getQueryName(), packageName, commonAttr);
    }

