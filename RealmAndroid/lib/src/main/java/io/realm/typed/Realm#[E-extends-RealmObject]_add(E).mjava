    /**
     * Adds an object to the realm, and returns a new instance which is backed by the Realm
     *
     * @param element           The element to add to this realm.
     * @param <E>
     * @return
     */
    public <E extends RealmObject> void add(E element) {

        System.out.println("Adding " + element.getClass().getName());

        initTable(element.getClass());

        String className = element.getClass().getSimpleName();

        if(!cache.containsKey(className)) {


            List<Field> fields = Arrays.asList(element.getClass().getDeclaredFields());
            List<Field> persistedFields = new ArrayList<Field>();
            for(Field f : fields) {
                if(f.getType().equals(String.class) ||
                        f.getType().equals(int.class) ||
                        f.getType().equals(Integer.class) ||
                        f.getType().equals(long.class) ||
                        f.getType().equals(Long.class) ||
                        f.getType().equals(float.class) ||
                        f.getType().equals(Float.class) ||
                        f.getType().equals(double.class) ||
                        f.getType().equals(Double.class) ||
                        f.getType().equals(boolean.class) ||
                        f.getType().equals(Boolean.class) ||
                        f.getType().equals(Date.class) ||
                        f.getType().equals(byte[].class) ||
                        RealmObject.class.equals(f.getType().getSuperclass())

                        ) {

                    f.setAccessible(true);
                    persistedFields.add(f);
                } else if (RealmList.class.isAssignableFrom(f.getType())) {
                    // Link List
                    Type genericType = f.getGenericType();
                    if (genericType instanceof ParameterizedType) {
                        ParameterizedType pType = (ParameterizedType) genericType;
                        Class<?> actual = (Class<?>) pType.getActualTypeArguments()[0];
                        if(RealmObject.class.equals(actual.getSuperclass())) {
                            f.setAccessible(true);
                            persistedFields.add(f);
                        }
                    }
                }
            }

            cache.put(className, persistedFields);

        }

        Table table = getTable(element.getClass());
        long rowIndex = table.addEmptyRow();
        long columnIndex = 0;

        element.realmAddedAtRowIndex = rowIndex;

        List<Field> fields = cache.get(className);

        // Inspect fields and add them
        for(Field f : fields) {

            try {
                Class<?> type = f.getType();

                if(type.equals(String.class)) {
                    table.setString(columnIndex, rowIndex, (String)f.get(element));
                } else if(type.equals(int.class) || type.equals(Integer.class)) {
                    table.setLong(columnIndex, rowIndex, f.getInt(element));
                } else if(type.equals(long.class) || type.equals(Long.class)) {
                    table.setLong(columnIndex, rowIndex, f.getLong(element));
                } else if(type.equals(double.class) || type.equals(Double.class)) {
                    table.setDouble(columnIndex, rowIndex, f.getDouble(element));
                } else if(type.equals(float.class) || type.equals(Float.class)) {
                    table.setFloat(columnIndex, rowIndex, f.getFloat(element));
                } else if(type.equals(boolean.class) || type.equals(Boolean.class)) {
                    table.setBoolean(columnIndex, rowIndex, f.getBoolean(element));
                } else if(type.equals(Date.class)) {
                    table.setDate(columnIndex, rowIndex, (Date)f.get(element));
                } else if(type.equals(byte[].class)) {
                    table.setBinaryByteArray(columnIndex, rowIndex, (byte[])f.get(element));
                } else if(RealmObject.class.equals(f.getType().getSuperclass())) {

                    RealmObject linkedObject = (RealmObject)f.get(element);
                    if(linkedObject != null) {
                        if(linkedObject.realmGetRow() == null) {
                            if(linkedObject.realmAddedAtRowIndex == -1) {
                                add(linkedObject);
                            }
                            table.setLink(columnIndex, rowIndex, linkedObject.realmAddedAtRowIndex);
                        } else {
                            table.setLink(columnIndex, rowIndex, linkedObject.realmGetRow().getIndex());
                        }
                    }

                } else if (RealmList.class.isAssignableFrom(f.getType())) {
                    // Link List
                    Type genericType = f.getGenericType();
                    if (genericType instanceof ParameterizedType) {
                        ParameterizedType pType = (ParameterizedType) genericType;
                        Class<?> actual = (Class<?>) pType.getActualTypeArguments()[0];
                        if(RealmObject.class.equals(actual.getSuperclass())) {

                            LinkView links = table.getRow(rowIndex).getLinkList(columnIndex);

                            // Loop through list and add them to the link list and possibly to the realm
                            for(RealmObject linkedObject : (List<RealmObject>)f.get(element)) {

                                if(linkedObject.realmGetRow() == null) {
                                    if(linkedObject.realmAddedAtRowIndex == -1) {
                                        add(linkedObject);
                                    }
                                    links.add(linkedObject.realmAddedAtRowIndex);
                                } else {
                                    links.add(linkedObject.realmGetRow().getIndex());
                                }
                            }
                        }
                    }
                }

            } catch(IllegalAccessException e) {
                e.printStackTrace();
            }

            columnIndex++;
        }

    }

