    /**
     * Adds an object to the realm, and returns a new instance which is backed by the Realm
     *
     * @param element           The element to add to this realm.
     * @param <E>
     * @return
     */
    public <E extends RealmObject> void add(E element) {

        initTable(element.getClass());

        String className = element.getClass().getSimpleName();

        if(!cache.containsKey(className)) {


            List<Field> fields = Arrays.asList(element.getClass().getDeclaredFields());
            List<Field> persistedFields = new ArrayList<Field>();
            for(Field f : fields) {
                if(f.getType().equals(String.class) ||
                        f.getType().equals(int.class) ||
                        f.getType().equals(Integer.class) ||
                        f.getType().equals(long.class) ||
                        f.getType().equals(Long.class) ||
                        f.getType().equals(float.class) ||
                        f.getType().equals(Float.class) ||
                        f.getType().equals(double.class) ||
                        f.getType().equals(Double.class) ||
                        f.getType().equals(boolean.class) ||
                        f.getType().equals(Boolean.class) ||
                        f.getType().equals(Date.class) ||
                        f.getType().equals(byte[].class)) {
                    f.setAccessible(true);
                    persistedFields.add(f);
                }
            }

            cache.put(className, persistedFields);

        }


        List<Field> fields = cache.get(className);

        List<Object> rows = new ArrayList<Object>(fields.size());

        // Inspect fields and add them
        for(Field f : fields) {

            try {



                rows.add(f.get(element));
/*
                } else if(RealmObject.class.equals(f.getType().getSuperclass())) {
                    // This is a link, should add in different table and update the link
                    System.out.println("Insert linked object in corresponding table");
                    RealmObject linkedObject = (RealmObject)f.get(element);
                    if(linkedObject != null) {
                        add(linkedObject);
                        System.out.println("Object added");
                    }

                    // Add link
                }
*/
            } catch(IllegalAccessException e) {
                e.printStackTrace();
            }

        }

        ((Table)getTable(element.getClass())).add(rows.toArray());

     //   E proxiedObject = null;
        /*
        try {
            proxiedObject = (E)ProxyBuilder.forClass((element).getClass())
                    .dexCache(this.context.getDir("dx", Context.MODE_PRIVATE))
                    .handler(new RealmProxy(this, index))
                    .build();
        } catch (IOException e) {
            e.printStackTrace();
        }
*/

        //return proxiedObject;
    }

