    public void testAllColumnsAdd() {

        Realm realm = new Realm(this.getContext());

        realm.clear();

        realm.beginWrite();
/*
        realm.ensureRealmAtVersion(2, new RealmMigration() {
            @Override
            public void execute(Realm realm, int version) {

                Table table = realm.getTable(User.class);

                if(realm.getVersion() < 1) {
                    table.addColumn(ColumnType.STRING, "newStringCol");
                }

                if(realm.getVersion() < 2) {
                    table.removeColumn(table.getColumnIndex("newStringCol"));
                }

                realm.setVersion(version);

            }
        });
*/
        AllColumns obj = new AllColumns();

        obj.setColumnString("dsfs");
        obj.setColumnLong(1);
        obj.setColumnFloat(1.1F);
        obj.setColumnDouble(1.1);
        obj.setColumnBoolean(true);
        obj.setColumnDate(new Date());
        obj.setColumnBinary(new byte[20]);

        User user = new User();
        user.setName("Rasmus");
        user.setEmail("ra@realm.io");
        user.setId(0);



        realm.add(obj);


        realm.commit();


        AllColumns instance = realm.where(AllColumns.class).findFirst();

        User ras = instance.getColumnRealmObject();

        assertEquals(null, ras);



        RealmList<AllColumns> result = realm.where(AllColumns.class).findAll();
        assertEquals(1, result.size());


        realm.beginWrite();

        AllColumns row1 = realm.where(AllColumns.class).findFirst();

        User testUser = new User();
        testUser.setName("sdf");
        testUser.setEmail("sd");

        row1.setColumnRealmObject(testUser);

        realm.commit();

        row1 = realm.where(AllColumns.class).findFirst();

        User user1 = row1.getColumnRealmObject();

        assertEquals("sdf", user1.getName());
    }

