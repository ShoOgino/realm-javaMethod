    // Check that the Realm can still be opened even if the ondisk schema has more fields than in the model class.
    // The underlying field should not be deleted, just hidden.
    @Test
    public void missingFields_hiddenSilently() {
        SyncConfiguration config = configFactory.createSyncConfigurationBuilder(SyncTestUtils.createTestUser(), "http://foo.com/auth")
                .schema(StringOnly.class)
                .build();

        // Setup initial Realm schema (with too many fields)
        String className = StringOnly.class.getSimpleName();
        DynamicRealm dynamicRealm = DynamicRealm.getInstance(config);
        RealmSchema schema = dynamicRealm.getSchema();
        dynamicRealm.beginTransaction();
        schema.create(className)
                .addField(StringOnly.FIELD_CHARS, String.class)
                .addField("newField", String.class);
        // A schema version has to be set otherwise Object Store will try to initialize the schema again and reach an
        // error branch. That is not a real case.
        dynamicRealm.setVersion(0);
        dynamicRealm.commitTransaction();
        dynamicRealm.close();

        // Open typed Realm, which will validate the schema
        Realm realm = Realm.getInstance(config);
        RealmObjectSchema stringOnlySchema = realm.getSchema().get(className);
        try {
            assertTrue(stringOnlySchema.hasField(StringOnly.FIELD_CHARS));
            assertTrue(stringOnlySchema.hasField("newField"));
            assertEquals(2, stringOnlySchema.getFieldNames().size());
        } finally {
            realm.close();
        }
    }

