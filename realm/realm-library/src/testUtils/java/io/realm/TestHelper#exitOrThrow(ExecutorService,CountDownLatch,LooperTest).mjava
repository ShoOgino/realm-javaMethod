    // Cleans resource, shutdowns the executor service and throws any background exception.
    @SuppressWarnings("Finally")
    public static void exitOrThrow(ExecutorService executorService, CountDownLatch testFinishedSignal, LooperTest test) throws Throwable {

        // Waits for the signal indicating the test's use case is done.
        try {
            // Even if this fails we want to try as hard as possible to cleanup. If we fail to close all resources
            // properly, the `after()` method will most likely throw as well because it tries do delete any Realms
            // used. Any exception in the `after()` code will mask the original error.
            TestHelper.awaitOrFail(testFinishedSignal);
        } finally {
            Looper looper = test.getLooper();
            if (looper != null) {
                // Failing to quit the looper will not execute the finally block responsible
                // of closing the Realm.
                looper.quit();
            }

            // Closes the executor.
            // This needs to be called after waiting since it might interrupt waitRealmThreadExecutorFinish().
            executorService.shutdownNow();

            Throwable fault = test.getAssertionError();
            if (fault != null) {
                // Throws any assertion errors happened in the background thread.
                throw fault;
            }
        }
    }

