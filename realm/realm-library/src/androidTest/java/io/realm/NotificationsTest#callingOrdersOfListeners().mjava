    // FIXME check if the SharedRealm Changed in handleAsyncTransactionCompleted and reenable this test.
    // We precisely depend on the order of triggering change listeners right now.
    // So it should be:
    // 1. Synced object listener
    // 2. Synced results listener
    // 3. Global listener
    // Async listeners are not concerned by this test. Since they are triggered by different event and no advance read
    // involved.
    // If this case fails on your code, think twice before changing the test!
    // https://github.com/realm/realm-java/issues/2408 is related to this test!
    @Test
    @Ignore("Listener on Realm might be trigger more times, ignore for now")
    @RunTestInLooperThread
    public void callingOrdersOfListeners() {
        final Realm realm = looperThread.realm;
        final AtomicInteger count = new AtomicInteger(0);

        final RealmChangeListener<RealmResults<AllTypes>> syncedResultsListener =
                new RealmChangeListener<RealmResults<AllTypes>>() {
                    @Override
                    public void onChange(RealmResults<AllTypes> element) {
                        // First called.
                        assertEquals(0, count.getAndIncrement());
                    }
                };

        final RealmChangeListener<AllTypes> syncedObjectListener = new RealmChangeListener<AllTypes>() {
            @Override
            public void onChange(AllTypes element) {
                // Second called.
                assertEquals(1, count.getAndIncrement());
            }
        };
        final RealmChangeListener<Realm> globalListener = new RealmChangeListener<Realm>() {
            @Override
            public void onChange(Realm element) {
                // Third called.
                assertEquals(2, count.getAndIncrement());
                looperThread.testComplete();
            }
        };


        realm.beginTransaction();
        final AllTypes allTypes = realm.createObject(AllTypes.class);
        realm.commitTransaction();

        // We need to create one objects first and let the pass the first change event.
        final RealmChangeListener<Realm> initListener = new RealmChangeListener<Realm>() {
            @Override
            public void onChange(Realm element) {
                looperThread.postRunnable(new Runnable() {
                    @Override
                    public void run() {
                        // Clears the change listeners.
                        realm.removeAllChangeListeners();

                        // Now we can start testing.
                        allTypes.addChangeListener(syncedObjectListener);
                        RealmResults<AllTypes> results = realm.where(AllTypes.class).findAll();
                        results.addChangeListener(syncedResultsListener);
                        realm.addChangeListener(globalListener);

                        // Now we trigger those listeners.
                        realm.executeTransactionAsync(new Realm.Transaction() {
                            @Override
                            public void execute(Realm realm) {
                                AllTypes allTypes = realm.where(AllTypes.class).findFirst();
                                assertNotNull(allTypes);
                                allTypes.setColumnLong(42);
                            }
                        });
                    }
                });
            }
        };
        realm.addChangeListener(initListener);
    }

