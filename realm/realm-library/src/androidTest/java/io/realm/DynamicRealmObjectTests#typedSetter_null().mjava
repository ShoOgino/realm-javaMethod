    // Tests types where you can set null using the typed setter instead of using setNull().
    @Test
    public void typedSetter_null() {
        realm.beginTransaction();
        NullTypes obj = realm.createObject(NullTypes.class, 0);
        DynamicRealmObject dObj = new DynamicRealmObject(obj);
        try {
            for (SupportedType type : SupportedType.values()) {
                switch (type) {
                    case OBJECT:
                        dObj.setObject(NullTypes.FIELD_OBJECT_NULL, null);
                        assertNull(dObj.getObject(NullTypes.FIELD_OBJECT_NULL));
                        break;
                    case LIST:
                        try {
                            dObj.setList(NullTypes.FIELD_LIST_NULL, null);
                            fail();
                        } catch (IllegalArgumentException ignored) {
                        }
                        break;
                    case LIST_INTEGER:
                        try {
                            dObj.setList(NullTypes.FIELD_INTEGER_LIST_NULL, null);
                            fail();
                        } catch (IllegalArgumentException ignored) {
                        }
                        break;
                    case LIST_STRING:
                        try {
                            dObj.setList(NullTypes.FIELD_STRING_LIST_NULL, null);
                            fail();
                        } catch (IllegalArgumentException ignored) {
                        }
                        break;
                    case LIST_BOOLEAN:
                        try {
                            dObj.setList(NullTypes.FIELD_BOOLEAN_LIST_NULL, null);
                            fail();
                        } catch (IllegalArgumentException ignored) {
                        }
                        break;
                    case LIST_FLOAT:
                        try {
                            dObj.setList(NullTypes.FIELD_FLOAT_LIST_NULL, null);
                            fail();
                        } catch (IllegalArgumentException ignored) {
                        }
                        break;
                    case LIST_DOUBLE:
                        try {
                            dObj.setList(NullTypes.FIELD_DOUBLE_LIST_NULL, null);
                            fail();
                        } catch (IllegalArgumentException ignored) {
                        }
                        break;
                    case LIST_BINARY:
                        try {
                            dObj.setList(NullTypes.FIELD_BINARY_LIST_NULL, null);
                            fail();
                        } catch (IllegalArgumentException ignored) {
                        }
                        break;
                    case LIST_DATE:
                        try {
                            dObj.setList(NullTypes.FIELD_DATE_LIST_NULL, null);
                            fail();
                        } catch (IllegalArgumentException ignored) {
                        }
                        break;
                    case DATE:
                        dObj.setDate(NullTypes.FIELD_DATE_NULL, null);
                        assertNull(dObj.getDate(NullTypes.FIELD_DATE_NULL));
                        break;
                    case STRING:
                        dObj.setString(NullTypes.FIELD_STRING_NULL, null);
                        assertNull(dObj.getString(NullTypes.FIELD_STRING_NULL));
                        break;
                    case BINARY:
                        dObj.setBlob(NullTypes.FIELD_BYTES_NULL, null);
                        assertNull(dObj.getBlob(NullTypes.FIELD_BYTES_NULL));
                        break;
                    case BOOLEAN:
                    case SHORT:
                    case INT:
                    case LONG:
                    case FLOAT:
                    case DOUBLE:
                    default:
                        // The typed setters for these cannot accept null as input.
                }
            }
        } finally {
            realm.cancelTransaction();
        }
    }

