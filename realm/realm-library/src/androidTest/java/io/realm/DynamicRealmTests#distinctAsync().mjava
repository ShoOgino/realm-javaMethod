    @Test
    @RunTestInLooperThread
    public void distinctAsync() {
        final DynamicRealm dynamicRealm = DynamicRealm.getInstance(looperThread.realmConfiguration);
        final long numberOfBlocks = 25;
        final long numberOfObjects = 10; // must be greater than 1
        populateForDistinct(dynamicRealm, numberOfBlocks, numberOfObjects, false);

        final RealmResults<DynamicRealmObject> distinctBool = dynamicRealm.distinctAsync(AnnotationIndexTypes.CLASS_NAME, AnnotationIndexTypes.FIELD_INDEX_BOOL);
        final RealmResults<DynamicRealmObject> distinctLong = dynamicRealm.distinctAsync(AnnotationIndexTypes.CLASS_NAME, AnnotationIndexTypes.FIELD_INDEX_LONG);
        final RealmResults<DynamicRealmObject> distinctDate = dynamicRealm.distinctAsync(AnnotationIndexTypes.CLASS_NAME, AnnotationIndexTypes.FIELD_INDEX_DATE);
        final RealmResults<DynamicRealmObject> distinctString = dynamicRealm.distinctAsync(AnnotationIndexTypes.CLASS_NAME, AnnotationIndexTypes.FIELD_INDEX_STRING);

        final Runnable callbackDoneTask = new Runnable() {
            final CountDownLatch signalTestFinished = new CountDownLatch(4);
            @Override
            public void run() {
                signalTestFinished.countDown();
                if (signalTestFinished.getCount() == 0) {
                    dynamicRealm.close();
                    looperThread.testComplete();
                }
            }
        };

        distinctBool.addChangeListener(new RealmChangeListener() {
            @Override
            public void onChange() {
                assertEquals(2, distinctBool.size());
                callbackDoneTask.run();
            }
        });

        distinctLong.addChangeListener(new RealmChangeListener() {
            @Override
            public void onChange() {
                assertEquals(numberOfBlocks, distinctLong.size());
                callbackDoneTask.run();
            }
        });

        distinctDate.addChangeListener(new RealmChangeListener() {
            @Override
            public void onChange() {
                assertEquals(numberOfBlocks, distinctDate.size());
                callbackDoneTask.run();
            }
        });

        distinctString.addChangeListener(new RealmChangeListener() {
            @Override
            public void onChange() {
                assertEquals(numberOfBlocks, distinctString.size());
                callbackDoneTask.run();
            }
        });
    }

