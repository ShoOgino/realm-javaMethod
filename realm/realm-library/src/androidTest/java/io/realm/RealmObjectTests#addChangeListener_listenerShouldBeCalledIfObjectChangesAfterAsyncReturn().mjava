    // step 1: findFirstAsync
    // step 2: async query returns, change the object in the listener
    // step 3: listener gets called again
    @Test
    @RunTestInLooperThread
    public void addChangeListener_listenerShouldBeCalledIfObjectChangesAfterAsyncReturn() {
        final AtomicInteger listenerCounter = new AtomicInteger(0);
        final Realm realm = looperThread.realm;
        realm.beginTransaction();
        realm.createObject(AllTypesPrimaryKey.class, 1);
        realm.commitTransaction();

        // Step 1
        final AllTypesPrimaryKey allTypesPrimaryKey = realm.where(AllTypesPrimaryKey.class).findFirstAsync();
        looperThread.keepStrongReference.add(allTypesPrimaryKey);
        allTypesPrimaryKey.addChangeListener(new RealmChangeListener<AllTypesPrimaryKey>() {
            @Override
            public void onChange(AllTypesPrimaryKey element) {
                int count = listenerCounter.getAndAdd(1);
                if (count == 0) {
                    // Step 2
                    realm.executeTransactionAsync(new Realm.Transaction() {
                        @Override
                        public void execute(Realm realm) {
                            realm.where(AllTypesPrimaryKey.class).findFirst().setColumnFloat(42f);
                        }
                    });
                } else if (count == 1) {
                    // Step 3
                    assertEquals(allTypesPrimaryKey.getColumnFloat(), 42f, 0);
                    looperThread.testComplete();
                } else {
                    fail();
                }
            }
        });
    }

