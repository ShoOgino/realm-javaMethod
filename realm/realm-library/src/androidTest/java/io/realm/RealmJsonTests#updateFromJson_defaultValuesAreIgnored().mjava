    @Test
    public void updateFromJson_defaultValuesAreIgnored() throws JSONException {
        final long fieldLongPrimaryKeyValue = DefaultValueOfField.FIELD_LONG_PRIMARY_KEY_DEFAULT_VALUE + 1;

        // Step 1: Create an object with default values
        final DefaultValueOfField original;
        realm.beginTransaction(); {
            original = realm.createObject(DefaultValueOfField.class, fieldLongPrimaryKeyValue);
        }
        realm.commitTransaction();

        // Step 2: Prepare JSON
        final String fieldIgnoredValue = DefaultValueOfField.FIELD_IGNORED_DEFAULT_VALUE + ".modified";
        final String fieldStringValue = DefaultValueOfField.FIELD_STRING_DEFAULT_VALUE + ".modified";
        final String fieldRandomStringValue = "non-random";
        final short fieldShortValue = (short) (DefaultValueOfField.FIELD_SHORT_DEFAULT_VALUE + 1);
        final int fieldIntValue = DefaultValueOfField.FIELD_INT_DEFAULT_VALUE + 1;
        final long fieldLongValue = DefaultValueOfField.FIELD_LONG_DEFAULT_VALUE + 1;
        final byte fieldByteValue = (byte) (DefaultValueOfField.FIELD_BYTE_DEFAULT_VALUE + 1);
        final float fieldFloatValue = DefaultValueOfField.FIELD_FLOAT_DEFAULT_VALUE + 1;
        final double fieldDoubleValue = DefaultValueOfField.FIELD_DOUBLE_DEFAULT_VALUE + 1;
        final boolean fieldBooleanValue = !DefaultValueOfField.FIELD_BOOLEAN_DEFAULT_VALUE;
        final Date fieldDateValue = new Date(DefaultValueOfField.FIELD_DATE_DEFAULT_VALUE.getTime() + 1);
        final byte[] fieldBinaryValue = {(byte) (DefaultValueOfField.FIELD_BINARY_DEFAULT_VALUE[0] - 1)};
        final int fieldObjectIntValue = RandomPrimaryKey.FIELD_INT_DEFAULT_VALUE + 1;
        final int fieldListIntValue = RandomPrimaryKey.FIELD_INT_DEFAULT_VALUE + 2;

        final JSONObject json = new JSONObject();
        json.put(DefaultValueOfField.FIELD_LONG_PRIMARY_KEY, fieldLongPrimaryKeyValue);
        json.put(DefaultValueOfField.FIELD_IGNORED, fieldIgnoredValue);
        json.put(DefaultValueOfField.FIELD_STRING, fieldStringValue);
        json.put(DefaultValueOfField.FIELD_RANDOM_STRING, fieldRandomStringValue);
        json.put(DefaultValueOfField.FIELD_SHORT, fieldShortValue);
        json.put(DefaultValueOfField.FIELD_INT, fieldIntValue);
        json.put(DefaultValueOfField.FIELD_LONG, fieldLongValue);
        json.put(DefaultValueOfField.FIELD_BYTE, fieldByteValue);
        json.put(DefaultValueOfField.FIELD_FLOAT, fieldFloatValue);
        json.put(DefaultValueOfField.FIELD_DOUBLE, fieldDoubleValue);
        json.put(DefaultValueOfField.FIELD_BOOLEAN, fieldBooleanValue);
        json.put(DefaultValueOfField.FIELD_DATE, ISO8601Utils.format(fieldDateValue, true));
        json.put(DefaultValueOfField.FIELD_BINARY, Base64.encodeToString(fieldBinaryValue, Base64.DEFAULT));
        // value for 'fieldObject'
        final JSONObject fieldObjectJson = new JSONObject();
        fieldObjectJson.put(RandomPrimaryKey.FIELD_RANDOM_PRIMARY_KEY,
                original.getFieldObject().getFieldRandomPrimaryKey());
        fieldObjectJson.put(RandomPrimaryKey.FIELD_INT, fieldObjectIntValue);
        json.put(DefaultValueOfField.FIELD_OBJECT, fieldObjectJson);
        // value for 'fieldList'
        final JSONArray fieldListArrayJson = new JSONArray();
        final JSONObject fieldListItem0Json = new JSONObject(); // to be added
        fieldListItem0Json.put(RandomPrimaryKey.FIELD_RANDOM_PRIMARY_KEY,  "unique value");
        fieldListItem0Json.put(RandomPrimaryKey.FIELD_INT, fieldListIntValue);
        fieldListArrayJson.put(fieldListItem0Json);
        final JSONObject fieldListItem1Json = new JSONObject(); // to be updated
        fieldListItem1Json.put(RandomPrimaryKey.FIELD_RANDOM_PRIMARY_KEY,
                original.getFieldList().first().getFieldRandomPrimaryKey());
        fieldListItem1Json.put(RandomPrimaryKey.FIELD_INT, fieldListIntValue + 1);
        fieldListArrayJson.put(fieldListItem1Json);
        json.put(DefaultValueOfField.FIELD_LIST, fieldListArrayJson);

        // Step 3: Update with JSONObject
        realm.beginTransaction();
        final DefaultValueOfField managedObj = realm.createOrUpdateObjectFromJson(DefaultValueOfField.class, json);
        realm.commitTransaction();

        // Step 4: Check that properly updated
        assertEquals(DefaultValueOfField.FIELD_IGNORED_DEFAULT_VALUE/*not fieldIgnoredValue*/,
                managedObj.getFieldIgnored());
        assertEquals(fieldStringValue, managedObj.getFieldString());
        assertEquals(fieldRandomStringValue, managedObj.getFieldRandomString());
        assertEquals(fieldShortValue, managedObj.getFieldShort());
        assertEquals(fieldIntValue, managedObj.getFieldInt());
        assertEquals(fieldLongPrimaryKeyValue, managedObj.getFieldLongPrimaryKey());
        assertEquals(fieldLongValue, managedObj.getFieldLong());
        assertEquals(fieldByteValue, managedObj.getFieldByte());
        assertEquals(fieldFloatValue, managedObj.getFieldFloat(), 0f);
        assertEquals(fieldDoubleValue, managedObj.getFieldDouble(), 0d);
        assertEquals(fieldBooleanValue, managedObj.isFieldBoolean());
        assertEquals(fieldDateValue, managedObj.getFieldDate());
        assertTrue(Arrays.equals(fieldBinaryValue, managedObj.getFieldBinary()));
        assertEquals(fieldObjectIntValue, managedObj.getFieldObject().getFieldInt());
        assertEquals(2, managedObj.getFieldList().size());
        assertEquals("unique value", managedObj.getFieldList().get(0).getFieldRandomPrimaryKey());
        assertEquals(fieldListIntValue, managedObj.getFieldList().get(0).getFieldInt());
        assertEquals(fieldListItem1Json.get(RandomPrimaryKey.FIELD_RANDOM_PRIMARY_KEY),
                managedObj.getFieldList().get(1).getFieldRandomPrimaryKey());
        assertEquals(fieldListIntValue + 1, managedObj.getFieldList().get(1).getFieldInt());

        // make sure that excess object by default value is not created.
        assertEquals(3/* 2 updated + 1 added*/, realm.where(RandomPrimaryKey.class).count());
    }

