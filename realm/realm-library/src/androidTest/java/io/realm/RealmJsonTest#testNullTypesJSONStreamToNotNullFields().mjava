    // If JSON has a field with value null, and corresponding object's field is not nullable,
    // an exception should be throw. Stream version.
    public void testNullTypesJSONStreamToNotNullFields() throws IOException, JSONException {
        String json = TestHelper.streamToString(loadJsonFromAssets("nulltypes_invalid.json"));
        JSONArray array = new JSONArray(json);

        // 1 String
        try {
            testRealm.beginTransaction();
            testRealm.createObjectFromJson(NullTypes.class, convertJsonObjectToStream(array.getJSONObject(0)));
            fail();
        } catch (IllegalArgumentException ignored) {
        } finally {
            testRealm.cancelTransaction();
        }
        // 2 Bytes
        try {
            testRealm.beginTransaction();
            testRealm.createObjectFromJson(NullTypes.class, convertJsonObjectToStream(array.getJSONObject(1)));
            fail();
        } catch (IllegalArgumentException ignored) {
        } finally {
            testRealm.cancelTransaction();
        }
        // 3 Boolean
        try {
            testRealm.beginTransaction();
            testRealm.createObjectFromJson(NullTypes.class, convertJsonObjectToStream(array.getJSONObject(2)));
            fail();
        } catch (IllegalArgumentException ignored) {
        } finally {
            testRealm.cancelTransaction();
        }
        // 4 Byte
        try {
            testRealm.beginTransaction();
            testRealm.createObjectFromJson(NullTypes.class, convertJsonObjectToStream(array.getJSONObject(3)));
            fail();
        } catch (IllegalArgumentException ignored) {
        } finally {
            testRealm.cancelTransaction();
        }
        // 5 Short
        try {
            testRealm.beginTransaction();
            testRealm.createObjectFromJson(NullTypes.class, convertJsonObjectToStream(array.getJSONObject(4)));
            fail();
        } catch (IllegalArgumentException ignored) {
        } finally {
            testRealm.cancelTransaction();
        }
        // 6 Integer
        try {
            testRealm.beginTransaction();
            testRealm.createObjectFromJson(NullTypes.class, convertJsonObjectToStream(array.getJSONObject(5)));
            fail();
        } catch (IllegalArgumentException ignored) {
        } finally {
            testRealm.cancelTransaction();
        }
        // 7 Long
        try {
            testRealm.beginTransaction();
            testRealm.createObjectFromJson(NullTypes.class, convertJsonObjectToStream(array.getJSONObject(6)));
            fail();
        } catch (IllegalArgumentException ignored) {
        } finally {
            testRealm.cancelTransaction();
        }
        // 8 Float
        try {
            testRealm.beginTransaction();
            testRealm.createObjectFromJson(NullTypes.class, convertJsonObjectToStream(array.getJSONObject(7)));
            fail();
        } catch (IllegalArgumentException ignored) {
        } finally {
            testRealm.cancelTransaction();
        }
        // 9 Double
        try {
            testRealm.beginTransaction();
            testRealm.createObjectFromJson(NullTypes.class, convertJsonObjectToStream(array.getJSONObject(8)));
            fail();
        } catch (IllegalArgumentException ignored) {
        } finally {
            testRealm.cancelTransaction();
        }
        // 10 Date
        try {
            testRealm.beginTransaction();
            testRealm.createObjectFromJson(NullTypes.class, convertJsonObjectToStream(array.getJSONObject(9)));
            fail();
        } catch (IllegalArgumentException ignored) {
        } finally {
            testRealm.cancelTransaction();
        }
    }

