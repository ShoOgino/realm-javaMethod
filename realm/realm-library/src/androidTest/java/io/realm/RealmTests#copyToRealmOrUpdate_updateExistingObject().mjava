    @Test
    public void copyToRealmOrUpdate_updateExistingObject() {
        realm.executeTransaction(new Realm.Transaction() {
            @Override
            public void execute(Realm realm) {
                AllTypesPrimaryKey obj = new AllTypesPrimaryKey();
                obj.setColumnString("Foo");
                obj.setColumnLong(1);
                obj.setColumnFloat(1.23F);
                obj.setColumnDouble(1.234D);
                obj.setColumnBoolean(false);
                obj.setColumnBinary(new byte[] {1, 2, 3});
                obj.setColumnDate(new Date(1000));
                obj.setColumnRealmObject(new DogPrimaryKey(1, "Dog1"));
                obj.setColumnRealmList(new RealmList<DogPrimaryKey>(new DogPrimaryKey(2, "Dog2")));
                obj.setColumnBoxedBoolean(true);
                obj.setColumnStringList(new RealmList<>("1"));
                obj.setColumnBooleanList(new RealmList<>(false));
                obj.setColumnBinaryList(new RealmList<>(new byte[] {1}));
                obj.setColumnLongList(new RealmList<>(1L));
                obj.setColumnDoubleList(new RealmList<>(1D));
                obj.setColumnFloatList(new RealmList<>(1F));
                obj.setColumnDateList(new RealmList<>(new Date(1L)));
                realm.copyToRealm(obj);

                AllTypesPrimaryKey obj2 = new AllTypesPrimaryKey();
                obj2.setColumnString("Bar");
                obj2.setColumnLong(1);
                obj2.setColumnFloat(2.23F);
                obj2.setColumnDouble(2.234D);
                obj2.setColumnBoolean(true);
                obj2.setColumnBinary(new byte[] {2, 3, 4});
                obj2.setColumnDate(new Date(2000));
                obj2.setColumnRealmObject(new DogPrimaryKey(3, "Dog3"));
                obj2.setColumnRealmList(new RealmList<DogPrimaryKey>(new DogPrimaryKey(4, "Dog4")));
                obj2.setColumnBoxedBoolean(false);
                obj2.setColumnStringList(new RealmList<>("2", "3"));
                obj2.setColumnBooleanList(new RealmList<>(true, false));
                obj2.setColumnBinaryList(new RealmList<>(new byte[] {2}, new byte[] {3}));
                obj2.setColumnLongList(new RealmList<>(2L, 3L));
                obj2.setColumnDoubleList(new RealmList<>(2D, 3D));
                obj2.setColumnFloatList(new RealmList<>(2F, 3F));
                obj2.setColumnDateList(new RealmList<>(new Date(2L), new Date(3L)));
                realm.copyToRealmOrUpdate(obj2);
            }
        });

        assertEquals(1, realm.where(AllTypesPrimaryKey.class).count());
        AllTypesPrimaryKey obj = realm.where(AllTypesPrimaryKey.class).findFirst();

        // Checks that the the only element has all its properties updated.
        assertEquals("Bar", obj.getColumnString());
        assertEquals(1, obj.getColumnLong());
        assertEquals(2.23F, obj.getColumnFloat(), 0);
        assertEquals(2.234D, obj.getColumnDouble(), 0);
        assertEquals(true, obj.isColumnBoolean());
        assertArrayEquals(new byte[] {2, 3, 4}, obj.getColumnBinary());
        assertEquals(new Date(2000), obj.getColumnDate());
        assertEquals("Dog3", obj.getColumnRealmObject().getName());
        assertEquals(1, obj.getColumnRealmList().size());
        assertEquals("Dog4", obj.getColumnRealmList().get(0).getName());
        assertFalse(obj.getColumnBoxedBoolean());
        assertEquals(2, obj.getColumnStringList().size());
        assertEquals("2", obj.getColumnStringList().get(0));
        assertEquals("3", obj.getColumnStringList().get(1));
        assertEquals(2, obj.getColumnBooleanList().size());
        assertEquals(true, obj.getColumnBooleanList().get(0));
        assertEquals(false, obj.getColumnBooleanList().get(1));
        assertEquals(2, obj.getColumnBinaryList().size());
        assertArrayEquals(new byte[] {2}, obj.getColumnBinaryList().get(0));
        assertArrayEquals(new byte[] {3}, obj.getColumnBinaryList().get(1));
        assertEquals(2, obj.getColumnLongList().size());
        assertEquals((Long) 2L, obj.getColumnLongList().get(0));
        assertEquals((Long) 3L, obj.getColumnLongList().get(1));
        assertEquals(2, obj.getColumnDoubleList().size());
        assertEquals((Double) 2D, obj.getColumnDoubleList().get(0));
        assertEquals((Double) 3D, obj.getColumnDoubleList().get(1));
        assertEquals(2, obj.getColumnFloatList().size());
        assertEquals((Float) 2F, obj.getColumnFloatList().get(0));
        assertEquals((Float) 3F, obj.getColumnFloatList().get(1));
        assertEquals(2, obj.getColumnDateList().size());
        assertEquals(new Date(2L), obj.getColumnDateList().get(0));
        assertEquals(new Date(3L), obj.getColumnDateList().get(1));
    }

