    private void setRequired_onPrimaryKeyField(boolean isRequired) {
        for (PrimaryKeyFieldType fieldType : PrimaryKeyFieldType.values()) {
            String className = fieldType.getType().getSimpleName() + "Class";
            String fieldName = "primaryKey";
            schema = realmSchema.create(className);
            if (!fieldType.isNullable()) {
                continue;
            }
            if (isRequired) {
                schema.addField(fieldName, fieldType.getType(), FieldAttribute.PRIMARY_KEY);
            } else {
                schema.addField(fieldName, fieldType.getType(), FieldAttribute.PRIMARY_KEY, FieldAttribute.REQUIRED);
            }
            ((DynamicRealm)realm).createObject(schema.getClassName(), "1");
            ((DynamicRealm)realm).createObject(schema.getClassName(), "2");
            assertTrue(schema.hasPrimaryKey());
            if (fieldType.getType().isAssignableFrom(String.class)) {
                assertFalse(schema.hasIndex(fieldName));
            } else {
                assertTrue(schema.hasIndex(fieldName));
            }


            schema.setRequired(fieldName, isRequired);
            assertTrue(schema.hasPrimaryKey());
            if (fieldType.getType().isAssignableFrom(String.class)) {
                assertFalse(schema.hasIndex(fieldName));
            } else {
                assertTrue(schema.hasIndex(fieldName));
            }

            RealmResults<DynamicRealmObject> results = ((DynamicRealm)realm).where(className).sort(fieldName).findAll();
            assertEquals(2, results.size());
            if (fieldType == PrimaryKeyFieldType.STRING) {
                assertEquals("1", results.get(0).getString(fieldName));
                assertEquals("2", results.get(1).getString(fieldName));
            } else {
                assertEquals(1, results.get(0).getLong(fieldName));
                assertEquals(2, results.get(1).getLong(fieldName));
            }
            realmSchema.remove(className);
        }
    }

