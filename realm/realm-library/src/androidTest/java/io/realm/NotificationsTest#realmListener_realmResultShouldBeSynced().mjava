    @Test
    @RunTestInLooperThread
    public void realmListener_realmResultShouldBeSynced() {
        final AtomicInteger changeCounter = new AtomicInteger(0);
        final Realm realm = looperThread.realm;
        realm.executeTransaction(new Realm.Transaction() {
            @Override
            public void execute(Realm realm) {
                realm.createObject(AllTypes.class);
            }
        });
        final RealmResults<AllTypes> results = realm.where(AllTypes.class).findAll();
        assertEquals(1, results.size());

        realm.addChangeListener(new RealmChangeListener<Realm>() {
            @Override
            public void onChange(Realm element) {
                switch (changeCounter.getAndIncrement()) {
                    case 0:
                        // Change event triggered by populating
                        assertEquals(1, realm.where(AllTypes.class).count());
                        assertEquals(1, results.size());

                        realm.executeTransactionAsync(new Realm.Transaction() {
                            @Override
                            public void execute(Realm realm) {
                                AllTypes allTypes = realm.where(AllTypes.class).findFirst();
                                assertNotNull(allTypes);
                                allTypes.deleteFromRealm();
                                assertEquals(0, realm.where(AllTypes.class).count());
                            }
                        });
                        break;
                    case 1:
                        // Change event triggered by deletion in async transaction.
                        assertEquals(0, realm.where(AllTypes.class).count());
                        assertEquals(0, results.size());
                        realm.close();
                        looperThread.testComplete();
                        break;
                    default:
                        break;
                }
            }
        });
    }

