    @Test
    public void compactOnLaunch_multipleThread() throws IOException {
        final String REALM_NAME = "test.realm";
        final AtomicInteger compactOnLaunchCount = new AtomicInteger(0);

        final RealmConfiguration realmConfig = configFactory.createConfigurationBuilder()
                .name(REALM_NAME)
                .compactOnLaunch(new CompactOnLaunchCallback() {
                    @Override
                    public boolean shouldCompact(long totalBytes, long usedBytes) {
                        compactOnLaunchCount.incrementAndGet();
                        return true;
                    }
                })
                .build();
        Realm realm = Realm.getInstance(realmConfig);
        realm.close();
        // WARNING: We need to init the schema first and close the Realm to make sure the relevant logic works in Object
        // Store. See https://github.com/realm/realm-object-store/blob/master/src/shared_realm.cpp#L58
        // Called once.
        assertEquals(1, compactOnLaunchCount.get());

        realm = Realm.getInstance(realmConfig);
        // Called 2 more times. The PK table migration logic (the old PK bug) needs to open/close the Realm once.
        assertEquals(3, compactOnLaunchCount.get());

        Thread thread = new Thread(new Runnable() {
            @Override
            public void run() {
                Realm bgRealm = Realm.getInstance(realmConfig);
                bgRealm.close();
                // compactOnLaunch should not be called anymore!
                assertEquals(3, compactOnLaunchCount.get());
            }
        });
        thread.start();

        try {
            thread.join();
        } catch (InterruptedException e) {
            fail();
        }

        realm.close();

        assertEquals(3, compactOnLaunchCount.get());
    }

