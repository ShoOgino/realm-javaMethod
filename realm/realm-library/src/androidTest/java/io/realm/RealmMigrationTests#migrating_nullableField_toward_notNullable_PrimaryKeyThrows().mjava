    // Migrate a nullable field containing null value to non-nullable PrimaryKey field throws Realm version 0.89+
    @Test
    public void migrating_nullableField_toward_notNullable_PrimaryKeyThrows() throws IOException {
        configFactory.copyRealmFromAssets(context, "default-nullable-primarykey.realm", Realm.DEFAULT_REALM_NAME);
        final Class[] classes = {PrimaryKeyAsByte.class, PrimaryKeyAsShort.class, PrimaryKeyAsInteger.class, PrimaryKeyAsLong.class};
        for (final Class clazz : classes) {
            try {
                RealmConfiguration realmConfig = configFactory.createConfigurationBuilder()
                        .schemaVersion(0)
                        .schema(clazz)
                        .migration(new RealmMigration() {
                            @Override
                            public void migrate(DynamicRealm realm, long oldVersion, long newVersion) {
                                // intentionally left empty to demonstrate incompatibilities between nullable/not-nullable PrimaryKeys.
                            }
                        })
                        .build();
                Realm realm = Realm.getInstance(realmConfig);
                realm.close();
                fail();
            } catch (IllegalStateException expected) {
                assertEquals("Cannot migrate an object with null value in field 'id'. Either maintain the same type for primary key field 'id', or remove the object with null value before migration.",
                        expected.getMessage());
            }
        }
    }

