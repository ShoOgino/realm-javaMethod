    // ********************************************************************************* //
    // UC 1.
    // Callback should be invoked after a relevant commit (one that should impact the
    // query from which we obtained our RealmObject or RealmResults)
    // ********************************************************************************* //
    // UC 1 for Sync RealmObject
    public void test_callback_with_relevant_commit_realmobject_sync() {
        handler.post(new Runnable() {
            @Override
            public void run() {
                realm = Realm.getInstance(configuration);
                realm.addChangeListener(new RealmChangeListener() {
                    @Override
                    public void onChange() {
                        if (globalCommitInvocations.incrementAndGet() == 3) {
                            realm.handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    signalTestFinished.countDown();
                                }
                            });
                        }
                    }
                });

                realm.beginTransaction();
                Dog akamaru = realm.createObject(Dog.class);
                akamaru.setName("Akamaru");
                realm.commitTransaction();

                final Dog dog = realm.where(Dog.class).findFirst();
                dog.addChangeListener(new RealmChangeListener() {
                    @Override
                    public void onChange() {
                        assertEquals("Akamaru", dog.getName());
                        typebasedCommitInvocations.incrementAndGet();
                    }
                });

                // this commit should not trigger the type based callback
                // it will re-run the query in the background though
                realm.beginTransaction();
                realm.commitTransaction();

                realm.beginTransaction();
                akamaru.setAge(17);
                realm.commitTransaction();
            }
        });
        TestHelper.awaitOrFail(signalTestFinished);
        assertEquals(1, typebasedCommitInvocations.get());
    }

