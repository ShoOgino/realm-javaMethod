    // similar UC as #testFindAllAsync using 'findAllSorted'
    public void testFindAllSortedAsync() throws Throwable {
        final CountDownLatch signalCallbackFinished = new CountDownLatch(1);
        final CountDownLatch signalClosedRealm = new CountDownLatch(1);
        final Throwable[] threadAssertionError = new Throwable[1];
        final Looper[] backgroundLooper = new Looper[1];
        final RealmResults[] result = new RealmResults[1];
        final ExecutorService executorService = Executors.newSingleThreadExecutor();
        executorService.submit(new Runnable() {
            @Override
            public void run() {
                Looper.prepare();
                backgroundLooper[0] = Looper.myLooper();

                final boolean[] isFirstIdle = {true};
                Looper.myQueue().addIdleHandler(new MessageQueue.IdleHandler() {
                    @Override
                    public boolean queueIdle() {
                        if (isFirstIdle[0]) {
                            isFirstIdle[0] = false;
                            return true;

                        } else {
                            // Last message (i.e COMPLETED_ASYNC_REALM_RESULTS was processed)
                            try {
                                assertTrue(result[0].isLoaded());
                                assertEquals(5, result[0].size());
                                RealmResults<AllTypes> allTypes = (RealmResults<AllTypes>) result[0];
                                for (int i = 0; i < 5; i++) {
                                    int iteration = (4 - i);
                                    assertEquals("test data " + iteration, allTypes.get(4 - iteration).getColumnString());
                                }
                            } catch (AssertionFailedError e) {
                                threadAssertionError[0] = e;
                            } finally {
                                signalCallbackFinished.countDown();
                            }
                            return false; // unregister from the future IdleHandler events
                        }
                    }
                });

                Realm realm = null;
                try {
                    realm = openRealmInstance("testFindAllSortedAsync");
                    Realm.asyncQueryExecutor.pause();

                    populateTestRealm(realm, 10);
                    final RealmResults<AllTypes> realmResults = realm.where(AllTypes.class)
                            .between("columnLong", 0, 4)
                            .findAllSortedAsync("columnString", Sort.DESCENDING);

                    result[0] = realmResults;

                    assertFalse(realmResults.isLoaded());
                    assertEquals(0, realmResults.size());

                    Realm.asyncQueryExecutor.resume();

                    Looper.loop();

                } catch (Throwable e) {
                    e.printStackTrace();
                    threadAssertionError[0] = e;

                } finally {
                    if (signalCallbackFinished.getCount() > 0) {
                        signalCallbackFinished.countDown();
                    }
                    if (realm != null) {
                        realm.close();
                    }
                    signalClosedRealm.countDown();
                }
            }
        });

        TestHelper.exitOrThrow(executorService, signalCallbackFinished, signalClosedRealm, backgroundLooper, threadAssertionError);
    }

