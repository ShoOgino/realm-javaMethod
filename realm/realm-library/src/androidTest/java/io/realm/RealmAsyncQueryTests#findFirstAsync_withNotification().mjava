    // Finds elements [0-4] asynchronously then waits for the promise to be loaded
    // using a callback to be notified when the data is loaded.
    @Test
    @RunTestInLooperThread
    public void findFirstAsync_withNotification() throws Throwable {
        Realm realm = looperThread.realm;
        populateTestRealm(realm, 10);
        final AllTypes realmResults = realm.where(AllTypes.class)
                .between("columnLong", 4, 9)
                .findFirstAsync();

        looperThread.keepStrongReference.add(realmResults);
        realmResults.addChangeListener(new RealmChangeListener<AllTypes>() {
            @Override
            public void onChange(AllTypes object) {
                assertTrue(realmResults.isLoaded());
                assertTrue(realmResults.isValid());
                assertEquals("test data 4", realmResults.getColumnString());
                looperThread.testComplete();
            }
        });

        assertFalse(realmResults.isLoaded());
        assertFalse(realmResults.isValid());
        try {
            realmResults.setColumnString("should fail");
            fail("Accessing an unloaded object should throw");
        } catch (IllegalStateException ignored) {
        }
    }

