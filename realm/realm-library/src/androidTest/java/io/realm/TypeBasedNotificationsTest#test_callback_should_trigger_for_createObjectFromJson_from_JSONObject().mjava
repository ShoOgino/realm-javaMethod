    //UC 0 using Realm.copyToRealmOrUpdate
    public void test_callback_should_trigger_for_createObjectFromJson_from_JSONObject() {
        handler.post(new Runnable() {
            @Override
            public void run() {
                realm = Realm.getInstance(configuration);
                realm.addChangeListener(new RealmChangeListener() {
                    @Override
                    public void onChange() {
                        if (globalCommitInvocations.incrementAndGet() == 2) {
                            realm.handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    signalTestFinished.countDown();
                                }
                            });
                        }
                    }
                });

                try {
                    JSONObject json = new JSONObject();
                    json.put("columnString", "String");
                    json.put("columnLong", 1l);
                    json.put("columnFloat", 1.23f);
                    json.put("columnDouble", 1.23d);
                    json.put("columnBoolean", true);
                    json.put("columnBinary", new String(Base64.encode(new byte[]{1, 2, 3}, Base64.DEFAULT)));

                    realm.beginTransaction();
                    final AllTypes objectFromJson = realm.createObjectFromJson(AllTypes.class, json);
                    realm.commitTransaction();

                    objectFromJson.addChangeListener(new RealmChangeListener() {
                        @Override
                        public void onChange() {
                            assertEquals("ObjectFromJson", objectFromJson.getColumnString());
                            assertEquals(1l, objectFromJson.getColumnLong());
                            assertEquals(1.23f, objectFromJson.getColumnFloat());
                            assertEquals(1.23d, objectFromJson.getColumnDouble());
                            assertEquals(true, objectFromJson.isColumnBoolean());
                            assertArrayEquals(new byte[]{1, 2, 3}, objectFromJson.getColumnBinary());
                            typebasedCommitInvocations.incrementAndGet();
                        }
                    });

                    realm.beginTransaction();
                    objectFromJson.setColumnString("ObjectFromJson");
                    realm.commitTransaction();

                } catch (JSONException e) {
                    fail(e.getMessage());
                }
            }
        });

        TestHelper.awaitOrFail(signalTestFinished);
        assertEquals(1, typebasedCommitInvocations.get());
    }

