    @Test
    public void getNullableFields() {
        realm.executeTransaction(realm -> {
            NullablePrimitiveFields primitiveNullables = realm.createObject(NullablePrimitiveFields.class);
            primitiveNullables.setFieldBoolean(null);

            assertNull(primitiveNullables.getFieldBoolean());
            assertNull(primitiveNullables.getFieldInt());
            assertNull(primitiveNullables.getFieldFloat());
            assertNull(primitiveNullables.getFieldDouble());
            assertNull(primitiveNullables.getFieldString());
            assertNull(primitiveNullables.getFieldBinary());
            assertNull(primitiveNullables.getFieldDate());

            realm.delete(AllJavaTypes.class);
            AllJavaTypes allJavaTypes = realm.createObject(AllJavaTypes.class, UUID.randomUUID().getLeastSignificantBits());

            assertNull(allJavaTypes.getFieldObject());
            allJavaTypes.getFieldBooleanList().add(null);
            allJavaTypes.getFieldIntegerList().add(null);
            allJavaTypes.getFieldFloatList().add(null);
            allJavaTypes.getFieldDoubleList().add(null);
            allJavaTypes.getFieldStringList().add(null);
            allJavaTypes.getFieldBinaryList().add(null);
            allJavaTypes.getFieldDateList().add(null);
        });
        realm.close();
        dynamicRealm.refresh();

        DynamicRealmObject primitiveNullables = dynamicRealm.where(NullablePrimitiveFields.CLASS_NAME).findFirst();
        DynamicRealmObject allJavaTypes = dynamicRealm.where(AllJavaTypes.CLASS_NAME).findFirst();

        for (RealmFieldType value : RealmFieldType.values()) {
            switch (value) {
                case INTEGER:
                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_INT));
                    break;
                case BOOLEAN:
                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_BOOLEAN));
                    break;
                case STRING:
                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_STRING));
                    break;
                case BINARY:
                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_BINARY));
                    break;
                case DATE:
                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_DATE));
                    break;
                case FLOAT:
                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_FLOAT));
                    break;
                case DOUBLE:
                    assertNull(primitiveNullables.get(NullablePrimitiveFields.FIELD_DOUBLE));
                    break;
                case OBJECT:
                    assertNull(allJavaTypes.get(AllJavaTypes.FIELD_OBJECT));
                    break;
                case INTEGER_LIST:
                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_INTEGER_LIST, Integer.class).get(0));
                    break;
                case BOOLEAN_LIST:
                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_BOOLEAN_LIST, Boolean.class).get(0));
                    break;
                case STRING_LIST:
                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_STRING_LIST, String.class).get(0));
                    break;
                case BINARY_LIST:
                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_BINARY_LIST, byte[].class).get(0));
                    break;
                case DATE_LIST:
                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_DATE_LIST, Date.class).get(0));
                    break;
                case FLOAT_LIST:
                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_FLOAT_LIST, Float.class).get(0));
                    break;
                case DOUBLE_LIST:
                    assertNull(allJavaTypes.getList(AllJavaTypes.FIELD_DOUBLE_LIST, Double.class).get(0));
                    break;
                case LIST:
                case LINKING_OBJECTS:
                    // Realm lists and back links cannot be null
                    break;
                default:
                    fail("Not testing all types");
            }
        }
        dynamicRealm.close();
    }

