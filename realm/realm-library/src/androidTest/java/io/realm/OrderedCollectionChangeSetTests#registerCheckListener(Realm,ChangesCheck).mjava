    private void registerCheckListener(Realm realm, final ChangesCheck changesCheck) {
        switch (type) {
            case REALM_RESULTS:
                RealmResults<Dog> results = realm.where(Dog.class).findAllSorted(Dog.FIELD_AGE);
                looperThread.keepStrongReference(results);
                results.addChangeListener(new OrderedRealmCollectionChangeListener<RealmResults<Dog>>() {
                    @Override
                    public void onChange(RealmResults<Dog> collection, OrderedCollectionChangeSet changeSet) {
                        changesCheck.check(changeSet);
                    }
                });
                break;
            case REALM_LIST:
                RealmList<Dog> list = realm.where(Owner.class).findFirst().getDogs();
                looperThread.keepStrongReference(list);
                list.addChangeListener(new OrderedRealmCollectionChangeListener<RealmList<Dog>>() {
                    @Override
                    public void onChange(RealmList<Dog> collection, OrderedCollectionChangeSet changeSet) {
                        changesCheck.check(changeSet);
                    }
                });
                break;
        }
    }

