    // Helper function to create all columns except the given excluding field for NullTypes.
    // The schema version will be set to 0.
    public static void initNullTypesTableExcludes(DynamicRealm realm, String excludingField) {
        realm.beginTransaction();

        RealmObjectSchema nullTypesSchema = realm.getSchema().create(NullTypes.CLASS_NAME);
        if (!excludingField.equals(NullTypes.FIELD_ID)) {
            nullTypesSchema.addField(NullTypes.FIELD_ID, int.class, FieldAttribute.PRIMARY_KEY);
        }
        if (!excludingField.equals(NullTypes.FIELD_STRING_NOT_NULL)) {
            nullTypesSchema.addField(NullTypes.FIELD_STRING_NOT_NULL, String.class, FieldAttribute.REQUIRED);
        }
        if (!excludingField.equals(NullTypes.FIELD_STRING_NULL)) {
            nullTypesSchema.addField(NullTypes.FIELD_STRING_NULL, String.class);
        }
        if (!excludingField.equals(NullTypes.FIELD_BYTES_NOT_NULL)) {
            nullTypesSchema.addField(NullTypes.FIELD_BYTES_NOT_NULL, byte[].class, FieldAttribute.REQUIRED);
        }
        if (!excludingField.equals(NullTypes.FIELD_BYTES_NULL)) {
            nullTypesSchema.addField(NullTypes.FIELD_BYTES_NULL, byte[].class);
        }
        if (!excludingField.equals(NullTypes.FIELD_BOOLEAN_NOT_NULL)) {
            nullTypesSchema.addField(NullTypes.FIELD_BOOLEAN_NOT_NULL, boolean.class);
        }
        if (!excludingField.equals(NullTypes.FIELD_BOOLEAN_NULL)) {
            nullTypesSchema.addField(NullTypes.FIELD_BOOLEAN_NULL, Boolean.class);
        }
        if (!excludingField.equals(NullTypes.FIELD_BYTE_NOT_NULL)) {
            nullTypesSchema.addField(NullTypes.FIELD_BYTE_NOT_NULL, byte.class);
        }
        if (!excludingField.equals(NullTypes.FIELD_BYTE_NULL)) {
            nullTypesSchema.addField(NullTypes.FIELD_BYTE_NULL, Byte.class);
        }
        if (!excludingField.equals(NullTypes.FIELD_SHORT_NOT_NULL)) {
            nullTypesSchema.addField(NullTypes.FIELD_SHORT_NOT_NULL, short.class);
        }
        if (!excludingField.equals(NullTypes.FIELD_SHORT_NULL)) {
            nullTypesSchema.addField(NullTypes.FIELD_SHORT_NULL, Short.class);
        }
        if (!excludingField.equals(NullTypes.FIELD_INTEGER_NOT_NULL)) {
            nullTypesSchema.addField(NullTypes.FIELD_INTEGER_NOT_NULL, int.class);
        }
        if (!excludingField.equals(NullTypes.FIELD_INTEGER_NULL)) {
            nullTypesSchema.addField(NullTypes.FIELD_INTEGER_NULL, Integer.class);
        }
        if (!excludingField.equals(NullTypes.FIELD_LONG_NOT_NULL)) {
            nullTypesSchema.addField(NullTypes.FIELD_LONG_NOT_NULL, long.class);
        }
        if (!excludingField.equals(NullTypes.FIELD_LONG_NULL)) {
            nullTypesSchema.addField(NullTypes.FIELD_LONG_NULL, Long.class);
        }
        if (!excludingField.equals(NullTypes.FIELD_FLOAT_NOT_NULL)) {
            nullTypesSchema.addField(NullTypes.FIELD_FLOAT_NOT_NULL, float.class);
        }
        if (!excludingField.equals(NullTypes.FIELD_FLOAT_NULL)) {
            nullTypesSchema.addField(NullTypes.FIELD_FLOAT_NULL, Float.class);
        }
        if (!excludingField.equals(NullTypes.FIELD_DOUBLE_NOT_NULL)) {
            nullTypesSchema.addField(NullTypes.FIELD_DOUBLE_NOT_NULL, double.class);
        }
        if (!excludingField.equals(NullTypes.FIELD_DOUBLE_NULL)) {
            nullTypesSchema.addField(NullTypes.FIELD_DOUBLE_NULL, Double.class);
        }
        if (!excludingField.equals(NullTypes.FIELD_DATE_NOT_NULL)) {
            nullTypesSchema.addField(NullTypes.FIELD_DATE_NOT_NULL, Date.class, FieldAttribute.REQUIRED);
        }
        if (!excludingField.equals(NullTypes.FIELD_DATE_NULL)) {
            nullTypesSchema.addField(NullTypes.FIELD_DATE_NULL, Date.class);
        }
        if (!excludingField.equals(NullTypes.FIELD_OBJECT_NULL)) {
            nullTypesSchema.addRealmObjectField(NullTypes.FIELD_OBJECT_NULL, nullTypesSchema);
        }

        nullTypesSchema.addRealmListField(NullTypes.FIELD_LIST_NULL, nullTypesSchema);

        realm.setVersion(0);
        realm.commitTransaction();
    }

