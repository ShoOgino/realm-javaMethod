    // If a required field was nullable before, a RealmMigrationNeededException should be thrown.
    @Test
    public void notSettingRequiredForNotNullableThrows() {
        String[] notNullableFields = {NullTypes.FIELD_STRING_NOT_NULL, NullTypes.FIELD_BYTES_NOT_NULL,
                NullTypes.FIELD_BOOLEAN_NOT_NULL, NullTypes.FIELD_BYTE_NOT_NULL, NullTypes.FIELD_SHORT_NOT_NULL,
                NullTypes.FIELD_INTEGER_NOT_NULL, NullTypes.FIELD_LONG_NOT_NULL, NullTypes.FIELD_FLOAT_NOT_NULL,
                NullTypes.FIELD_DOUBLE_NOT_NULL, NullTypes.FIELD_DATE_NOT_NULL};
        for (final String field : notNullableFields) {
            final RealmMigration migration = new RealmMigration() {
                @Override
                public void migrate(DynamicRealm realm, long oldVersion, long newVersion) {
                    if (oldVersion == 0) { // 0 after initNullTypesTableExcludes
                        // No @Required for not nullable field
                        RealmObjectSchema nullTypesSchema = realm.getSchema().get(NullTypes.CLASS_NAME);
                        if (field.equals(NullTypes.FIELD_STRING_NOT_NULL)) {
                            // 1 String
                            nullTypesSchema.addField(field, String.class);
                        } else if (field.equals(NullTypes.FIELD_BYTES_NOT_NULL)) {
                            // 2 Bytes
                            nullTypesSchema.addField(field, byte[].class);
                        } else if (field.equals(NullTypes.FIELD_BOOLEAN_NOT_NULL)) {
                            // 3 Boolean
                            nullTypesSchema.addField(field, Boolean.class);
                            //table.addColumn(RealmFieldType.BOOLEAN, field, Table.NULLABLE);
                        } else if (field.equals(NullTypes.FIELD_BYTE_NOT_NULL) ||
                                field.equals(NullTypes.FIELD_SHORT_NOT_NULL) ||
                                field.equals(NullTypes.FIELD_INTEGER_NOT_NULL) ||
                                field.equals(NullTypes.FIELD_LONG_NOT_NULL)) {
                            // 4 Byte 5 Short 6 Integer 7 Long
                            nullTypesSchema.addField(field, Integer.class);
                        } else if (field.equals(NullTypes.FIELD_FLOAT_NOT_NULL)) {
                            // 8 Float
                            nullTypesSchema.addField(field, Float.class);
                        } else if (field.equals(NullTypes.FIELD_DOUBLE_NOT_NULL)) {
                            // 9 Double
                            nullTypesSchema.addField(field, Double.class);
                        } else if (field.equals(NullTypes.FIELD_DATE_NOT_NULL)) {
                            // 10 Date
                            nullTypesSchema.addField(field, Date.class);
                        }
                        // 11 Object skipped
                    }
                }
            };

            @SuppressWarnings("unchecked")
            RealmConfiguration realmConfig = configFactory.createConfigurationBuilder()
                    .schemaVersion(1)
                    .schema(NullTypes.class)
                    .migration(migration)
                    .build();
            Realm.deleteRealm(realmConfig);
            // Prepares the version 0 db.
            DynamicRealm dynamicRealm = DynamicRealm.getInstance(realmConfig);
            TestHelper.initNullTypesTableExcludes(dynamicRealm, field);
            dynamicRealm.close();

            try {
                realm = Realm.getInstance(realmConfig);
                fail("Failed on " + field);
            } catch (RealmMigrationNeededException e) {
                assertThat(e.getMessage(), CoreMatchers.containsString(
                        String.format(Locale.US, "Property 'NullTypes.%s' has been made required", field)));
            }
        }
    }

