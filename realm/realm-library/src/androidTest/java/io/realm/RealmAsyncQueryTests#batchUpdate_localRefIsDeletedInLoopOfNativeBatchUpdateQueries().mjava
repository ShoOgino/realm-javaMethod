    // This test reproduce the issue in https://secure.helpscout.net/conversation/244053233/6163/?folderId=366141
    // First it creates 512 async queries, then trigger a transaction to make the queries gets update with
    // nativeBatchUpdateQueries. It should not exceed the limits of local ref map size in JNI.
    // NOTE: This test is not checking the same thing after the OS results integration. Just keep it for an additional
    // test for async.
    @Test
    @RunTestInLooperThread
    public void batchUpdate_localRefIsDeletedInLoopOfNativeBatchUpdateQueries() {
        final Realm realm = looperThread.realm;
        // For Android, the size of local ref map is 512. Use 1024 for more pressure.
        final int TEST_COUNT = 1024;
        final AtomicBoolean updatesTriggered = new AtomicBoolean(false);
        // The first time onChange gets called for every results.
        final AtomicInteger firstOnChangeCounter = new AtomicInteger(0);
        // The second time onChange gets called for every results which is triggered by the transaction.
        final AtomicInteger secondOnChangeCounter = new AtomicInteger(0);

        final RealmChangeListener<RealmResults<AllTypes>> listener = new RealmChangeListener<RealmResults<AllTypes>>() {
            @Override
            public void onChange(RealmResults<AllTypes> element) {
                if (updatesTriggered.get())  {
                    // Step 4: Test finished after all results's onChange gets called the 2nd time.
                    int count  = secondOnChangeCounter.addAndGet(1);
                    if (count == TEST_COUNT) {
                        realm.removeAllChangeListeners();
                        looperThread.testComplete();
                    }
                } else {
                    int count  = firstOnChangeCounter.addAndGet(1);
                    if (count == TEST_COUNT) {
                        // Step 3: Commit the transaction to trigger queries updates.
                        updatesTriggered.set(true);
                        realm.executeTransactionAsync(new Realm.Transaction() {
                            @Override
                            public void execute(Realm realm) {
                                realm.createObject(AllTypes.class);
                            }
                        });
                    } else {
                        // Step 2: Create 2nd - TEST_COUNT queries.
                        RealmResults<AllTypes> results = realm.where(AllTypes.class).findAllAsync();
                        results.addChangeListener(this);
                        looperThread.keepStrongReference.add(results);
                    }
                }
            }
        };
        // Step 1. Create first async to kick the test start.
        RealmResults<AllTypes> results = realm.where(AllTypes.class).findAllAsync();
        results.addChangeListener(listener);
        looperThread.keepStrongReference.add(results);
    }

