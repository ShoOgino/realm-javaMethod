    // UC 2 Async RealmObject.
    @Test
    @RunTestInLooperThread
    public void multiple_callbacks_should_be_invoked_realmobject_async() {
        final int NUMBER_OF_LISTENERS = 7;
        final Realm realm = looperThread.realm;

        realm.beginTransaction();
        Dog akamaru = realm.createObject(Dog.class);
        realm.commitTransaction();

        Dog dog = realm.where(Dog.class).findFirstAsync();
        assertTrue(dog.load());
        looperThread.keepStrongReference.add(dog);
        for (int i = 0; i < NUMBER_OF_LISTENERS; i++) {
            dog.addChangeListener(new RealmChangeListener<Dog>() {
                @Override
                public void onChange(Dog object) {
                    typebasedCommitInvocations.incrementAndGet();
                    if (typebasedCommitInvocations.get() > NUMBER_OF_LISTENERS) {
                        fail();
                    } else if (typebasedCommitInvocations.get() == NUMBER_OF_LISTENERS) {
                        // Delayed post in case the listener gets triggered more time than expected.
                        looperThread.postRunnableDelayed(new Runnable() {
                            @Override
                            public void run() {
                                looperThread.testComplete();
                            }
                        }, 500);
                    }
                }
            });
        }

        realm.beginTransaction();
        akamaru.setAge(17);
        realm.commitTransaction();
    }

