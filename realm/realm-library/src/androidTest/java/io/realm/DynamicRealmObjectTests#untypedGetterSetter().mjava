    @Test
    public void untypedGetterSetter() {
        realm.beginTransaction();
        AllJavaTypes obj = realm.createObject(AllJavaTypes.class, 0);
        DynamicRealmObject dObj = new DynamicRealmObject(obj);
        try {
            for (SupportedType type : SupportedType.values()) {
                switch (type) {
                    case BOOLEAN:
                        dObj.set(AllJavaTypes.FIELD_BOOLEAN, true);
                        assertTrue((Boolean) dObj.get(AllJavaTypes.FIELD_BOOLEAN));
                        break;
                    case SHORT:
                        dObj.set(AllJavaTypes.FIELD_SHORT, (short) 42);
                        assertEquals(Long.parseLong("42"), dObj.<Long> get(AllJavaTypes.FIELD_SHORT).longValue());
                        break;
                    case INT:
                        dObj.set(AllJavaTypes.FIELD_INT, 42);
                        assertEquals(Long.parseLong("42"), dObj.<Long> get(AllJavaTypes.FIELD_INT).longValue());
                        break;
                    case LONG:
                        dObj.set(AllJavaTypes.FIELD_LONG, 42L);
                        assertEquals(Long.parseLong("42"), dObj.<Long> get(AllJavaTypes.FIELD_LONG).longValue());
                        break;
                    case BYTE:
                        dObj.set(AllJavaTypes.FIELD_BYTE, (byte) 4);
                        assertEquals(Long.parseLong("4"), dObj.<Long> get(AllJavaTypes.FIELD_BYTE).longValue());
                        break;
                    case FLOAT:
                        dObj.set(AllJavaTypes.FIELD_FLOAT, 1.23f);
                        assertEquals(Float.parseFloat("1.23"), dObj.<Float> get(AllJavaTypes.FIELD_FLOAT), Float.MIN_NORMAL);
                        break;
                    case DOUBLE:
                        dObj.set(AllJavaTypes.FIELD_DOUBLE, 1.234d);
                        assertEquals(Double.parseDouble("1.234"), dObj.<Double>get(AllJavaTypes.FIELD_DOUBLE), Double.MIN_NORMAL);
                        break;
                    case STRING:
                        dObj.set(AllJavaTypes.FIELD_STRING, "str");
                        assertEquals("str", dObj.get(AllJavaTypes.FIELD_STRING));
                        break;
                    case BINARY:
                        dObj.set(AllJavaTypes.FIELD_BINARY, new byte[]{1, 2, 3});
                        assertArrayEquals(new byte[]{1, 2, 3}, (byte[]) dObj.get(AllJavaTypes.FIELD_BINARY));
                        break;
                    case DATE:
                        dObj.set(AllJavaTypes.FIELD_DATE, new Date(1000));
                        assertEquals(new Date(1000), dObj.get(AllJavaTypes.FIELD_DATE));
                        break;
                    case DECIMAL128:
                        dObj.set(AllJavaTypes.FIELD_DECIMAL128, new Decimal128(BigDecimal.ONE));
                        assertEquals(new Decimal128(BigDecimal.ONE), dObj.get(AllJavaTypes.FIELD_DECIMAL128));
                        break;
                    case OBJECT_ID:
                        dObj.set(AllJavaTypes.FIELD_OBJECT_ID, new ObjectId(TestHelper.generateObjectIdHexString(7)));
                        assertEquals(new ObjectId(TestHelper.generateObjectIdHexString(7)), dObj.get(AllJavaTypes.FIELD_OBJECT_ID));
                        break;
                    case OBJECT:
                        dObj.set(AllJavaTypes.FIELD_OBJECT, dObj);
                        assertEquals(dObj, dObj.get(AllJavaTypes.FIELD_OBJECT));
                        break;
                    case LIST: {
                        RealmList<DynamicRealmObject> newList = new RealmList<DynamicRealmObject>();
                        newList.add(dObj);
                        dObj.set(AllJavaTypes.FIELD_LIST, newList);
                        RealmList<DynamicRealmObject> list = dObj.getList(AllJavaTypes.FIELD_LIST);
                        assertEquals(1, list.size());
                        assertEquals(dObj, list.get(0));
                        break;
                    }
                    case LIST_INTEGER: {
                        RealmList<Integer> newList = new RealmList<>(null, 1);
                        dObj.set(AllJavaTypes.FIELD_INTEGER_LIST, newList);
                        RealmList<Integer> list = dObj.getList(AllJavaTypes.FIELD_INTEGER_LIST, Integer.class);
                        assertEquals(2, list.size());
                        assertArrayEquals(newList.toArray(), list.toArray());
                        break;
                    }
                    case LIST_STRING: {
                        RealmList<String> newList = new RealmList<>(null, "Foo");
                        dObj.set(AllJavaTypes.FIELD_STRING_LIST, newList);
                        RealmList<String> list = dObj.getList(AllJavaTypes.FIELD_STRING_LIST, String.class);
                        assertEquals(2, list.size());
                        assertArrayEquals(newList.toArray(), list.toArray());
                        break;
                    }
                    case LIST_BOOLEAN: {
                        RealmList<Boolean> newList = new RealmList<>(null, true);
                        dObj.set(AllJavaTypes.FIELD_BOOLEAN_LIST, newList);
                        RealmList<Boolean> list = dObj.getList(AllJavaTypes.FIELD_BOOLEAN_LIST, Boolean.class);
                        assertEquals(2, list.size());
                        assertArrayEquals(newList.toArray(), list.toArray());
                        break;
                    }
                    case LIST_FLOAT: {
                        RealmList<Float> newList = new RealmList<>(null, 1.23F);
                        dObj.set(AllJavaTypes.FIELD_FLOAT_LIST, newList);
                        RealmList<Float> list = dObj.getList(AllJavaTypes.FIELD_FLOAT_LIST, Float.class);
                        assertEquals(2, list.size());
                        assertArrayEquals(newList.toArray(), list.toArray());
                        break;
                    }
                    case LIST_DOUBLE: {
                        RealmList<Double> newList = new RealmList<>(null, 1.24D);
                        dObj.set(AllJavaTypes.FIELD_DOUBLE_LIST, newList);
                        RealmList<Double> list = dObj.getList(AllJavaTypes.FIELD_DOUBLE_LIST, Double.class);
                        assertEquals(2, list.size());
                        assertArrayEquals(newList.toArray(), list.toArray());
                        break;
                    }
                    case LIST_BINARY: {
                        RealmList<byte[]> newList = new RealmList<>(null, new byte[] {1, 2, 3});
                        dObj.set(AllJavaTypes.FIELD_BINARY_LIST, newList);
                        RealmList<byte[]> list = dObj.getList(AllJavaTypes.FIELD_BINARY_LIST, byte[].class);
                        assertEquals(2, list.size());
                        assertArrayEquals(newList.toArray(), list.toArray());
                        break;
                    }
                    case LIST_DATE: {
                        RealmList<Date> newList = new RealmList<>(null, new Date(1000));
                        dObj.set(AllJavaTypes.FIELD_DATE_LIST, newList);
                        RealmList<Date> list = dObj.getList(AllJavaTypes.FIELD_DATE_LIST, Date.class);
                        assertEquals(2, list.size());
                        assertArrayEquals(newList.toArray(), list.toArray());
                        break;
                    }
                    case LIST_DECIMAL128: {
                        RealmList<Decimal128> newList = new RealmList<>(null, new Decimal128(BigDecimal.ONE));
                        dObj.set(AllJavaTypes.FIELD_DECIMAL128_LIST, newList);
                        RealmList<Decimal128> list = dObj.getList(AllJavaTypes.FIELD_DECIMAL128_LIST, Decimal128.class);
                        assertEquals(2, list.size());
                        assertArrayEquals(newList.toArray(), list.toArray());
                        break;
                    }
                    case LIST_OBJECT_ID: {
                        RealmList<ObjectId> newList = new RealmList<>(null, new ObjectId(TestHelper.generateObjectIdHexString(0)));
                        dObj.set(AllJavaTypes.FIELD_OBJECT_ID_LIST, newList);
                        RealmList<ObjectId> list = dObj.getList(AllJavaTypes.FIELD_OBJECT_ID_LIST, ObjectId.class);
                        assertEquals(2, list.size());
                        assertArrayEquals(newList.toArray(), list.toArray());
                        break;
                    }
                    default:
                        fail();
                }
            }
        } finally {
            realm.cancelTransaction();
        }
    }

