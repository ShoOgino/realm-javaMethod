    // UC:
    //   1- insert 10 objects
    //   2- start an async query to find object [0-4]
    //   3- assert current RealmResults is empty (Worker Thread didn't complete)
    //   4- when the worker thread complete, advance the Realm
    //   5- the caller thread is ahead of the result provided by the worker thread
    //   6- retry automatically the async query
    //   7- the returned RealmResults is now in the same version as the caller thread
    //   8- the notification should be called once (when we retry automatically we shouldn't
    //      notify the user).
    @Test
    public void findAllAsync_retry() throws Throwable {
        final CountDownLatch signalCallbackFinished = new CountDownLatch(1);
        final CountDownLatch signalClosedRealm = new CountDownLatch(1);
        final Throwable[] threadAssertionError = new Throwable[1];
        final Looper[] backgroundLooper = new Looper[1];
        final ExecutorService executorService = Executors.newSingleThreadExecutor();
        executorService.submit(new Runnable() {
            @Override
            public void run() {
                Looper.prepare();
                backgroundLooper[0] = Looper.myLooper();
                final Realm[] realm = new Realm[1];
                try {
                    final AtomicInteger numberOfIntercept = new AtomicInteger(1);
                    realm[0] = openRealmInstance("testFindAllAsyncRetry");
                    final Handler handler = new HandlerProxy(realm[0].handler) {
                        @Override
                        public boolean onInterceptMessage(int what) {
                            switch (what) {
                                case HandlerController.COMPLETED_ASYNC_REALM_RESULTS: {
                                    if (numberOfIntercept.getAndDecrement() > 0) {
                                        // We advance the Realm so we can simulate a retry
                                        // This is intercepted on the worker thread, we need to use
                                        // the Realm on the original thread
                                        postAtFront(new Runnable() {
                                            @Override
                                            public void run() {
                                                realm[0].beginTransaction();
                                                realm[0].clear(AllTypes.class);
                                                realm[0].commitTransaction();
                                            }
                                        });
                                    }
                                    break;
                                }
                            }
                            return false;
                        }
                    };
                    realm[0].setHandler(handler);

                    Realm.asyncQueryExecutor.pause();

                    populateTestRealm(realm[0], 10);
                    final RealmResults<AllTypes> realmResults = realm[0].where(AllTypes.class)
                            .between("columnLong", 0, 4)
                            .findAllAsync();

                    assertFalse(realmResults.isLoaded());
                    assertEquals(0, realmResults.size());

                    Realm.asyncQueryExecutor.resume();

                    final AtomicInteger numberOfInvocation = new AtomicInteger(0);
                    realmResults.addChangeListener(new RealmChangeListener() {
                        @Override
                        public void onChange() {
                            try {
                                assertEquals(1, numberOfInvocation.incrementAndGet());
                                assertTrue(realmResults.isLoaded());
                                assertEquals(0, realmResults.size());
                            } catch (AssertionFailedError e) {
                                threadAssertionError[0] = e;
                            } finally {
                                signalCallbackFinished.countDown();
                            }
                        }
                    });

                    Looper.loop();

                } catch (Throwable e) {
                    e.printStackTrace();
                    threadAssertionError[0] = e;

                } finally {
                    if (signalCallbackFinished.getCount() > 0) {
                        signalCallbackFinished.countDown();
                    }
                    if (realm[0] != null) {
                        realm[0].close();
                    }
                    signalClosedRealm.countDown();
                }
            }
        });

        TestHelper.exitOrThrow(executorService, signalCallbackFinished, signalClosedRealm, backgroundLooper, threadAssertionError);
    }

