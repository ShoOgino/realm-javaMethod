    // Tests that an async transaction that throws when call cancelTransaction manually.
    @Test
    @RunTestInLooperThread
    public void executeTransactionAsync_cancelTransactionInside() throws Throwable {
        final TestHelper.TestLogger testLogger = new TestHelper.TestLogger(LogLevel.DEBUG);
        RealmLog.add(testLogger);

        final Realm realm = looperThread.getRealm();

        assertEquals(0, realm.where(Owner.class).count());

        realm.executeTransactionAsync(new Realm.Transaction() {
            @Override
            public void execute(Realm realm) {
                Owner owner = realm.createObject(Owner.class);
                owner.setName("Owner");
                realm.cancelTransaction();
            }
        }, new Realm.Transaction.OnSuccess() {
            @Override
            public void onSuccess() {
                fail("Should not reach success if runtime exception is thrown in callback.");
            }
        }, new Realm.Transaction.OnError() {
            @Override
            public void onError(Throwable error) {
                // Ensure we are giving developers quality messages in the logs.
                assertTrue(testLogger.message.contains(
                        "Exception has been thrown: Can't commit a non-existing write transaction"));
                assertTrue(error instanceof IllegalStateException);
                RealmLog.remove(testLogger);
                looperThread.testComplete();
            }
        });
    }

