    // Test if waitForChange still blocks if stopWaitForChange has been called for a realm in a different thread.
    @Test
    public void waitForChange_blockSpecificThreadOnly() throws InterruptedException {
        final CountDownLatch bgRealmsOpened = new CountDownLatch(2);
        final CountDownLatch bgRealmsClosed = new CountDownLatch(2);
        final AtomicBoolean bgRealmFirstWaitResult = new AtomicBoolean(true);
        final AtomicBoolean bgRealmSecondWaitResult = new AtomicBoolean(false);
        final AtomicLong bgRealmWaitForChangeResult = new AtomicLong(0);
        final AtomicReference<Realm> bgRealm = new AtomicReference<Realm>();

        // wait in background
        Thread thread1 = new Thread(new Runnable() {
            @Override
            public void run() {
                Realm realm = Realm.getInstance(realmConfig);
                bgRealm.set(realm);
                bgRealmsOpened.countDown();
                bgRealmFirstWaitResult.set(realm.waitForChange());
                realm.close();
                bgRealmsClosed.countDown();
            }
        });

        Thread thread2 = new Thread(new Runnable() {
            @Override
            public void run() {
                Realm realm = Realm.getInstance(realmConfig);
                bgRealmsOpened.countDown();
                bgRealmSecondWaitResult.set(realm.waitForChange());
                bgRealmWaitForChangeResult.set(realm.where(AllTypes.class).count());
                realm.close();
                bgRealmsClosed.countDown();
            }
        });
        thread1.start();
        thread2.start();

        TestHelper.awaitOrFail(bgRealmsOpened);
        bgRealm.get().stopWaitForChange();
        // wait for Thread 2 to wait
        Thread.sleep(500);
        populateTestRealm();
        TestHelper.awaitOrFail(bgRealmsClosed);
        assertFalse(bgRealmFirstWaitResult.get());
        assertTrue(bgRealmSecondWaitResult.get());
        assertEquals(TEST_DATA_SIZE, bgRealmWaitForChangeResult.get());
    }

