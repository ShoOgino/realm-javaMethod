    private Pair<AllJavaTypes, OrderedRealmCollection<AllJavaTypes>> createCollectionWithMultipleCopies(Realm realm, CollectionClass collectionClass) {

        OrderedRealmCollection<AllJavaTypes>  orderedCollection;
        AllJavaTypes obj;
        switch (collectionClass) {
            case REALMRESULTS_SNAPSHOT_LIST_BASE:
            case MANAGED_REALMLIST:
                obj = realm.where(AllJavaTypes.class)
                        .equalTo(AllJavaTypes.FIELD_LONG, 1)
                        .findFirst();
                RealmList<AllJavaTypes> list = obj.getFieldList();
                realm.beginTransaction();
                list.add(obj);
                realm.commitTransaction();
                orderedCollection = list;
                break;

            case UNMANAGED_REALMLIST:
                obj = new AllJavaTypes(1);
                return new Pair<AllJavaTypes, OrderedRealmCollection<AllJavaTypes>>(obj, new RealmList<AllJavaTypes>(obj, obj));

            case REALMRESULTS_SNAPSHOT_RESULTS_BASE:
            case REALMRESULTS:
                RealmResults<AllJavaTypes> result = realm.where(AllJavaTypes.class).equalTo(AllJavaTypes.FIELD_LONG, 1).findAll();
                obj = result.first();
                orderedCollection = result;
                break;

            default:
                throw new AssertionError("Unsupported class: " + collectionClass);
        }

        if (isSnapshot(collectionClass)) {
            orderedCollection = orderedCollection.createSnapshot();
        }

        return new Pair<AllJavaTypes, OrderedRealmCollection<AllJavaTypes>>(obj, orderedCollection);
    }

