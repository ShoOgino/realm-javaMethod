    private OrderedRealmCollection<Dog> createNonCyclicCollection(Realm realm, ManagedCollection collectionClass) {
        realm.beginTransaction();
        realm.deleteAll();
        OrderedRealmCollection<Dog> orderedCollection;
        switch (collectionClass) {
            case REALMRESULTS_SNAPSHOT_RESULTS_BASE:
            case MANAGED_REALMLIST:
                Owner owner = realm.createObject(Owner.class);
                RealmList<Dog> dogs = owner.getDogs();
                for (int i = 0; i < TEST_SIZE; i++) {
                    Dog dog = realm.createObject(Dog.class);
                    dog.setName("Dog " + i);
                    dog.setAge(i);
                    dogs.add(dog);
                }
                realm.commitTransaction();
                orderedCollection = dogs;
                break;

            case REALMRESULTS_SNAPSHOT_LIST_BASE:
            case REALMRESULTS:
                for (int i = 0; i < TEST_SIZE; i++) {
                    Dog dog = realm.createObject(Dog.class);
                    dog.setAge(i);
                    dog.setName("Dog " + i);
                }
                realm.commitTransaction();
                orderedCollection = realm.where(Dog.class).sort(Dog.FIELD_AGE).findAll();
                break;

            default:
                throw new AssertionError("Unknown collection class: " + collectionClass);
        }
        if (isSnapshot(collectionClass)) {
            orderedCollection = orderedCollection.createSnapshot();
        }
        return orderedCollection;
    }

