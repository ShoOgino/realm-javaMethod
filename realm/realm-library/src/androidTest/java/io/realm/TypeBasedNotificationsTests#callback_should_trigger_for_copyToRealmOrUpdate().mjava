    //UC 0 using Realm.copyToRealmOrUpdate
    @Test
    @RunTestInLooperThread
    public void callback_should_trigger_for_copyToRealmOrUpdate() {
        final Realm realm = looperThread.realm;
        realm.addChangeListener(new RealmChangeListener<Realm>() {
            @Override
            public void onChange(Realm object) {
                if (globalCommitInvocations.incrementAndGet() == 1) {
                    realm.handler.post(new Runnable() {
                        @Override
                        public void run() {
                            assertEquals(1, typebasedCommitInvocations.get());
                            looperThread.testComplete();
                        }
                    });
                }
            }
        });

        PrimaryKeyAsLong obj = new PrimaryKeyAsLong();
        obj.setId(1);
        obj.setName("Foo");

        realm.beginTransaction();
        final PrimaryKeyAsLong primaryKeyAsLong = realm.copyToRealmOrUpdate(obj);
        realm.commitTransaction();

        looperThread.keepStrongReference.add(primaryKeyAsLong);
        primaryKeyAsLong.addChangeListener(new RealmChangeListener<PrimaryKeyAsLong>() {
            @Override
            public void onChange(PrimaryKeyAsLong object) {
                assertEquals(1, primaryKeyAsLong.getId());
                assertEquals("Bar", primaryKeyAsLong.getName());
                assertEquals(1, realm.where(PrimaryKeyAsLong.class).count());
                typebasedCommitInvocations.incrementAndGet();
            }
        });

        PrimaryKeyAsLong obj2 = new PrimaryKeyAsLong();
        obj2.setId(1);
        obj2.setName("Bar");
        realm.beginTransaction();
        PrimaryKeyAsLong primaryKeyAsLong2 = realm.copyToRealmOrUpdate(obj2);
        realm.commitTransaction();

        assertEquals(primaryKeyAsLong, primaryKeyAsLong2);
    }

