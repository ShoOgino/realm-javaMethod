    public void testRealmQueryObservable() {
        final AtomicBoolean subscribedNotified = new AtomicBoolean(false);
        realm.beginTransaction();
        realm.createObject(AllTypes.class);
        realm.commitTransaction();

        Subscription subscription = realm.where(AllTypes.class).asObservable()
                .map(new Func1<RealmQuery<AllTypes>, List<AllTypes>>() {
                    @Override
                    public List<AllTypes> call(RealmQuery<AllTypes> query) {
                        return query.findAll();
                    }
                })
                .subscribeOn(Schedulers.computation())
                .subscribe(new Action1<List<AllTypes>>() {
                    @Override
                    public void call(List<AllTypes> allTypes) {
                        assertEquals(1, allTypes.size());
                        subscribedNotified.set(true);
                    }
                });
        subscription.unsubscribe();
        assertTrue(subscribedNotified.get());
    }

