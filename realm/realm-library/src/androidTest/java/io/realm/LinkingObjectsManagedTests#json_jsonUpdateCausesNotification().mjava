    // A JSON update should generate a notifcation
    @Test
    @RunTestInLooperThread
    public void json_jsonUpdateCausesNotification() {
        final Realm looperThreadRealm = looperThread.realm;

        looperThreadRealm.beginTransaction();
        AllJavaTypes child = looperThreadRealm.createObject(AllJavaTypes.class, 1);
        AllJavaTypes parent = looperThreadRealm.createObject(AllJavaTypes.class, 2);
        parent.setFieldObject(child);
        looperThreadRealm.commitTransaction();

        RealmResults<AllJavaTypes> results = looperThreadRealm.where(AllJavaTypes.class).equalTo("fieldId", 1).findAll();
        assertNotNull(results);
        assertEquals(results.size(), 1);
        child = results.first();

        RealmResults<AllJavaTypes> parents = child.getObjectParents();
        assertNotNull(parents);
        assertEquals(1, parents.size());

        final AtomicInteger counter = new AtomicInteger(0);
        RealmChangeListener<AllJavaTypes> listener = new RealmChangeListener<AllJavaTypes>() {
            @Override
            public void onChange(AllJavaTypes object) {
                counter.incrementAndGet();
            }
        };
        child.addChangeListener(listener);

        looperThreadRealm.beginTransaction();
        try {
            looperThreadRealm.createOrUpdateAllFromJson(AllJavaTypes.class, "[{ \"fieldId\" : 2, \"fieldObject\" : null }]");
        } catch (RealmException e) {
            fail("Failed loading JSON" + e);
        }
        looperThreadRealm.commitTransaction();

        verifyPostConditions(
            looperThreadRealm,
            new PostConditions() {
                @Override
                public void run(Realm realm) {
                    RealmResults<AllJavaTypes> results = looperThreadRealm.where(AllJavaTypes.class).equalTo("fieldId", 1).findAll();
                    assertNotNull(results);
                    assertEquals(results.size(), 1);
                    AllJavaTypes child = results.first();

                    RealmResults<AllJavaTypes> parents = child.getObjectParents();
                    assertNotNull(parents);
                    assertEquals(0, parents.size());
                    assertEquals(1, counter.get());
                }
            },
            child, parent);
    }

