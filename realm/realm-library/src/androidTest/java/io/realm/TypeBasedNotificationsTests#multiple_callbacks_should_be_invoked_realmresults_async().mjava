    // UC 2 Async RealmResults.
    @Test
    @RunTestInLooperThread
    public void multiple_callbacks_should_be_invoked_realmresults_async() {
        final int NUMBER_OF_LISTENERS = 7;
        final Realm realm = looperThread.getRealm();

        realm.beginTransaction();
        Dog akamaru = realm.createObject(Dog.class);
        realm.commitTransaction();

        realm.addChangeListener(new RealmChangeListener<Realm>() {
            @Override
            public void onChange(Realm object) {
                looperThread.postRunnableDelayed(new Runnable() {
                    @Override
                    public void run() {
                        assertEquals(NUMBER_OF_LISTENERS, typebasedCommitInvocations.get());
                        looperThread.testComplete();
                    }
                }, 100L /* wait for listeners in RealmResults. Next run loop is not enough. */);
            }
        });

        RealmResults<Dog> dogs = realm.where(Dog.class).findAllAsync();
        assertTrue(dogs.load());

        looperThread.keepStrongReference(dogs);
        for (int i = 0; i < NUMBER_OF_LISTENERS; i++) {
            dogs.addChangeListener(new RealmChangeListener<RealmResults<Dog>>() {
                @Override
                public void onChange(RealmResults<Dog> object) {
                    typebasedCommitInvocations.incrementAndGet();
                }
            });
        }

        realm.beginTransaction();
        akamaru.setAge(17);
        realm.commitTransaction();
    }

