    @Test
    @RunTestInLooperThread
    public void addRemoveListenerConcurrency() {
        final Realm realm = looperThread.getRealm();
        final AtomicInteger counter1 = new AtomicInteger(0);
        final AtomicInteger counter2 = new AtomicInteger(0);
        final AtomicInteger counter3 = new AtomicInteger(0);

        // At least we need 2 listeners existing in the list to make sure
        // the iterator.next get called.

        // This one will be added when listener2's onChange called.
        final RealmChangeListener<Realm> listener1 = new RealmChangeListener<Realm>() {
            @Override
            public void onChange(Realm object) {
                // Step 7: Last listener called. Should only be called once.
                counter1.incrementAndGet();

                // after listener2.onChange
                // Since duplicated entries will be ignored, we still have:
                // [listener2, listener1].
                assertEquals(1, counter1.get());
                assertEquals(2, counter2.get());
                assertEquals(1, counter3.get());
                looperThread.testComplete();
            }
        };

        // This one will be existing in the list all the time.
        final RealmChangeListener<Realm> listener2 = new RealmChangeListener<Realm>() {
            @Override
            public void onChange(Realm object) {
                // Step 3: Listener2 called
                // Listener state [listener2, listener3, listener1].
                // Listener 1 will not be called this time around.
                counter2.incrementAndGet();
                realm.addChangeListener(listener1);
            }
        };

        // This one will be removed after first transaction
        RealmChangeListener<Realm> listener3 = new RealmChangeListener<Realm>() {
            @Override
            public void onChange(Realm object) {
                // Step 4: Listener3 called
                // Listener state [listener2, listener1].
                counter3.incrementAndGet();
                realm.removeChangeListener(this);

                // Step 5: Asserts proper state
                // [listener2, listener1].
                assertEquals(0, counter1.get());
                assertEquals(1, counter2.get());
                assertEquals(1, counter3.get());

                // Step 6: Triggers next round of changes on [listener2, listener1].
                realm.beginTransaction();
                realm.createObject(AllTypes.class);
                realm.commitTransaction();
            }
        };

        // Step 1: Adds initial listeners
        // Listener state [listener2, listener3].
        realm.addChangeListener(listener2);
        realm.addChangeListener(listener3);

        // Step 2: Triggers change listeners.
        realm.beginTransaction();
        realm.createObject(AllTypes.class);
        realm.commitTransaction();
    }

