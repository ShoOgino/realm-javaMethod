    public void testBatchUpdateDifferentTypeOfQueries() {io.realm.internal.Util.setDebugLevel(5);
        final RealmResults[] keepStrongReference = new RealmResults[4];
        final CountDownLatch signalTestFinished = new CountDownLatch(1);

        HandlerThread handlerThread = new HandlerThread("LooperThread");
        handlerThread.start();
        final Handler handler = new Handler(handlerThread.getLooper());
        handler.post(new Runnable() {
            @Override
            public void run() {
                final Realm realm = openRealmInstance("testBatchUpdateDifferentTypeOfQueries");

                realm.beginTransaction();
                for (int i = 0; i < 5; ) {
                    AllTypes allTypes = realm.createObject(AllTypes.class);
                    allTypes.setColumnLong(i);
                    allTypes.setColumnString("data " + i % 3);

                    allTypes = realm.createObject(AllTypes.class);
                    allTypes.setColumnLong(i);
                    allTypes.setColumnString("data " + (++i % 3));
                }
                final long numberOfBlocks = 25;
                final long numberOfObjects = 10; // must be greater than 1
                realm.commitTransaction();
                populateForDistinct(realm, numberOfBlocks, numberOfObjects, false);

                RealmResults<AllTypes> findAllAsync = realm.where(AllTypes.class).findAllAsync();
                RealmResults<AllTypes> findAllSorted = realm.where(AllTypes.class).findAllSortedAsync("columnString", Sort.ASCENDING);
                RealmResults<AllTypes> findAllSortedMulti = realm.where(AllTypes.class).findAllSortedAsync(new String[]{"columnString", "columnLong"},
                        new Sort[]{Sort.ASCENDING, Sort.DESCENDING});
                RealmResults<AnnotationIndexTypes> findDistinct = realm.distinctAsync(AnnotationIndexTypes.class, "indexString");

                keepStrongReference[0] = findAllAsync;
                keepStrongReference[1] = findAllSorted;
                keepStrongReference[2] = findAllSortedMulti;
                keepStrongReference[3] = findDistinct;

                final CountDownLatch queriesCompleted = new CountDownLatch(4);
                final AtomicInteger batchUpdateCompleted = new AtomicInteger(0);
                final AtomicInteger findAllAsyncInvocation = new AtomicInteger(0);
                final AtomicInteger findAllSortedInvocation = new AtomicInteger(0);
                final AtomicInteger findAllSortedMultiInvocation = new AtomicInteger(0);
                final AtomicInteger findDistinctInvocation = new AtomicInteger(0);

                findAllAsync.addChangeListener(new RealmChangeListener() {
                    @Override
                    public void onChange() {
                        switch (findAllAsyncInvocation.incrementAndGet()) {
                            case 1: {
                                queriesCompleted.countDown();
                                break;
                            }
                            case 2: {
                                if (batchUpdateCompleted.incrementAndGet() == 4) {
                                    handler.post(new Runnable() {
                                        @Override
                                        public void run() {
                                            realm.close();
                                            signalTestFinished.countDown();
                                        }
                                    });
                                }
                                break;
                            }
                        }
                    }
                });

                findAllSorted.addChangeListener(new RealmChangeListener() {
                    @Override
                    public void onChange() {
                        switch (findAllSortedInvocation.incrementAndGet()) {
                            case 1: {
                                queriesCompleted.countDown();
                                break;
                            }
                            case 2: {
                                if (batchUpdateCompleted.incrementAndGet() == 4) {
                                    handler.post(new Runnable() {
                                        @Override
                                        public void run() {
                                            realm.close();
                                            signalTestFinished.countDown();
                                        }
                                    });
                                }
                                break;
                            }
                        }
                    }
                });

                findAllSortedMulti.addChangeListener(new RealmChangeListener() {
                    @Override
                    public void onChange() {
                        switch (findAllSortedMultiInvocation.incrementAndGet()) {
                            case 1: {
                                queriesCompleted.countDown();
                                break;
                            }
                            case 2: {
                                if (batchUpdateCompleted.incrementAndGet() == 4) {
                                    handler.post(new Runnable() {
                                        @Override
                                        public void run() {
                                            realm.close();
                                            signalTestFinished.countDown();
                                        }
                                    });
                                }
                                break;
                            }
                        }
                    }
                });

                findDistinct.addChangeListener(new RealmChangeListener() {
                    @Override
                    public void onChange() {
                        switch (findDistinctInvocation.incrementAndGet()) {
                            case 1: {
                                queriesCompleted.countDown();
                                break;
                            }
                            case 2: {
                                if (batchUpdateCompleted.incrementAndGet() == 4) {
                                    handler.post(new Runnable() {
                                        @Override
                                        public void run() {
                                            realm.close();
                                            signalTestFinished.countDown();
                                        }
                                    });
                                }
                                break;
                            }
                        }
                    }
                });

                // wait for the queries to completes then send a commit from
                // another thread to trigger a batch update of the 4 queries
                new Thread() {
                    @Override
                    public void run() {
                        try {
                            queriesCompleted.await();
                            Realm bgRealm = Realm.getInstance(realm.getConfiguration());

                            bgRealm.beginTransaction();
                            bgRealm.createObject(AllTypes.class);
                            bgRealm.createObject(AnnotationIndexTypes.class);
                            bgRealm.commitTransaction();

                            bgRealm.close();
                        } catch (InterruptedException e) {
                            fail(e.getMessage());
                        }
                    }
                }.start();
            }
        });

        try {
            TestHelper.awaitOrFail(signalTestFinished);
        } finally {
            handlerThread.quit();
        }
    }

