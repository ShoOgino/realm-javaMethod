    @Test
    @RunTestInLooperThread
    public void testBatchUpdateDifferentTypeOfQueries() {
        workerThread.realm.beginTransaction();
        for (int i = 0; i < 5; ) {
            AllTypes allTypes = workerThread.realm.createObject(AllTypes.class);
            allTypes.setColumnLong(i);
            allTypes.setColumnString("data " + i % 3);

            allTypes = workerThread.realm.createObject(AllTypes.class);
            allTypes.setColumnLong(i);
            allTypes.setColumnString("data " + (++i % 3));
        }
        final long numberOfBlocks = 25;
        final long numberOfObjects = 10; // must be greater than 1
        workerThread.realm.commitTransaction();
        populateForDistinct(workerThread.realm, numberOfBlocks, numberOfObjects, false);

        RealmResults<AllTypes> findAllAsync = workerThread.realm.where(AllTypes.class).findAllAsync();
        RealmResults<AllTypes> findAllSorted = workerThread.realm.where(AllTypes.class).findAllSortedAsync("columnString", Sort.ASCENDING);
        RealmResults<AllTypes> findAllSortedMulti = workerThread.realm.where(AllTypes.class).findAllSortedAsync(new String[]{"columnString", "columnLong"},
                new Sort[]{Sort.ASCENDING, Sort.DESCENDING});
        RealmResults<AnnotationIndexTypes> findDistinct = workerThread.realm.distinctAsync(AnnotationIndexTypes.class, "indexString");

        workerThread.keepStrongReference.add(findAllAsync);
        workerThread.keepStrongReference.add(findAllSorted);
        workerThread.keepStrongReference.add(findAllSortedMulti);
        workerThread.keepStrongReference.add(findDistinct);

        final CountDownLatch queriesCompleted = new CountDownLatch(4);
        final AtomicInteger batchUpdateCompleted = new AtomicInteger(0);
        final AtomicInteger findAllAsyncInvocation = new AtomicInteger(0);
        final AtomicInteger findAllSortedInvocation = new AtomicInteger(0);
        final AtomicInteger findAllSortedMultiInvocation = new AtomicInteger(0);
        final AtomicInteger findDistinctInvocation = new AtomicInteger(0);

        findAllAsync.addChangeListener(new RealmChangeListener() {
            @Override
            public void onChange() {
                switch (findAllAsyncInvocation.incrementAndGet()) {
                    case 1: {
                        queriesCompleted.countDown();
                        break;
                    }
                    case 2: {
                        if (batchUpdateCompleted.incrementAndGet() == 4) {
                            workerThread.signalTestCompleted.countDown();
                        }
                        break;
                    }
                }
            }
        });

        findAllSorted.addChangeListener(new RealmChangeListener() {
            @Override
            public void onChange() {
                switch (findAllSortedInvocation.incrementAndGet()) {
                    case 1: {
                        queriesCompleted.countDown();
                        break;
                    }
                    case 2: {
                        if (batchUpdateCompleted.incrementAndGet() == 4) {
                            workerThread.signalTestCompleted.countDown();
                        }
                        break;
                    }
                }
            }
        });

        findAllSortedMulti.addChangeListener(new RealmChangeListener() {
            @Override
            public void onChange() {
                switch (findAllSortedMultiInvocation.incrementAndGet()) {
                    case 1: {
                        queriesCompleted.countDown();
                        break;
                    }
                    case 2: {
                        if (batchUpdateCompleted.incrementAndGet() == 4) {
                            workerThread.signalTestCompleted.countDown();
                        }
                        break;
                    }
                }
            }
        });

        findDistinct.addChangeListener(new RealmChangeListener() {
            @Override
            public void onChange() {
                switch (findDistinctInvocation.incrementAndGet()) {
                    case 1: {
                        queriesCompleted.countDown();
                        break;
                    }
                    case 2: {
                        if (batchUpdateCompleted.incrementAndGet() == 4) {
                            workerThread.signalTestCompleted.countDown();
                        }
                        break;
                    }
                }
            }
        });

        // wait for the queries to completes then send a commit from
        // another thread to trigger a batch update of the 4 queries
        new Thread() {
            @Override
            public void run() {
                try {
                    queriesCompleted.await();
                    Realm bgRealm = Realm.getInstance(workerThread.realm.getConfiguration());

                    bgRealm.beginTransaction();
                    bgRealm.createObject(AllTypes.class);
                    bgRealm.createObject(AnnotationIndexTypes.class);
                    bgRealm.commitTransaction();

                    bgRealm.close();
                } catch (InterruptedException e) {
                    fail(e.getMessage());
                }
            }
        }.start();
    }

