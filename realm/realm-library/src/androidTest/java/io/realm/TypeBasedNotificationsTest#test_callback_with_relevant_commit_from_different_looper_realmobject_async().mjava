    // UC 1 Async RealmObject
    public void test_callback_with_relevant_commit_from_different_looper_realmobject_async() {
        final HandlerThread looperThread1 = new HandlerThread("looperThread1");
        final HandlerThread looperThread2 = new HandlerThread("looperThread2");
        final HandlerThread looperThread3 = new HandlerThread("looperThread3");
        looperThread1.start();
        looperThread2.start();
        looperThread3.start();
        final Dog[] dogs = new Dog[1];
        handler.post(new Runnable() {
            @Override
            public void run() {
                realm = Realm.getInstance(configuration);
                realm.addChangeListener(new RealmChangeListener() {
                    @Override
                    public void onChange() {
                        globalCommitInvocations.incrementAndGet();
                    }
                });

                final Dog dog = realm.where(Dog.class).findFirstAsync();
                dogs[0] = dog;
                assertTrue(dog.load());
                dog.addChangeListener(new RealmChangeListener() {
                    @Override
                    public void onChange() {
                        switch (typebasedCommitInvocations.incrementAndGet()) {
                            case 1: {
                                assertEquals("Akamaru", dog.getName());
                                realm.handler.post(new Runnable() {
                                    @Override
                                    public void run() {
                                        // trigger second callback invocation
                                        new Handler(looperThread3.getLooper()).post(new Runnable() {
                                            @Override
                                            public void run() {
                                                Realm realmLooperThread3 = Realm.getInstance(realm.getConfiguration());
                                                realmLooperThread3.beginTransaction();
                                                realmLooperThread3.where(Dog.class).findFirst().setAge(17);
                                                realmLooperThread3.commitTransaction();
                                                realmLooperThread3.close();
                                            }
                                        });
                                    }
                                });
                                break;
                            }
                            case 2: {
                                assertEquals("Akamaru", dog.getName());
                                assertEquals(17, dog.getAge());
                                // posting as an event will give the handler a chance
                                // to deliver the notification for globalCommitInvocations
                                // otherwise, test will exit before the callback get a chance to be invoked
                                realm.handler.post(new Runnable() {
                                    @Override
                                    public void run() {
                                        signalTestFinished.countDown();
                                    }
                                });
                                break;
                            }
                        }
                    }
                });

                new Handler(looperThread1.getLooper()).post(new Runnable() {
                    @Override
                    public void run() {
                        Realm realmLooperThread1 = Realm.getInstance(realm.getConfiguration());
                        realmLooperThread1.beginTransaction();
                        realmLooperThread1.commitTransaction();
                        realmLooperThread1.close();
                    }
                });

                new Handler(looperThread2.getLooper()).post(new Runnable() {
                    @Override
                    public void run() {
                        Realm realmLooperThread2 = Realm.getInstance(realm.getConfiguration());
                        // trigger first callback invocation
                        realmLooperThread2.beginTransaction();
                        Dog dog = realmLooperThread2.createObject(Dog.class);
                        dog.setName("Akamaru");
                        realmLooperThread2.commitTransaction();
                        realmLooperThread2.close();
                    }
                });
            }
        });
        try {
            TestHelper.awaitOrFail(signalTestFinished);
            assertEquals(3, globalCommitInvocations.get());
            assertEquals(2, typebasedCommitInvocations.get());
        } finally {
            looperThread1.quit();
            looperThread2.quit();
            looperThread3.quit();
        }
    }

