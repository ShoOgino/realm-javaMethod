    // Verify that the logic for waiting for the users file dir to be come available isn't totally broken
    // This is pretty hard to test, so forced to break encapsulation in this case.
    @Test
    public void init_waitForFilesDir() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException, IOException {
        java.lang.reflect.Method m = Realm.class.getDeclaredMethod("checkFilesDirAvailable", Context.class);
        m.setAccessible(true);

        // A) Check it fails if getFilesDir is never created
        Context mockContext = mock(Context.class);
        when(mockContext.getFilesDir()).thenReturn(null);

        try {
            m.invoke(null, mockContext);
            fail();
        } catch (InvocationTargetException e) {
            assertEquals(IllegalStateException.class, e.getCause().getClass());
        }

        // B) Check we return if the filesDir becomes available after a while
        mockContext = mock(Context.class);
        when(mockContext.getFilesDir()).then(new Answer<File>() {
            int calls = 0;
            File userFolder = tmpFolder.newFolder();
            @Override
            public File answer(InvocationOnMock invocationOnMock) throws Throwable {
                calls++;
                return (calls > 5) ? userFolder : null; // Start returning the correct folder after 5 attempts
            }
        });

        assertNull(m.invoke(null, mockContext));
    }

