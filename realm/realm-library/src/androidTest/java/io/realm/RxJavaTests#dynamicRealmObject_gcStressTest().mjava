    // Tests that Observables keep strong references to their parent, so they are not accidentally GC'ed while
    // waiting for results from the async API's.
    @Test
    @RunTestInLooperThread
    @SuppressWarnings("CheckReturnValue")
    public void dynamicRealmObject_gcStressTest() {
        final int TEST_SIZE = 50;
        final AtomicLong innerCounter = new AtomicLong();
        final DynamicRealm dynamicRealm = DynamicRealm.getInstance(looperThread.getConfiguration());

        dynamicRealm.beginTransaction();
        for (int i = 0; i < TEST_SIZE; i++) {
            dynamicRealm.createObject(AllTypes.CLASS_NAME).set(AllTypes.FIELD_LONG, i);
        }
        dynamicRealm.commitTransaction();

        for (int i = 0; i < TEST_SIZE; i++) {
            // Doesn't keep a reference to the Observable.
            dynamicRealm.where(AllTypes.CLASS_NAME).equalTo(AllTypes.FIELD_LONG, i).findFirstAsync().<DynamicRealmObject>asFlowable()
                    .filter(obj -> obj.isLoaded())
                    .take(1) // Unsubscribes from Realm.
                    .subscribe(dynamicRealmObject -> {
                        // Not guaranteed, but can result in the GC of other RealmResults waiting for a result.
                        Runtime.getRuntime().gc();
                        if (innerCounter.incrementAndGet() == TEST_SIZE) {
                            disposeSuccessfulTest(dynamicRealm);
                        }
                    }, throwable -> fail(throwable.toString()));
        }
    }

