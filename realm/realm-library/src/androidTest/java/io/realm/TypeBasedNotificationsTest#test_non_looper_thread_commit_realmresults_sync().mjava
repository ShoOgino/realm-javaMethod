    // UC 3 Sync RealmResults
    public void test_non_looper_thread_commit_realmresults_sync() {
        handler.post(new Runnable() {
            @Override
            public void run() {
                realm = Realm.getInstance(configuration);
                realm.addChangeListener(new RealmChangeListener() {
                    @Override
                    public void onChange() {
                        if (globalCommitInvocations.incrementAndGet() == 2) {
                            realm.handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    signalTestFinished.countDown();
                                }
                            });
                        }
                    }
                });

                realm.beginTransaction();
                realm.createObject(Dog.class);
                realm.commitTransaction();

                final RealmResults<Dog> dogs = realm.where(Dog.class).findAll();
                dogs.addChangeListener(new RealmChangeListener() {
                    @Override
                    public void onChange() {
                        typebasedCommitInvocations.incrementAndGet();
                        assertEquals(2, dogs.size());
                    }
                });

                Thread thread = new Thread() {
                    @Override
                    public void run() {
                        Realm bgRealm = Realm.getInstance(realm.getConfiguration());
                        bgRealm.beginTransaction();
                        bgRealm.createObject(Dog.class);
                        bgRealm.commitTransaction();
                        bgRealm.close();
                    }
                };
                thread.start();
                try {
                    thread.join();

                    final int MAX_RETRIES = 60;
                    int numberOfSleep = 0;
                    while (numberOfSleep++ < MAX_RETRIES
                            && typebasedCommitInvocations.incrementAndGet() != 1) {
                        Thread.sleep(16);
                    }
                    assertEquals(1, typebasedCommitInvocations.get());
                } catch (InterruptedException e) {
                    fail(e.getMessage());
                }
            }
        });
        TestHelper.awaitOrFail(signalTestFinished);
    }

