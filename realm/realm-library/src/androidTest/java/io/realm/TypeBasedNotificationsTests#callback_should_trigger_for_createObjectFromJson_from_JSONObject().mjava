    //UC 0 using Realm.copyToRealmOrUpdate
    @Test
    @RunTestInLooperThread
    public void callback_should_trigger_for_createObjectFromJson_from_JSONObject() {
        final Realm realm = looperThread.realm;
        realm.addChangeListener(new RealmChangeListener<Realm>() {
            @Override
            public void onChange(Realm object) {
                if (globalCommitInvocations.incrementAndGet() == 1) {
                    realm.handler.post(new Runnable() {
                        @Override
                        public void run() {
                            assertEquals(1, typebasedCommitInvocations.get());
                            looperThread.testComplete();
                        }
                    });
                }
            }
        });

        try {
            JSONObject json = new JSONObject();
            json.put("columnString", "String");
            json.put("columnLong", 1L);
            json.put("columnFloat", 1.23f);
            json.put("columnDouble", 1.23d);
            json.put("columnBoolean", true);
            json.put("columnBinary", new String(Base64.encode(new byte[]{1, 2, 3}, Base64.DEFAULT)));

            realm.beginTransaction();
            final AllTypes objectFromJson = realm.createObjectFromJson(AllTypes.class, json);
            realm.commitTransaction();

            looperThread.keepStrongReference.add(objectFromJson);
            objectFromJson.addChangeListener(new RealmChangeListener<AllTypes>() {
                @Override
                public void onChange(AllTypes object) {
                    assertEquals("ObjectFromJson", objectFromJson.getColumnString());
                    assertEquals(1L, objectFromJson.getColumnLong());
                    assertEquals(1.23F, objectFromJson.getColumnFloat(), 0F);
                    assertEquals(1.23D, objectFromJson.getColumnDouble(), 0D);
                    assertEquals(true, objectFromJson.isColumnBoolean());
                    assertArrayEquals(new byte[]{1, 2, 3}, objectFromJson.getColumnBinary());
                    typebasedCommitInvocations.incrementAndGet();
                }
            });

            realm.beginTransaction();
            objectFromJson.setColumnString("ObjectFromJson");
            realm.commitTransaction();

        } catch (JSONException e) {
            fail(e.getMessage());
        }
    }

