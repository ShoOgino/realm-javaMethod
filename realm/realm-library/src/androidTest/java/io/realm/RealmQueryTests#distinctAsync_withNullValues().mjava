    @Test
    public void distinctAsync_withNullValues () throws Throwable {
        final CountDownLatch signalCallbackFinished = new CountDownLatch(2);
        final CountDownLatch signalClosedRealm = new CountDownLatch(1);
        final Throwable[] threadAssertionError = new Throwable[1];
        final Looper[] backgroundLooper = new Looper[1];
        final ExecutorService executorService = Executors.newSingleThreadExecutor();
        executorService.submit(new Runnable() {
            @Override
            public void run() {
                Looper.prepare();
                backgroundLooper[0] = Looper.myLooper();

                Realm asyncRealm = null;
                try {
                    Realm.asyncQueryExecutor.pause();
                    asyncRealm = openRealmInstance("testDistinctAsyncQueryWithNull");
                    final long numberOfBlocks = 25;
                    final long numberOfObjects = 10; // must be greater than 1
                    populateForDistinct(asyncRealm, numberOfBlocks, numberOfObjects, true);

                    final RealmResults<AnnotationIndexTypes> distinctDate = asyncRealm.where(AnnotationIndexTypes.class).distinctAsync(AnnotationIndexTypes.FIELD_INDEX_DATE);
                    final RealmResults<AnnotationIndexTypes> distinctString = asyncRealm.where(AnnotationIndexTypes.class).distinctAsync(AnnotationIndexTypes.FIELD_INDEX_STRING);

                    assertFalse(distinctDate.isLoaded());
                    assertTrue(distinctDate.isValid());
                    assertTrue(distinctDate.isEmpty());

                    assertFalse(distinctString.isLoaded());
                    assertTrue(distinctString.isValid());
                    assertTrue(distinctString.isEmpty());

                    Realm.asyncQueryExecutor.resume();

                    distinctDate.addChangeListener(new RealmChangeListener() {
                        @Override
                        public void onChange() {
                            assertEquals(1, distinctDate.size());
                            signalCallbackFinished.countDown();
                        }
                    });

                    distinctString.addChangeListener(new RealmChangeListener() {
                        @Override
                        public void onChange() {
                            assertEquals(1, distinctString.size());
                            signalCallbackFinished.countDown();
                        }
                    });

                    Looper.loop();
                } catch (Throwable e) {
                    e.printStackTrace();
                    threadAssertionError[0] = e;

                } finally {
                    if (signalCallbackFinished.getCount() > 0) {
                        signalCallbackFinished.countDown();
                    }
                    if (asyncRealm != null) {
                        asyncRealm.close();
                    }
                    signalClosedRealm.countDown();
                }
            }
        });

        TestHelper.exitOrThrow(executorService, signalCallbackFinished, signalClosedRealm, backgroundLooper, threadAssertionError);
    }

