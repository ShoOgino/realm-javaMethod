    // finding element [0-4] asynchronously then wait for the promise to be loaded.
    // no use of notification callback
    @Test
    public void findAllAsync() throws Throwable {
        final CountDownLatch signalCallbackFinished = new CountDownLatch(1);
        final CountDownLatch signalClosedRealm = new CountDownLatch(1);
        final Throwable[] threadAssertionError = new Throwable[1];
        final RealmResults[] results = new RealmResults[1];
        final Looper[] backgroundLooper = new Looper[1];
        final ExecutorService executorService = Executors.newSingleThreadExecutor();
        executorService.submit(new Runnable() {
            @Override
            public void run() {
                Looper.prepare();
                backgroundLooper[0] = Looper.myLooper();

                // register IdleHandler to quit the Looper once all messages have proceeded
                // Let the first queueIdle invocation pass, because it occurs before the first message is received.
                // WARNING: when debugging the 'queueIdle' will be called more often (because of the break points)
                //          making the countdown latch to be invoked earlier.
                final boolean[] isFirstIdle = {true};
                Looper.myQueue().addIdleHandler(new MessageQueue.IdleHandler() {
                    @Override
                    public boolean queueIdle() {
                        if (isFirstIdle[0]) {
                            isFirstIdle[0] = false;
                            return true;

                        } else {
                            // Last message (i.e COMPLETED_ASYNC_REALM_RESULTS was processed)
                            try {
                                assertTrue(results[0].isLoaded());
                                assertEquals(5, results[0].size());
                                assertTrue(results[0].get(0).isValid());
                            } catch (AssertionFailedError e) {
                                threadAssertionError[0] = e;
                            } finally {
                                signalCallbackFinished.countDown();
                            }
                            return false; // unregister from the future IdleHandler events
                        }
                    }
                });
                Realm realm = null;
                try {
                    realm = openRealmInstance("testFindAllAsync");
                    Realm.asyncQueryExecutor.pause();

                    populateTestRealm(realm, 10);
                    final RealmResults<AllTypes> realmResults = realm.where(AllTypes.class)
                            .between("columnLong", 0, 4)
                            .findAllAsync();
                    results[0] = realmResults;
                    assertFalse(realmResults.isLoaded());
                    assertEquals(0, realmResults.size());

                    Realm.asyncQueryExecutor.resume();

                    Looper.loop();

                } catch (Throwable e) {
                    e.printStackTrace();
                    threadAssertionError[0] = e;

                } finally {
                    if (signalCallbackFinished.getCount() > 0) {
                        signalCallbackFinished.countDown();
                    }
                    if (realm != null) {
                        realm.close();
                    }
                    signalClosedRealm.countDown();
                }
            }
        });

        TestHelper.exitOrThrow(executorService, signalCallbackFinished, signalClosedRealm, backgroundLooper, threadAssertionError);
    }

