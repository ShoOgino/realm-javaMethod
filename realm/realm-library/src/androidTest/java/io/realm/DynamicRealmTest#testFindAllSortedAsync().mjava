    public void testFindAllSortedAsync() {
        final RealmResults[] keepStrongReferences = new RealmResults[1];
        final CountDownLatch signalTestFinished = new CountDownLatch(1);

        final HandlerThread handlerThread = new HandlerThread("LooperThread");
        handlerThread.start();
        Handler handler = new Handler(handlerThread.getLooper());

        handler.post(new Runnable() {
            @Override
            public void run() {
                final DynamicRealm realm = DynamicRealm.getInstance(defaultConfig);
                populateTestRealm(realm, 10);

                final RealmResults<DynamicRealmObject> allTypes = realm.where(AllTypes.CLASS_NAME)
                        .between("columnLong", 0, 4)
                        .findAllSortedAsync("columnString", Sort.DESCENDING);

                keepStrongReferences[0] = allTypes;
                assertTrue(allTypes.load());
                assertEquals(5, allTypes.size());

                allTypes.addChangeListener(new RealmChangeListener() {
                    @Override
                    public void onChange() {
                        assertEquals(5, allTypes.size());
                        for (int i = 0; i < 5; i++) {
                            int iteration = (4 - i);
                            assertEquals("test data " + iteration, allTypes.get(4 - iteration).getString(AllTypes.FIELD_STRING));
                        }
                        realm.close();
                        signalTestFinished.countDown();
                    }
                });

                realm.handler.post(new Runnable() {
                    @Override
                    public void run() {
                        new Thread() {
                            @Override
                            public void run() {
                                Realm bgRealm = Realm.getInstance(defaultConfig);
                                bgRealm.beginTransaction();
                                AllTypes object = bgRealm.createObject(AllTypes.class);
                                object.setColumnLong(10);
                                object.setColumnString("test data 10");
                                bgRealm.commitTransaction();
                                bgRealm.close();
                            }
                        }.start();
                    }
                });
            }
        });

        try {
            TestHelper.awaitOrFail(signalTestFinished);
        } finally {
            handlerThread.quit();
        }
    }

