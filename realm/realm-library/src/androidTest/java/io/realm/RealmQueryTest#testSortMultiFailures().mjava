    public void testSortMultiFailures() {
        // zero fields specified
        try {
            RealmResults<AllTypes> results = testRealm.where(AllTypes.class)
                    .findAllSorted(new String[]{}, new Sort[]{});
            fail();
        } catch (IllegalArgumentException ignored) {
        }

        // number of fields and sorting orders don't match
        try {
            RealmResults<AllTypes> results = testRealm.where(AllTypes.class)
                    .findAllSorted(new String[]{FIELD_STRING},
                            new Sort[]{Sort.ASCENDING, Sort.ASCENDING});
            fail();
        } catch (IllegalArgumentException ignored) {
        }

        // null is not allowed
        try {
            testRealm.where(AllTypes.class).findAllSorted((String[]) null, null);
            fail();
        } catch (IllegalArgumentException ignored) {
        }
        try {
            testRealm.where(AllTypes.class).findAllSorted(new String[]{FIELD_STRING}, null);
            fail();
        } catch (IllegalArgumentException ignored) {
        }

        // non-existing field name
        try {
            testRealm.where(AllTypes.class)
                    .findAllSorted(new String[]{FIELD_STRING, "dont-exist"}, new Sort[]{Sort.ASCENDING, Sort.ASCENDING});
            fail();
        } catch (IllegalArgumentException ignored) {
        }
    }

