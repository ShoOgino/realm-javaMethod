    // ********************************************************************************* //
    // UC 1.
    // Callback should be invoked after a relevant commit. (one that should impact the
    // query from which we obtained our RealmObject or RealmResults.)
    // ********************************************************************************* //
    // UC 1 for Sync RealmObject
    @Test
    @RunTestInLooperThread
    public void callback_with_relevant_commit_realmobject_sync() {
        final Realm realm = looperThread.getRealm();

        // Step 1: Creates object
        realm.beginTransaction();
        final Dog akamaru = realm.createObject(Dog.class);
        akamaru.setName("Akamaru");
        realm.commitTransaction();

        final Dog dog = realm.where(Dog.class).findFirst();
        looperThread.keepStrongReference(dog);
        dog.addChangeListener(new RealmChangeListener<Dog>() {
            @Override
            public void onChange(Dog object) {
                // Step 3: Responds to relevant change.
                typebasedCommitInvocations.incrementAndGet();
                assertEquals("Akamaru", dog.getName());
                assertEquals(17, dog.getAge());
                looperThread.testComplete();
            }
        });

        // Step 2: Trigger non-related commit
        realm.executeTransactionAsync(new Realm.Transaction() {
            @Override
            public void execute(Realm realm) {
            }
        });

        realm.executeTransactionAsync(new Realm.Transaction() {
            @Override
            public void execute(Realm realm) {
                realm.where(Dog.class).findFirst().setAge(17);
            }
        });
    }

