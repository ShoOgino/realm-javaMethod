    // If RealmResults are updated just before their change listener are notified, one change listener might
    // reference another RealmResults that have been advance_read, but not yet called sync_if_needed.
    // This can result in accessing detached rows and other errors.
    @Test
    @RunTestInLooperThread
    public void accessingSyncRealmResultsInsideAnotherResultListener() {
        final Realm realm = looperThread.realm;
        final RealmResults<AllTypes> syncResults1 = realm.where(AllTypes.class).findAll();
        final RealmResults<AllTypes> syncResults2 = realm.where(AllTypes.class).findAll();

        looperThread.keepStrongReference.add(syncResults1);
        syncResults1.addChangeListener(new RealmChangeListener<RealmResults<AllTypes>>() {
            @Override
            public void onChange(RealmResults<AllTypes> element) {
                assertEquals(1, syncResults1.size());
                assertEquals(1, syncResults2.size()); // If syncResults2 is not in sync yet, this will fail.
                looperThread.testComplete();
            }
        });

        realm.beginTransaction();
        realm.createObject(AllTypes.class);
        realm.commitTransaction();
    }

