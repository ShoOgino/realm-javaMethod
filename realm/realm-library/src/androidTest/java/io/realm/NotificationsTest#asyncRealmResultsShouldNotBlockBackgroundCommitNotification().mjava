    // The presence of async RealmResults block any `REALM_CHANGE` notification causing historically the Realm
    // to advance to the latest version. We make sure in this test that all Realm listeners will be notified
    // regardless of the presence of an async RealmResults that will delay the `REALM_CHANGE` sometimes.
    @Test
    @RunTestInLooperThread
    public void asyncRealmResultsShouldNotBlockBackgroundCommitNotification() {
        final Realm realm = looperThread.getRealm();
        final RealmResults<Dog> dogs = realm.where(Dog.class).findAllAsync();
        final AtomicBoolean resultsListenerDone = new AtomicBoolean(false);
        final AtomicBoolean realmListenerDone = new AtomicBoolean(false);

        looperThread.keepStrongReference(dogs);
        assertTrue(dogs.load());
        assertEquals(0, dogs.size());
        dogs.addChangeListener(new RealmChangeListener<RealmResults<Dog>>() {
            @Override
            public void onChange(RealmResults<Dog> results) {
                if (dogs.size() == 2) {
                    // Results has the latest changes.
                    resultsListenerDone.set(true);
                    if (realmListenerDone.get()) {
                        looperThread.testComplete();
                    }
                }
            }
        });

        realm.addChangeListener(new RealmChangeListener<Realm>() {
            @Override
            public void onChange(Realm element) {
                if (dogs.size() == 1) {
                    // Step 2. Creates the second dog.
                    realm.executeTransactionAsync(new Realm.Transaction() {
                        @Override
                        public void execute(Realm realm) {
                            realm.createObject(Dog.class);
                        }
                    });
                } else if (dogs.size() == 2) {
                    // Realm listener can see the latest changes.
                    realmListenerDone.set(true);
                    if (resultsListenerDone.get()) {
                        looperThread.testComplete();
                    }
                }
            }
        });

        // Step 1. Creates the first dog.
        realm.executeTransactionAsync(new Realm.Transaction() {
            @Override
            public void execute(Realm realm) {
                realm.createObject(Dog.class);
            }
        });
    }

