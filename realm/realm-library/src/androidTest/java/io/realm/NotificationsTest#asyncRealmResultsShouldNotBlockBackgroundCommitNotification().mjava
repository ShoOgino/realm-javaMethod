    // The presence of async RealmResults block any `REALM_CHANGE` notification causing historically the Realm
    // to advance to the latest version. We make sure in this test that all Realm listeners will be notified
    // regardless of the presence of an async RealmResults that will delay the `REALM_CHANGE` sometimes
    @Test
    public void asyncRealmResultsShouldNotBlockBackgroundCommitNotification() throws Throwable {
        final AtomicInteger numberOfRealmCallbackInvocation = new AtomicInteger(0);
        final AtomicInteger numberOfAsyncRealmResultsCallbackInvocation = new AtomicInteger(0);
        final CountDownLatch signalTestFinished = new CountDownLatch(2);
        final CountDownLatch signalClosedRealm = new CountDownLatch(1);
        final Realm[] realm = new Realm[1];
        final Throwable[] threadAssertionError = new Throwable[1];
        final Looper[] backgroundLooper = new Looper[1];
        ExecutorService executorService = Executors.newSingleThreadExecutor();
        executorService.submit(new Runnable() {
            @Override
            public void run() {
                Looper.prepare();
                backgroundLooper[0] = Looper.myLooper();

                try {
                    realm[0] = Realm.getInstance(realmConfig);
                    realm[0].addChangeListener(new RealmChangeListener() {
                        @Override
                        public void onChange() {
                            RealmResults<Dog> dogs; // to keep it as a strong reference
                            switch (numberOfRealmCallbackInvocation.incrementAndGet()) {
                                case 1: {
                                    // first commit
                                    dogs = realm[0].where(Dog.class).findAllAsync();
                                    assertTrue(dogs.load());
                                    dogs.addChangeListener(new RealmChangeListener() {
                                        @Override
                                        public void onChange() {
                                            numberOfAsyncRealmResultsCallbackInvocation.incrementAndGet();
                                        }
                                    });

                                    new Thread() {
                                        @Override
                                        public void run() {
                                            Realm realm = Realm.getInstance(realmConfig);
                                            realm.beginTransaction();
                                            realm.createObject(Dog.class);
                                            realm.commitTransaction();
                                            realm.close();
                                            signalTestFinished.countDown();
                                        }
                                    }.start();
                                    break;
                                }
                                case 2: {
                                    // finish test
                                    signalTestFinished.countDown();
                                    break;
                                }
                            }
                        }
                    });

                    realm[0].handler.post(new Runnable() {
                        @Override
                        public void run() {
                            realm[0].beginTransaction();
                            realm[0].createObject(Dog.class);
                            realm[0].commitTransaction();
                        }
                    });

                    Looper.loop();

                } catch (Throwable e) {
                    threadAssertionError[0] = e;

                } finally {
                    if (realm.length > 0 && realm[0] != null) {
                        realm[0].close();
                    }
                    signalClosedRealm.countDown();

                    if (signalTestFinished.getCount() > 0) {
                        signalTestFinished.countDown();
                    }
                }
            }
        });

        TestHelper.exitOrThrow(executorService, signalTestFinished, signalClosedRealm, backgroundLooper, threadAssertionError);
    }

