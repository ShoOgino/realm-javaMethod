    @Test
    public void setClassName_noSimilarPrimaryKeyWithOldSchema() {
        buildInitialMigrationSchema(MigrationClassRenamed.CLASS_NAME, true);

        RealmMigration migration = new RealmMigration() {
            @Override
            public void migrate(DynamicRealm realm, long oldVersion, long newVersion) {
                // Let us set a new class name.
                realm.getSchema()
                        .get(MigrationPrimaryKey.CLASS_NAME)
                        .setClassName(MigrationClassRenamed.CLASS_NAME);

                // Then recreates the original schema to see if Realm is going to get confused.
                // Unlike the first time with buildInitialMigrationSchema(), we will not have a primary key.
                realm.getSchema()
                        .create(MigrationPrimaryKey.CLASS_NAME)
                        .addField(MigrationPrimaryKey.FIELD_FIRST,   Byte.class)
                        .addField(MigrationPrimaryKey.FIELD_SECOND,  Short.class)
                        .addField(MigrationPrimaryKey.FIELD_PRIMARY, String.class)
                        .addField(MigrationPrimaryKey.FIELD_FOURTH,  Integer.class)
                        .addField(MigrationPrimaryKey.FIELD_FIFTH,   Long.class);
            }
        };
        RealmConfiguration realmConfig = configFactory.createConfigurationBuilder()
                .schemaVersion(1)
                .schema(MigrationClassRenamed.class)
                .migration(migration)
                .build();
        Realm realm = Realm.getInstance(realmConfig);

        assertTrue(realm.getSchema().get(MigrationClassRenamed.CLASS_NAME).hasPrimaryKey());
        assertFalse(realm.getSchema().get(MigrationPrimaryKey.CLASS_NAME).hasPrimaryKey());
    }

