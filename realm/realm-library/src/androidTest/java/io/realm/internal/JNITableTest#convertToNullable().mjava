    // testing the migration of a string column to be nullable.
    @Test
    public void convertToNullable() {
        RealmFieldType[] columnTypes = {RealmFieldType.BOOLEAN, RealmFieldType.DATE, RealmFieldType.DOUBLE,
                RealmFieldType.FLOAT, RealmFieldType.INTEGER, RealmFieldType.BINARY, RealmFieldType.STRING};
        for (RealmFieldType columnType : columnTypes) {
            // testing various combinations of column names and nullability
            String[] columnNames = {"foobar", "__TMP__0"};
            for (boolean nullable : new boolean[]{Table.NOT_NULLABLE, Table.NULLABLE}) {
                for (String columnName : columnNames) {
                    Table table = new Table();
                    long colIndex = table.addColumn(columnType, columnName, nullable);
                    table.addColumn(RealmFieldType.BOOLEAN, "bool");
                    table.addEmptyRow();
                    if (columnType == RealmFieldType.BOOLEAN) {
                        table.setBoolean(colIndex, 0, true);
                    } else if (columnType == RealmFieldType.DATE) {
                        table.setDate(colIndex, 0, new Date(0));
                    } else if (columnType == RealmFieldType.DOUBLE) {
                        table.setDouble(colIndex, 0, 1.0);
                    } else if (columnType == RealmFieldType.FLOAT) {
                        table.setFloat(colIndex, 0, 1.0f);
                    } else if (columnType == RealmFieldType.INTEGER) {
                        table.setLong(colIndex, 0, 1);
                    } else if (columnType == RealmFieldType.BINARY) {
                        table.setBinaryByteArray(colIndex, 0, new byte[]{0});
                    } else if (columnType == RealmFieldType.STRING) {
                        table.setString(colIndex, 0, "Foo");
                    }
                    try {
                        table.addEmptyRow();
                        if (columnType == RealmFieldType.BINARY) {
                            table.setBinaryByteArray(colIndex, 1, null);
                        } else if (columnType == RealmFieldType.STRING) {
                            table.setString(colIndex, 1, null);
                        } else {
                            table.getCheckedRow(1).setNull(colIndex);
                        }

                        if (!nullable) {
                            fail();
                        }
                    } catch (IllegalArgumentException ignored) {
                    }
                    table.removeLast();
                    assertEquals(1, table.size());

                    table.convertColumnToNullable(colIndex);
                    assertTrue(table.isColumnNullable(colIndex));
                    assertEquals(1, table.size());
                    assertEquals(2, table.getColumnCount());
                    assertTrue(table.getColumnIndex(columnName) >= 0);
                    assertEquals(colIndex, table.getColumnIndex(columnName));

                    table.addEmptyRow();
                    if (columnType == RealmFieldType.BINARY) {
                        table.setBinaryByteArray(colIndex, 0, null);
                    } else if (columnType == RealmFieldType.STRING) {
                        table.setString(colIndex, 0, null);
                    } else {
                        table.getCheckedRow(0).setNull(colIndex);
                    }

                    assertEquals(2, table.size());

                    if (columnType == RealmFieldType.BINARY) {
                        assertNull(table.getBinaryByteArray(colIndex, 1));
                    } else if (columnType == RealmFieldType.STRING) {
                        assertNull(table.getString(colIndex, 1));
                    } else {
                        assertTrue(table.getUncheckedRow(1).isNull(colIndex));
                    }
                }
            }
        }
    }

