    @Test
    @RunTestInLooperThread
    public void collectionIterator_invalid_looperThread_byRemoteTransaction() {
        final SharedRealm sharedRealm = getSharedRealm();
        Table table = getTable(sharedRealm);
        final Collection collection = new Collection(sharedRealm, table.where());
        final TestIterator iterator = new TestIterator(collection);
        looperThread.keepStrongReference(collection);
        assertFalse(iterator.isDetached(sharedRealm));
        collection.addListener(collection, new RealmChangeListener<Collection>() {
            @Override
            public void onChange(Collection element) {
                try {
                    iterator.checkValid();
                    fail();
                } catch (ConcurrentModificationException ignored) {
                }
                sharedRealm.close();
                looperThread.testComplete();
            }
        });

        addRowAsync();
    }

