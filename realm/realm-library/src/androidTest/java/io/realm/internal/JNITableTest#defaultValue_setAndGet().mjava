    @Test
    public void defaultValue_setAndGet() {
        final OsSharedRealm sharedRealm = OsSharedRealm.getInstance(configFactory.createConfiguration(), OsSharedRealm.VersionID.LIVE);
        //noinspection TryFinallyCanBeTryWithResources
        try {
            sharedRealm.beginTransaction();
            final Table table = sharedRealm.createTable(Table.getTableNameForClass("DefaultValueTest"));
            long colKey1 = table.addColumn(RealmFieldType.STRING, RealmFieldType.STRING.name().toLowerCase(Locale.ENGLISH) + "Col");
            long colKey2 = table.addColumn(RealmFieldType.INTEGER, RealmFieldType.INTEGER.name().toLowerCase(Locale.ENGLISH) + "Col");
            long colKey3 = table.addColumn(RealmFieldType.BOOLEAN, RealmFieldType.BOOLEAN.name().toLowerCase(Locale.ENGLISH) + "Col");
            long colKey4 = table.addColumn(RealmFieldType.BINARY, RealmFieldType.BINARY.name().toLowerCase(Locale.ENGLISH) + "Col");
            long colKey5 = table.addColumn(RealmFieldType.DATE, RealmFieldType.DATE.name().toLowerCase(Locale.ENGLISH) + "Col");
            long colKey6 = table.addColumn(RealmFieldType.FLOAT, RealmFieldType.FLOAT.name().toLowerCase(Locale.ENGLISH) + "Col");
            long colKey7 = table.addColumn(RealmFieldType.DOUBLE, RealmFieldType.DOUBLE.name().toLowerCase(Locale.ENGLISH) + "Col");
            long colKey8 = table.addColumnLink(RealmFieldType.OBJECT, RealmFieldType.OBJECT.name().toLowerCase(Locale.ENGLISH) + "Col", table);

            long[] columnKeys = new long[]{colKey1, colKey2, colKey3, colKey4, colKey5, colKey6, colKey7, colKey8};
            Object[] datas = new Object[]{"string value",
                    100L,
                    true,
                    new byte[]{123},
                    new Date(123456),
                    1.234F,
                    Math.PI,
                    0L};

            RealmFieldType[] types = new RealmFieldType[]{
                    RealmFieldType.STRING,
                    RealmFieldType.INTEGER,
                    RealmFieldType.BOOLEAN,
                    RealmFieldType.BINARY,
                    RealmFieldType.DATE,
                    RealmFieldType.FLOAT,
                    RealmFieldType.DOUBLE,
                    RealmFieldType.OBJECT
            };

            long rowKey = OsObject.createRow(table);

            for (int i = 0; i < columnKeys.length; i++) {
                final RealmFieldType type = types[i];
                final Object value = datas[i];

                switch (type) {
                    case STRING:
                        table.setString(columnKeys[i], rowKey, (String) value, true);
                        assertEquals(value, table.getString(columnKeys[i], rowKey));
                        break;
                    case INTEGER:
                        table.setLong(columnKeys[i], rowKey, (long) value, true);
                        assertEquals(value, table.getLong(columnKeys[i], rowKey));
                        break;
                    case BOOLEAN:
                        table.setBoolean(columnKeys[i], rowKey, (boolean) value, true);
                        assertEquals(value, table.getBoolean(columnKeys[i], rowKey));
                        break;
                    case BINARY:
                        table.setBinaryByteArray(columnKeys[i], rowKey, (byte[]) value, true);
                        assertTrue(Arrays.equals((byte[]) value, table.getBinaryByteArray(columnKeys[i], rowKey)));
                        break;
                    case DATE:
                        table.setDate(columnKeys[i], rowKey, (Date) value, true);
                        assertEquals(value, table.getDate(columnKeys[i], rowKey));
                        break;
                    case FLOAT:
                        table.setFloat(columnKeys[i], rowKey, (float) value, true);
                        assertEquals(value, table.getFloat(columnKeys[i], rowKey));
                        break;
                    case DOUBLE:
                        table.setDouble(columnKeys[i], rowKey, (double) value, true);
                        assertEquals(value, table.getDouble(columnKeys[i], rowKey));
                        break;
                    case OBJECT:
                        table.setLink(columnKeys[i], rowKey, (long) value, true);
                        assertEquals(value, table.getLink(columnKeys[i], rowKey));
                        break;
                    default:
                        throw new RuntimeException("unexpected field type: " + type);
                }
            }
            sharedRealm.commitTransaction();

            // Checks if the value can be read after committing transaction.
            for (int i = 0; i < columnKeys.length; i++) {
                final RealmFieldType type = types[i];
                final Object value = datas[i];

                switch (type) {
                    case STRING:
                        assertEquals(value, table.getString(columnKeys[i], rowKey));
                        break;
                    case INTEGER:
                        assertEquals(value, table.getLong(columnKeys[i], rowKey));
                        break;
                    case BOOLEAN:
                        assertEquals(value, table.getBoolean(columnKeys[i], rowKey));
                        break;
                    case BINARY:
                        assertTrue(Arrays.equals((byte[]) value, table.getBinaryByteArray(columnKeys[i], rowKey)));
                        break;
                    case DATE:
                        assertEquals(value, table.getDate(columnKeys[i], rowKey));
                        break;
                    case FLOAT:
                        assertEquals(value, table.getFloat(columnKeys[i], rowKey));
                        break;
                    case DOUBLE:
                        assertEquals(value, table.getDouble(columnKeys[i], rowKey));
                        break;
                    case OBJECT:
                        assertEquals(value, table.getLink(columnKeys[i], rowKey));
                        break;
                    default:
                        throw new RuntimeException("unexpected field type: " + type);
                }
            }

        } finally {
            sharedRealm.close();
        }
    }

