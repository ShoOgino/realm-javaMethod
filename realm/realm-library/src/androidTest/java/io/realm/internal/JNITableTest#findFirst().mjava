    @Test
    public void findFirst() {
        final int TEST_SIZE = 10;
        Table t = TestHelper.createTableWithAllColumnTypes(sharedRealm);
        long colKey1 = t.getColumnKey("binary");
        long colKey2 = t.getColumnKey("boolean");
        long colKey3 = t.getColumnKey("date");
        long colKey4 = t.getColumnKey("double");
        long colKey5 = t.getColumnKey("float");
        long colKey6 = t.getColumnKey("long");
        long colKey7 = t.getColumnKey("string");
        sharedRealm.beginTransaction();
        for (int i = 0; i < TEST_SIZE; i++) {
            TestHelper.addRowWithValues(t, new long[]{colKey1, colKey2, colKey3, colKey4, colKey5, colKey6, colKey7}, new Object[] {new byte[] {1, 2, 3}, true, new Date(i), (double) i, (float) i, i, "string " + i});
        }
        TestHelper.addRowWithValues(t, new long[]{colKey1, colKey2, colKey3, colKey4, colKey5, colKey6, colKey7}, new Object[] {new byte[] {1, 2, 3}, true, new Date(TEST_SIZE), (double) TEST_SIZE, (float) TEST_SIZE, TEST_SIZE, ""});
        sharedRealm.commitTransaction();

        assertEquals(0, t.findFirstBoolean(colKey2, true));
        for (int i = 0; i < TEST_SIZE; i++) {
            assertEquals(i, t.findFirstDate(colKey3, new Date(i)));
            assertEquals(i, t.findFirstDouble(colKey4, (double) i));
            assertEquals(i, t.findFirstFloat(colKey5, (float) i));
            assertEquals(i, t.findFirstLong(colKey6, i));
        }

        try {
            t.findFirstString(colKey7, null);
            fail();
        } catch (IllegalArgumentException ignored) {}

        try {
            t.findFirstDate(colKey3, null);
            fail();
        } catch (IllegalArgumentException ignored) {}
    }

