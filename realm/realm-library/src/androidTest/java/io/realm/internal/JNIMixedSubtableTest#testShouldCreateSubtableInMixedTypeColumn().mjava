    // Test uses TableSpec..
    public void testShouldCreateSubtableInMixedTypeColumn() {
        Table table = new Table();

        TableSpec tableSpec = new TableSpec();
        tableSpec.addColumn(ColumnType.INTEGER, "num");
        tableSpec.addColumn(ColumnType.MIXED, "mix");
        TableSpec subspec = tableSpec.addSubtableColumn("subtable");
        subspec.addColumn(ColumnType.INTEGER, "num");
        table.updateFromSpec(tableSpec);

        // Shouldn't work: no Mixed stored yet
        //Mixed m1 = table.getMixed(1, 0);
        //ColumnType mt = table.getMixedType(1,0);

        // You can't "getSubtable()" unless there is one. And the addEmptyRow will put in a Mixed(0) as default.
        // You now get an exception instead of crash if you try anyway
        {
            table.addEmptyRow();

            try { Table subtable = table.getSubtable(1, 0); fail("Mixed contains 0, not a subtable");  } catch (IllegalArgumentException e) {}
            table.removeLast();
        }

        /* FIXME: Subtable in Mixed is currently not supported
        long ROW = 0;
        // Add empty row - the simple way
        table.addEmptyRow();
        table.setMixed(1, ROW, new Mixed(ColumnType.TABLE));
        assertEquals(1, table.size());
        assertEquals(0, table.getSubtableSize(1, 0));

        // Create schema for the one Mixed cell with a subtable
        Table subtable = table.getSubtable(1, ROW);
        TableSpec subspecMixed = subtable.getTableSpec();
        subspecMixed.addColumn(ColumnType.INTEGER, "num");
        subtable.updateFromSpec(subspecMixed);

        // Insert value in the Mixed subtable
        subtable.add(27);
        subtable.add(273);
        assertEquals(2, subtable.size());
        assertEquals(2, table.getSubtableSize(1, ROW));
        assertEquals(27, subtable.getLong(0, ROW));
        assertEquals(273, subtable.getLong(0, ROW+1));
        */
    }

