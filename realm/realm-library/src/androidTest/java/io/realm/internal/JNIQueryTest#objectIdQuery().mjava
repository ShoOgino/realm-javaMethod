    @Test
    public void objectIdQuery() throws Exception {
        final ObjectId one = new ObjectId(new Date(10));
        final ObjectId two = new ObjectId(new Date(20));
        final ObjectId three = new ObjectId(new Date(30));

        final AtomicLong columnKey = new AtomicLong(-1);

        Table table = TestHelper.createTable(sharedRealm, "temp", new TestHelper.AdditionalTableSetup() {
            @Override
            public void execute(Table table) {
                columnKey.set(table.addColumn(RealmFieldType.OBJECT_ID, "date"));

                TestHelper.addRowWithValues(table, new long[]{columnKey.get()}, new Object[]{one});
                TestHelper.addRowWithValues(table, new long[]{columnKey.get()}, new Object[]{two});
                TestHelper.addRowWithValues(table, new long[]{columnKey.get()}, new Object[]{three});
            }
        });

        assertEquals(1L, table.where().equalTo(new long[]{columnKey.get()}, oneNullTable, one).count());
        assertEquals(2L, table.where().notEqualTo(new long[]{columnKey.get()}, oneNullTable, one).count());
        assertEquals(0L, table.where().lessThan(new long[]{columnKey.get()}, oneNullTable, one).count());
        assertEquals(1L, table.where().lessThanOrEqual(new long[]{columnKey.get()}, oneNullTable, one).count());
        assertEquals(2L, table.where().greaterThan(new long[]{columnKey.get()}, oneNullTable, one).count());
        assertEquals(3L, table.where().greaterThanOrEqual(new long[]{columnKey.get()}, oneNullTable, one).count());

        assertEquals(1L, table.where().equalTo(new long[]{columnKey.get()}, oneNullTable, two).count());
        assertEquals(2L, table.where().notEqualTo(new long[]{columnKey.get()}, oneNullTable, two).count());
        assertEquals(1L, table.where().lessThan(new long[]{columnKey.get()}, oneNullTable, two).count());
        assertEquals(2L, table.where().lessThanOrEqual(new long[]{columnKey.get()}, oneNullTable, two).count());
        assertEquals(1L, table.where().greaterThan(new long[]{columnKey.get()}, oneNullTable, two).count());
        assertEquals(2L, table.where().greaterThanOrEqual(new long[]{columnKey.get()}, oneNullTable, two).count());

        assertEquals(1L, table.where().equalTo(new long[]{columnKey.get()}, oneNullTable, three).count());
        assertEquals(2L, table.where().notEqualTo(new long[]{columnKey.get()}, oneNullTable, three).count());
        assertEquals(2L, table.where().lessThan(new long[]{columnKey.get()}, oneNullTable, three).count());
        assertEquals(3L, table.where().lessThanOrEqual(new long[]{columnKey.get()}, oneNullTable, three).count());
        assertEquals(0L, table.where().greaterThan(new long[]{columnKey.get()}, oneNullTable, three).count());
        assertEquals(1L, table.where().greaterThanOrEqual(new long[]{columnKey.get()}, oneNullTable, three).count());
    }

