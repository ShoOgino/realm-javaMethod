    // When converting a nullable field to required, the null values of the field will be set to the default value
    // according to the field type.
    @Test
    public void setRequired_nullValueBecomesDefaultValue() {
        if (type == ObjectSchemaType.IMMUTABLE) {
            return;
        }
        for (FieldType fieldType : FieldType.values()) {
            String fieldName = fieldType.name();
            switch (fieldType) {
                case OBJECT:
                    // Skip always nullable fields
                    break;
                default:
                    // Skip not-nullable fields .
                    if (!fieldType.isNullable()) {
                        break;
                    }
                    schema.addField(fieldName, fieldType.getType());
                    DynamicRealmObject object = ((DynamicRealm)realm).createObject(schema.getClassName());
                    assertTrue(object.isNull(fieldName));
                    schema.setRequired(fieldName, true);
                    assertFalse(object.isNull(fieldName));
                    if (fieldType == FieldType.BLOB) {
                        assertEquals(0, object.getBlob(fieldName).length);
                    } else if (fieldType == FieldType.BOOLEAN) {
                        assertFalse(object.getBoolean(fieldName));
                    } else if (fieldType == FieldType.STRING) {
                        assertEquals(0, object.getString(fieldName).length());
                    } else if (fieldType == FieldType.FLOAT) {
                        assertEquals(0.0F, object.getFloat(fieldName), 0F);
                    } else if (fieldType == FieldType.DOUBLE) {
                        assertEquals(0.0D, object.getDouble(fieldName), 0D);
                    } else if (fieldType == FieldType.DATE) {
                        assertEquals(new Date(0), object.getDate(fieldName));
                    } else {
                        assertEquals(0, object.getInt(fieldName));
                    }
                    break;
            }
        }
        for (FieldListType fieldType : FieldListType.values()) {
            switch(fieldType) {
                case LIST:
                    // Skip always non-nullable fields.
                    break;
                case STRING_LIST:
                    checkListValueConversionToDefaultValue(String.class, "");
                    break;
                case SHORT_LIST:
                    checkListValueConversionToDefaultValue(Short.class, (short) 0);
                    break;
                case INT_LIST:
                    checkListValueConversionToDefaultValue(Integer.class, 0);
                    break;
                case LONG_LIST:
                    checkListValueConversionToDefaultValue(Long.class, 0L);
                    break;
                case BYTE_LIST:
                    checkListValueConversionToDefaultValue(Byte.class, (byte) 0);
                    break;
                case BOOLEAN_LIST:
                    checkListValueConversionToDefaultValue(Boolean.class, false);
                    break;
                case FLOAT_LIST:
                    checkListValueConversionToDefaultValue(Float.class, 0.0F);
                    break;
                case DOUBLE_LIST:
                    checkListValueConversionToDefaultValue(Double.class, 0.0D);
                    break;
                case BLOB_LIST:
                    checkListValueConversionToDefaultValue(byte[].class, new byte[0]);
                    break;
                case DATE_LIST:
                    checkListValueConversionToDefaultValue(Date.class, new Date(0));
                    break;
                case PRIMITIVE_INT_LIST:
                case PRIMITIVE_LONG_LIST:
                case PRIMITIVE_BYTE_LIST:
                case PRIMITIVE_BOOLEAN_LIST:
                case PRIMITIVE_FLOAT_LIST:
                case PRIMITIVE_DOUBLE_LIST:
                case PRIMITIVE_SHORT_LIST:
                    // Skip not-nullable fields
                    break;
                default:
                    throw new IllegalArgumentException("Unknown type: " + fieldType);
            }
        }
    }

