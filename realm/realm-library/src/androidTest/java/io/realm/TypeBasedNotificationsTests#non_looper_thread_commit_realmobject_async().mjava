    // UC 3 Async RealmObject.
    // 1. Creates RealmObject async query.
    // 2. Waits async returns then change the object.
    // 3. Listener on the RealmObject gets triggered again.
    @Test
    @RunTestInLooperThread
    public void non_looper_thread_commit_realmobject_async() {
        final Realm realm = looperThread.realm;

        realm.beginTransaction();
        realm.createObject(Dog.class).setAge(1);
        realm.commitTransaction();

        Dog dog = realm.where(Dog.class).findFirstAsync();
        looperThread.keepStrongReference.add(dog);
        dog.addChangeListener(new RealmChangeListener<Dog>() {
            @Override
            public void onChange(Dog object) {
                switch (typebasedCommitInvocations.incrementAndGet()) {
                    case 1:
                        assertEquals(1, object.getAge());
                        realm.executeTransactionAsync(new Realm.Transaction() {
                            @Override
                            public void execute(Realm realm) {
                                realm.where(Dog.class).findFirst().setAge(17);
                            }
                        });
                        break;
                    case 2:
                        assertEquals(17, object.getAge());
                        looperThread.testComplete();
                        break;
                    default:
                        fail();
                }
            }
        });
    }

