    private boolean runMethodOnWrongThread(final OrderedRealmCollectionMethod method) throws ExecutionException, InterruptedException {
        realm.beginTransaction();
        ExecutorService executorService = Executors.newSingleThreadExecutor();
        Future<Boolean> future = executorService.submit(new Callable<Boolean>() {
            @Override
            public Boolean call() throws Exception {
                // Defines expected exception.
                Class<? extends Throwable> expected = IllegalStateException.class;
                if (isSnapshot(collectionClass)) {
                    switch (method) {
                        case SORT:
                        case SORT_FIELD:
                        case SORT_2FIELDS:
                        case SORT_MULTI:
                            expected = UnsupportedOperationException.class;
                            break;
                        default:
                            break;
                    }
                }

                try {
                    switch (method) {
                        case DELETE_INDEX: collection.deleteFromRealm(0); break;
                        case DELETE_FIRST: collection.deleteFirstFromRealm(); break;
                        case DELETE_LAST: collection.deleteLastFromRealm(); break;
                        case SORT: collection.sort(AllJavaTypes.FIELD_STRING); break;
                        case SORT_FIELD: collection.sort(AllJavaTypes.FIELD_STRING, Sort.ASCENDING); break;
                        case SORT_2FIELDS: collection.sort(AllJavaTypes.FIELD_STRING, Sort.ASCENDING, AllJavaTypes.FIELD_LONG, Sort.DESCENDING); break;
                        case SORT_MULTI: collection.sort(new String[] { AllJavaTypes.FIELD_STRING }, new Sort[] { Sort.ASCENDING }); break;
                        case CREATE_SNAPSHOT: collection.createSnapshot(); break;
                    }
                    return false;
                } catch (Throwable t) {
                    return t.getClass().equals(expected);
                }
            }
        });
        Boolean result = future.get();
        realm.cancelTransaction();
        return result;
    }

