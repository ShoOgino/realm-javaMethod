    @Test
    public void copyFromRealm_defaultValuesAreIgnored() {
        final DefaultValueOfField managedObj;
        realm.beginTransaction();
        {
            final DefaultValueOfField obj = new DefaultValueOfField();
            obj.setFieldIgnored(DefaultValueOfField.FIELD_IGNORED_DEFAULT_VALUE + ".modified");
            obj.setFieldString(DefaultValueOfField.FIELD_STRING_DEFAULT_VALUE + ".modified");
            obj.setFieldRandomString("non-random");
            obj.setFieldShort((short) (DefaultValueOfField.FIELD_SHORT_DEFAULT_VALUE + 1));
            obj.setFieldInt(DefaultValueOfField.FIELD_INT_DEFAULT_VALUE + 1);
            obj.setFieldLongPrimaryKey(DefaultValueOfField.FIELD_LONG_PRIMARY_KEY_DEFAULT_VALUE + 1);
            obj.setFieldLong(DefaultValueOfField.FIELD_LONG_DEFAULT_VALUE + 1);
            obj.setFieldByte((byte) (DefaultValueOfField.FIELD_BYTE_DEFAULT_VALUE + 1));
            obj.setFieldFloat(DefaultValueOfField.FIELD_FLOAT_DEFAULT_VALUE + 1);
            obj.setFieldDouble(DefaultValueOfField.FIELD_DOUBLE_DEFAULT_VALUE + 1);
            obj.setFieldBoolean(!DefaultValueOfField.FIELD_BOOLEAN_DEFAULT_VALUE);
            obj.setFieldDate(new Date(DefaultValueOfField.FIELD_DATE_DEFAULT_VALUE.getTime() + 1));
            obj.setFieldBinary(new byte[] {(byte) (DefaultValueOfField.FIELD_BINARY_DEFAULT_VALUE[0] - 1)});

            final RandomPrimaryKey fieldObjectValue = new RandomPrimaryKey();
            fieldObjectValue.setFieldInt(RandomPrimaryKey.FIELD_INT_DEFAULT_VALUE + 1);
            obj.setFieldObject(fieldObjectValue);

            final RealmList<RandomPrimaryKey> list = new RealmList<RandomPrimaryKey>();
            final RandomPrimaryKey listItem = new RandomPrimaryKey();
            listItem.setFieldInt(RandomPrimaryKey.FIELD_INT_DEFAULT_VALUE + 2);
            list.add(listItem);
            obj.setFieldList(list);

            obj.setFieldStringList(new RealmList<>("2", "3"));
            obj.setFieldBooleanList(new RealmList<>(true, false));
            obj.setFieldBinaryList(new RealmList<>(new byte[] {2}, new byte[] {3}));
            obj.setFieldLongList(new RealmList<>(2L, 3L));
            obj.setFieldIntegerList(new RealmList<>(2, 3));
            obj.setFieldShortList(new RealmList<>((short) 2, (short) 3));
            obj.setFieldByteList(new RealmList<>((byte) 2, (byte) 3));
            obj.setFieldDoubleList(new RealmList<>(2D, 3D));
            obj.setFieldFloatList(new RealmList<>(2F, 3F));
            obj.setFieldDateList(new RealmList<>(new Date(2L), new Date(3L)));

            managedObj = realm.copyToRealm(obj);
        }
        realm.commitTransaction();

        final DefaultValueOfField copy = realm.copyFromRealm(managedObj);

        assertEquals(DefaultValueOfField.FIELD_IGNORED_DEFAULT_VALUE, copy.getFieldIgnored());
        assertEquals(managedObj.getFieldString(), copy.getFieldString());
        assertEquals(managedObj.getFieldRandomString(), copy.getFieldRandomString());
        assertEquals(managedObj.getFieldShort(), copy.getFieldShort());
        assertEquals(managedObj.getFieldInt(), copy.getFieldInt());
        assertEquals(managedObj.getFieldLongPrimaryKey(), copy.getFieldLongPrimaryKey());
        assertEquals(managedObj.getFieldLong(), copy.getFieldLong());
        assertEquals(managedObj.getFieldByte(), copy.getFieldByte());
        assertEquals(managedObj.getFieldFloat(), copy.getFieldFloat(), 0F);
        assertEquals(managedObj.getFieldDouble(), copy.getFieldDouble(), 0D);
        assertEquals(managedObj.isFieldBoolean(), copy.isFieldBoolean());
        assertEquals(managedObj.getFieldDate(), copy.getFieldDate());
        assertArrayEquals(managedObj.getFieldBinary(), copy.getFieldBinary());
        assertEquals(managedObj.getFieldObject().getFieldInt(), copy.getFieldObject().getFieldInt());
        assertEquals(1, copy.getFieldList().size());
        //noinspection ConstantConditions
        assertEquals(managedObj.getFieldList().first().getFieldInt(), copy.getFieldList().first().getFieldInt());

        assertEquals(2, managedObj.getFieldStringList().size());
        assertEquals("2", managedObj.getFieldStringList().get(0));
        assertEquals("3", managedObj.getFieldStringList().get(1));
        assertEquals(2, managedObj.getFieldBooleanList().size());
        assertEquals(true, managedObj.getFieldBooleanList().get(0));
        assertEquals(false, managedObj.getFieldBooleanList().get(1));
        assertEquals(2, managedObj.getFieldBinaryList().size());
        assertArrayEquals(new byte[] {2}, managedObj.getFieldBinaryList().get(0));
        assertArrayEquals(new byte[] {3}, managedObj.getFieldBinaryList().get(1));
        assertEquals(2, managedObj.getFieldLongList().size());
        assertEquals((Long) 2L, managedObj.getFieldLongList().get(0));
        assertEquals((Long) 3L, managedObj.getFieldLongList().get(1));
        assertEquals(2, managedObj.getFieldIntegerList().size());
        assertEquals((Integer) 2, managedObj.getFieldIntegerList().get(0));
        assertEquals((Integer) 3, managedObj.getFieldIntegerList().get(1));
        assertEquals(2, managedObj.getFieldShortList().size());
        assertEquals((Short) (short) 2, managedObj.getFieldShortList().get(0));
        assertEquals((Short) (short) 3, managedObj.getFieldShortList().get(1));
        assertEquals(2, managedObj.getFieldByteList().size());
        assertEquals((Byte) (byte) 2, managedObj.getFieldByteList().get(0));
        assertEquals((Byte) (byte) 3, managedObj.getFieldByteList().get(1));
        assertEquals(2, managedObj.getFieldDoubleList().size());
        assertEquals((Double) 2D, managedObj.getFieldDoubleList().get(0));
        assertEquals((Double) 3D, managedObj.getFieldDoubleList().get(1));
        assertEquals(2, managedObj.getFieldFloatList().size());
        assertEquals((Float) 2F, managedObj.getFieldFloatList().get(0));
        assertEquals((Float) 3F, managedObj.getFieldFloatList().get(1));
        assertEquals(2, managedObj.getFieldDateList().size());
        assertEquals(new Date(2L), managedObj.getFieldDateList().get(0));
        assertEquals(new Date(3L), managedObj.getFieldDateList().get(1));
    }

