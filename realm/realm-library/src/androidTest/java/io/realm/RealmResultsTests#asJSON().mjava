    @Test
    public void asJSON() throws JSONException {
        Date date = Calendar.getInstance().getTime();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        sdf.setTimeZone(TimeZone.getTimeZone("GMT")); // Core return dates in UTC time
        String now = sdf.format(date);

        realm.beginTransaction();

        AllTypes allTypes = realm.createObject(AllTypes.class);
        Dog dog1 = realm.createObject(Dog.class);
        Dog dog2 = realm.createObject(Dog.class);
        Dog dog3 = realm.createObject(Dog.class);

        dog1.setName("dog1");
        dog1.setAge(1);
        dog1.setBirthday(date);
        dog1.setHasTail(true);
        dog1.setHeight(1.1f);
        dog1.setWeight(10.1f);

        dog2.setName("dog2");
        dog2.setAge(2);
        dog2.setBirthday(date);
        dog2.setHasTail(false);
        dog2.setHeight(2.1f);
        dog2.setWeight(20.1f);

        dog3.setName("dog3");
        dog3.setAge(3);
        dog3.setBirthday(date);
        dog3.setHasTail(true);
        dog3.setHeight(3.1f);
        dog3.setWeight(30.1f);

        Owner owner = realm.createObject(Owner.class);
        owner.setName("Dog owner 1");
        dog3.setOwner(owner);

        allTypes.setColumnString("alltypes1");
        allTypes.setColumnLong(1337L);
        allTypes.setColumnFloat(3.14f);
        allTypes.setColumnDouble(0.89123);
        allTypes.setColumnBoolean(false);
        allTypes.setColumnDate(date);
        allTypes.setColumnBinary(new byte[]{1, 2, 3});
        allTypes.setColumnMutableRealmInteger(0);
        allTypes.setColumnRealmObject(dog1);
        allTypes.getColumnRealmList().add(dog2);
        allTypes.getColumnRealmList().add(dog3);
        allTypes.getColumnStringList().add("Foo");
        allTypes.getColumnStringList().add("Bar");
        allTypes.getColumnBooleanList().add(false);
        allTypes.getColumnBooleanList().add(true);
        allTypes.getColumnLongList().add(1000L);
        allTypes.getColumnLongList().add(2000L);
        allTypes.getColumnDoubleList().add(1.123);
        allTypes.getColumnDoubleList().add(5.321);
        allTypes.getColumnFloatList().add(0.12f);
        allTypes.getColumnFloatList().add(0.13f);
        allTypes.getColumnDateList().add(date);
        allTypes.getColumnDateList().add(date);

        AllTypes allTypes2 = realm.createObject(AllTypes.class);
        allTypes2.setColumnString("alltypes2");
        realm.commitTransaction();

        RealmResults<AllTypes> all = realm.where(AllTypes.class)
                .equalTo("columnString", "alltypes1").findAll();
        assertEquals(1, all.size());
        String json = all.asJSON();
        final String expectedJSON = "[\n" +
                "    {\n" +
                "        \"columnString\": \"alltypes1\",\n" +
                "        \"columnLong\": 1337,\n" +
                "        \"columnFloat\": 3.1400001,\n" +
                "        \"columnDouble\": 0.89122999999999997,\n" +
                "        \"columnBoolean\": false,\n" +
                "        \"columnDate\": \"" + now + "\",\n" +
                "        \"columnBinary\": \"010203\",\n" +
                "        \"columnMutableRealmInteger\": 0,\n" +
                "        \"columnRealmObject\": [\n" +
                "            {\n" +
                "                \"name\": \"dog1\",\n" +
                "                \"age\": 1,\n" +
                "                \"height\": 1.1,\n" +
                "                \"weight\": 10.100000381469727,\n" +
                "                \"hasTail\": true,\n" +
                "                \"birthday\": \"" + now + "\",\n" +
                "                \"owner\": []\n" +
                "            }\n" +
                "        ],\n" +
                "        \"columnRealmList\": [\n" +
                "            {\n" +
                "                \"name\": \"dog2\",\n" +
                "                \"age\": 2,\n" +
                "                \"height\": 2.0999999,\n" +
                "                \"weight\": 20.100000381469727,\n" +
                "                \"hasTail\": false,\n" +
                "                \"birthday\": \"" + now + "\",\n" +
                "                \"owner\": []\n" +
                "            },\n" +
                "            {\n" +
                "                \"name\": \"dog3\",\n" +
                "                \"age\": 3,\n" +
                "                \"height\": 3.0999999,\n" +
                "                \"weight\": 30.100000381469727,\n" +
                "                \"hasTail\": true,\n" +
                "                \"birthday\": \"" + now + "\",\n" +
                "                \"owner\": [\n" +
                "                    {\n" +
                "                        \"name\": \"Dog owner 1\",\n" +
                "                        \"dogs\": [],\n" +
                "                        \"cat\": []\n" +
                "                    }\n" +
                "                ]\n" +
                "            }\n" +
                "        ],\n" +
                "        \"columnStringList\": [ \"Foo\", \"Bar\" ]," +
                "        \"columnBinaryList\": [],\n" +
                "        \"columnBooleanList\": [ false, true ],\n" +
                "        \"columnLongList\": [ 1000, 2000 ],\n" +
                "        \"columnDoubleList\": [ 1.123, 5.3209999999999997 ],\n" +
                "        \"columnFloatList\": [ 0.12, 0.13 ],\n" +
                "        \"columnDateList\": [ \"" + now + "\", \"" + now + "\"]\n" +
                "    }\n" +
                "]";
        JSONAssert.assertEquals(expectedJSON, json, false);
    }

