    // start asynchronously a transaction to insert one element
    public void testAsyncTransaction() throws Throwable {
        final CountDownLatch signalCallbackFinished = new CountDownLatch(1);
        final CountDownLatch signalClosedRealm = new CountDownLatch(1);
        final Realm[] realm = new Realm[1];
        final Throwable[] threadAssertionError = new Throwable[1];// to catch both Exception & AssertionError
        final Looper[] backgroundLooper = new Looper[1];
        ExecutorService executorService = Executors.newSingleThreadExecutor();
        executorService.submit(new Runnable() {
            @Override
            public void run() {
                Looper.prepare();
                backgroundLooper[0] = Looper.myLooper();

                try {
                    realm[0] = openRealmInstance("testAsyncTransaction");

                    assertEquals(0, realm[0].allObjects(Owner.class).size());

                    realm[0].executeTransaction(new Realm.Transaction() {
                        @Override
                        public void execute(Realm realm) {
                            Owner owner = realm.createObject(Owner.class);
                            owner.setName("Owner");
                        }
                    }, new Realm.Transaction.Callback() {
                        @Override
                        public void onSuccess() {
                            try {
                                assertEquals(1, realm[0].allObjects(Owner.class).size());
                                assertEquals("Owner", realm[0].where(Owner.class).findFirst().getName());
                            } catch (AssertionFailedError e) {
                                threadAssertionError[0] = e;
                            } finally {
                                signalCallbackFinished.countDown();
                            }
                        }

                        @Override
                        public void onError(Exception e) {
                            threadAssertionError[0] = e;
                            signalCallbackFinished.countDown();
                        }
                    });

                    Looper.loop();

                } catch (Throwable e) {
                    e.printStackTrace();
                    threadAssertionError[0] = e;

                } finally {
                    if (signalCallbackFinished.getCount() > 0) {
                        signalCallbackFinished.countDown();
                    }
                    if (realm.length > 0 && realm[0] != null) {
                        realm[0].close();
                    }
                    signalClosedRealm.countDown();
                }
            }
        });

        TestHelper.exitOrThrow(executorService, signalCallbackFinished, signalClosedRealm, backgroundLooper, threadAssertionError);
    }

