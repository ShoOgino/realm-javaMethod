    // Test case for https://github.com/realm/realm-java/issues/2417
    // Ensures that a UnreachableVersion exception during handover doesn't crash the app or cause a segfault.
    // NOTE: This test is not checking the same thing after the OS results integration. Just keep it for an additional
    // test for async.
    @Test
    @RunTestInLooperThread
    public void badVersion_syncTransaction() throws NoSuchFieldException, IllegalAccessException {
        final AtomicInteger listenerCount = new AtomicInteger(0);
        Realm realm = looperThread.getRealm();

        // 1. Makes sure that async query is not started.
        final RealmResults<AllTypes> result = realm.where(AllTypes.class).sort(AllTypes.FIELD_STRING).findAllAsync();
        looperThread.keepStrongReference(result);
        result.addChangeListener(new RealmChangeListener<RealmResults<AllTypes>>() {
            @Override
            public void onChange(RealmResults<AllTypes> object) {
                assertTrue(result.isValid());
                assertTrue(result.isLoaded());
                switch (listenerCount.getAndIncrement()) {
                    case 0:
                        // Triggered by beginTransaction
                        assertEquals(0, result.size());
                        break;
                    case 1:
                        // 4. The commit in #2, should result in a refresh being triggered, which means this callback will
                        // be notified once the updated async queries has run.
                        assertEquals(1, result.size());
                        looperThread.testComplete();
                        break;
                    default:
                        fail();
                        break;
                }
            }
        });

        // 2. Advances the caller Realm, invalidating the version in the handover object.
        realm.beginTransaction();
        assertTrue(result.isLoaded());
        realm.createObject(AllTypes.class);
        realm.commitTransaction();

        // 3. The async query should now (hopefully) fail with a BadVersion.
        // NOTE: Step 3 is from the original test. After integration of Object Store Results, it has been loaded already
        //       when beginTransaction.
        result.load();
    }

