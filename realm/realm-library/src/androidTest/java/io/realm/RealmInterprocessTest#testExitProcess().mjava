    // A. Opens a realm, closes it, then calls Runtime.getRuntime().exit(0).
    // 1. Waits 3 seconds to see if the service process existed.
    public void testExitProcess() {
        new InterprocessHandler(new Runnable() {
            @Override
            public void run() {
                // Step A
                triggerServiceStep(RemoteProcessService.stepExitProcess_A);
            }
        }) {

            @SuppressWarnings("ConstantConditions")
            final int servicePid = getServiceInfo().pid;

            @Override
            public void handleMessage(Message msg) {
                super.handleMessage(msg);
                if (msg.what == RemoteProcessService.stepExitProcess_A.message) {
                    // Step 1
                    clearTimeoutFlag();
                    try {
                        // Timeout is 5 seconds. 3 (6x500ms) seconds should be enough to quit the process.
                        for (int i = 1; i <= 6; i++) {
                            // We need to retrieve the service's pid again since the system might restart it automatically.
                            ActivityManager.RunningAppProcessInfo processInfo = getRemoteProcessInfo();
                            if (processInfo != null && processInfo.pid == servicePid && i >= 6) {
                                // The process is still alive.
                                fail("Process is still alive");
                            } else if (processInfo == null || processInfo.pid != servicePid) {
                                // The process is gone.
                                break;
                            }
                            Thread.sleep(500);
                        }
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                        assertTrue(false);
                    }
                    done();
                }
            }
        };
        Looper.loop();
    }

