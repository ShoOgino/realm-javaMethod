    @Test
    @UiThreadTest
    public void testAddRemoveListenerConcurrency() {
        final AtomicInteger counter1 = new AtomicInteger(0);
        final AtomicInteger counter2 = new AtomicInteger(0);
        final AtomicInteger counter3 = new AtomicInteger(0);

        // At least we need 2 listeners existing in the list to make sure
        // the iterator.next get called

        // This one will be added when listener2's onChange called
        final RealmChangeListener listener1 = new RealmChangeListener() {
            @Override
            public void onChange() {
                counter1.incrementAndGet();
            }
        };

        // This one will be existing in the list all the time
        final RealmChangeListener listener2 = new RealmChangeListener() {
            @Override
            public void onChange() {
                counter2.incrementAndGet();
                realm.addChangeListener(listener1);
            }
        };

        // This one will be removed after first transaction
        RealmChangeListener listener3 = new RealmChangeListener() {
            @Override
            public void onChange() {
                counter3.incrementAndGet();
                realm.removeChangeListener(this);
            }
        };

        realm = Realm.getInstance(context);
        realm.addChangeListener(listener2);
        realm.addChangeListener(listener3);

        realm.beginTransaction();
        realm.createObject(AllTypes.class);
        // [listener2, listener3]
        realm.commitTransaction();
        // after listener2.onChange
        // [listener2, listener3, listener1]
        // after listener3.onChange
        // [listener2, listener1]
        assertEquals(0, counter1.get());
        assertEquals(1, counter2.get());
        assertEquals(1, counter3.get());

        realm.beginTransaction();
        realm.createObject(AllTypes.class);
        // [listener2, listener1]
        realm.commitTransaction();
        // after listener2.onChange
        // Since duplicated entries will be ignored, we still have:
        // [listener2, listener1]

        assertEquals(1, counter1.get());
        assertEquals(2, counter2.get());
        assertEquals(1, counter3.get());
    }

