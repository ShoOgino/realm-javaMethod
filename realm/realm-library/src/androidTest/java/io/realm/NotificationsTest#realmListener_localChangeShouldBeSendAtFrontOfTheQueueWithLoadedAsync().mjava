    // See https://github.com/realm/realm-android-adapters/issues/48.
    // Step 1: Populates the db.
    // Step 2: Creates a async query, and waits until it finishes.
    // Step 3: Posts a runnable to caller thread.
    //         Event Queue: |Posted Runnable| <- TOP
    // Step 4: Deletes object which will make the results contain a invalid object at this moment.
    //         Right Event Queue: |LOCAL_COMMIT   |   Wrong Event Queue: |Posted Runnable           |  <- TOP
    //                            |Posted Runnable|                      |REALM_CHANGED/LOCAL_COMMIT|
    // Step 5: Posted runnable called.
    @Test
    @RunTestInLooperThread(/*step1*/before = PopulateOneAllTypes.class)
    public void realmListener_localChangeShouldBeSendAtFrontOfTheQueueWithLoadedAsync() {
        final AtomicBoolean changedFirstTime = new AtomicBoolean(false);
        final Realm realm = looperThread.realm;
        final RealmResults<AllTypes> asyncResults = realm.where(AllTypes.class).findAllAsync();
        final RealmResults<AllTypes> results = realm.where(AllTypes.class).findAll();

        assertEquals(1, results.size());

        looperThread.keepStrongReference.add(asyncResults);
        asyncResults.addChangeListener(new RealmChangeListener<RealmResults<AllTypes>>() {
            @Override
            public void onChange(RealmResults<AllTypes> element) {
                if (!changedFirstTime.get()) {
                    // Step 2
                    // The transaction later will trigger the results sync, and it should be run before this runnable.
                    looperThread.postRunnable(new Runnable() {
                        @Override
                        public void run() {
                            // Step 5
                            assertEquals(0, asyncResults.size());
                            assertEquals(0, results.size());
                            looperThread.testComplete();
                        }
                    });

                    // Step 3
                    realm.executeTransaction(new Realm.Transaction() {
                        @Override
                        public void execute(Realm realm) {
                            AllTypes allTypes = realm.where(AllTypes.class).findFirst();
                            assertNotNull(allTypes);
                            allTypes.deleteFromRealm();
                            assertEquals(0, realm.where(AllTypes.class).count());
                            assertFalse(results.get(0).isValid());
                        }
                    });
                    changedFirstTime.set(true);
                }
            }
        });
    }

