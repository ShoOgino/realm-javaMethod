    // Test below scenario:
    // 1. Creates a in-memory Realm instance in the main thread.
    // 2. Creates a in-memory Realm with same name in another thread.
    // 3. Closes the in-memory Realm instance in the main thread and the Realm data should not be released since
    //    another instance is still held by the other thread.
    // 4. Closes the in-memory Realm instance and the Realm data should be released since no more instance with the
    //    specific name exists.
    @Test
    public void multiThread() throws InterruptedException, ExecutionException {
        final CountDownLatch workerCommittedLatch = new CountDownLatch(1);
        final CountDownLatch workerClosedLatch = new CountDownLatch(1);
        final CountDownLatch realmInMainClosedLatch = new CountDownLatch(1);
        final AssertionFailedError threadError[] = new AssertionFailedError[1];

        // Step 2.
        Thread workerThread = new Thread(new Runnable() {
            @Override
            public void run() {
                Realm realm = Realm.getInstance(inMemConf);
                realm.beginTransaction();
                Dog dog = realm.createObject(Dog.class);
                dog.setName("DinoDog");
                realm.commitTransaction();

                try {
                    assertEquals(1, realm.where(Dog.class).count());
                } catch (AssertionFailedError afe) {
                    threadError[0] = afe;
                    realm.close();
                    return;
                }
                workerCommittedLatch.countDown();

                // Waits until Realm instance closed in main thread.
                try {
                    realmInMainClosedLatch.await(TestHelper.SHORT_WAIT_SECS, TimeUnit.SECONDS);
                } catch (InterruptedException e) {
                    threadError[0] = new AssertionFailedError("Worker thread was interrupted.");
                    realm.close();
                    return;
                }

                realm.close();
                workerClosedLatch.countDown();
            }
        });
        workerThread.start();


        // Waits until the worker thread started.
        workerCommittedLatch.await(TestHelper.SHORT_WAIT_SECS, TimeUnit.SECONDS);
        if (threadError[0] != null) { throw threadError[0]; }

        // Refreshes will be ran in the next loop, manually refreshes it here.
        testRealm.waitForChange();
        assertEquals(1, testRealm.where(Dog.class).count());

        // Step 3.
        // Releases the main thread Realm reference, and the worker thread holds the reference still.
        testRealm.close();

        // Step 4.
        // Creates a new Realm reference in main thread and checks the data.
        testRealm = Realm.getInstance(inMemConf);
        assertEquals(1, testRealm.where(Dog.class).count());
        testRealm.close();

        // Let the worker thread continue.
        realmInMainClosedLatch.countDown();

        // Waits until the worker thread finished.
        workerClosedLatch.await(TestHelper.SHORT_WAIT_SECS, TimeUnit.SECONDS);
        if (threadError[0] != null) { throw threadError[0]; }

        // Since all previous Realm instances has been closed before, below will create a fresh new in-mem-realm instance.
        testRealm = Realm.getInstance(inMemConf);
        assertEquals(0, testRealm.where(Dog.class).count());
    }

