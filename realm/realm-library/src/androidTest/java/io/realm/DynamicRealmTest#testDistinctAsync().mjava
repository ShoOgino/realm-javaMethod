    public void testDistinctAsync() {
        final RealmResults[] keepStrongReferences = new RealmResults[4];
        final CountDownLatch signalTestFinished = new CountDownLatch(4);

        final HandlerThread handlerThread = new HandlerThread("LooperThread");
        handlerThread.start();
        Handler handler = new Handler(handlerThread.getLooper());

        handler.post(new Runnable() {
            @Override
            public void run() {
                final DynamicRealm realm = DynamicRealm.getInstance(defaultConfig);
                populateTestRealm(realm, 10);

                final long numberOfBlocks = 25;
                final long numberOfObjects = 10; // must be greater than 1

                populateForDistinct(realm, numberOfBlocks, numberOfObjects, false);

                final RealmResults<DynamicRealmObject> distinctBool = realm.distinctAsync(AnnotationIndexTypes.CLASS_NAME, "indexBoolean");
                final RealmResults<DynamicRealmObject> distinctLong = realm.distinctAsync(AnnotationIndexTypes.CLASS_NAME, "indexLong");
                final RealmResults<DynamicRealmObject> distinctDate = realm.distinctAsync(AnnotationIndexTypes.CLASS_NAME, "indexDate");
                final RealmResults<DynamicRealmObject> distinctString = realm.distinctAsync(AnnotationIndexTypes.CLASS_NAME, "indexString");

                distinctBool.addChangeListener(new RealmChangeListener() {
                    @Override
                    public void onChange() {
                        assertEquals(2, distinctBool.size());
                        if (signalTestFinished.getCount() == 01) {
                            realm.close();
                        }
                        signalTestFinished.countDown();
                    }
                });

                distinctLong.addChangeListener(new RealmChangeListener() {
                    @Override
                    public void onChange() {
                        assertEquals(numberOfBlocks, distinctLong.size());
                        if (signalTestFinished.getCount() == 1) {
                            realm.close();
                        }
                        signalTestFinished.countDown();
                    }
                });

                distinctDate.addChangeListener(new RealmChangeListener() {
                    @Override
                    public void onChange() {
                        assertEquals(numberOfBlocks, distinctDate.size());
                        if (signalTestFinished.getCount() == 1) {
                            realm.close();
                        }
                        signalTestFinished.countDown();
                    }
                });

                distinctString.addChangeListener(new RealmChangeListener() {
                    @Override
                    public void onChange() {
                        assertEquals(numberOfBlocks, distinctString.size());
                        if (signalTestFinished.getCount() == 1) {
                            realm.close();
                        }
                        signalTestFinished.countDown();
                    }
                });

                keepStrongReferences[0] = distinctBool;
                keepStrongReferences[1] = distinctLong;
                keepStrongReferences[2] = distinctDate;
                keepStrongReferences[3] = distinctString;
            }
        });

        try {
            TestHelper.awaitOrFail(signalTestFinished);
        } finally {
            handlerThread.quit();
        }
    }

