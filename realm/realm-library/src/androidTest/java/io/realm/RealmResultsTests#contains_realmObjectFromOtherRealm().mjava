    // Tests that `contains()` correctly doesn't find RealmObjects that belongs to another Realm file.
    @Test
    public void contains_realmObjectFromOtherRealm() {
        RealmConfiguration realmConfig = configFactory.createConfiguration("contains_test.realm");
        Realm realmTwo = Realm.getInstance(realmConfig);
        try {

            realmTwo.beginTransaction();
            realmTwo.allObjects(AllTypes.class).clear();
            realmTwo.allObjects(NonLatinFieldNames.class).clear();

            for (int i = 0; i < TEST_DATA_SIZE; ++i) {
                AllTypes allTypes = realmTwo.createObject(AllTypes.class);
                allTypes.setColumnBoolean((i % 2) == 0);
                allTypes.setColumnBinary(new byte[]{1, 2, 3});
                allTypes.setColumnDate(new Date(YEAR_MILLIS * (i - TEST_DATA_SIZE / 2)));
                allTypes.setColumnDouble(3.1415 + i);
                allTypes.setColumnFloat(1.234567f + i);
                allTypes.setColumnString("test data " + i);
                allTypes.setColumnLong(i);
                Dog d = realmTwo.createObject(Dog.class);
                d.setName("Foo " + i);
                allTypes.setColumnRealmObject(d);
                allTypes.getColumnRealmList().add(d);
                NonLatinFieldNames nonLatinFieldNames = realmTwo.createObject(NonLatinFieldNames.class);
                nonLatinFieldNames.set델타(i);
                nonLatinFieldNames.setΔέλτα(i);
            }
            realmTwo.commitTransaction();

            final AllTypes item = realmTwo.where(AllTypes.class).findFirst();

            assertFalse("Should not be able to find one object in another Realm via RealmResults#contains",
                    realm.where(AllTypes.class).findAll().contains(item));

        } finally {
            if (realmTwo != null && !realmTwo.isClosed()) {
                realmTwo.close();
            }
        }
    }

