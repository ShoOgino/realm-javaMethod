    @Override
    public Statement apply(final Statement base, Description description) {
        final RunTestInLooperThread annotation = description.getAnnotation(RunTestInLooperThread.class);
        if (annotation == null) {
            return base;
        }
        return new Statement() {
            private Throwable testException;

            @Override
            public void evaluate() throws Throwable {
                before();
                final String threadName = annotation.threadName();
                Class<? extends RunnableBefore> runnableBefore = annotation.before();
                if (!runnableBefore.isInterface()) {
                    runnableBefore.newInstance().run(realmConfiguration);
                }
                try {
                    final CountDownLatch signalClosedRealm = new CountDownLatch(1);
                    final Throwable[] threadAssertionError = new Throwable[1];
                    final Looper[] backgroundLooper = new Looper[1];
                    final ExecutorService executorService = Executors.newSingleThreadExecutor(new ThreadFactory() {
                        @Override
                        public Thread newThread(Runnable runnable) {
                            return new Thread(runnable, threadName);
                        }
                    });
                    executorService.submit(new Runnable() {
                        @Override
                        public void run() {
                            Looper.prepare();
                            backgroundLooper[0] = Looper.myLooper();
                            backgroundHandler = new Handler(backgroundLooper[0]);
                            try {
                                realm = Realm.getInstance(realmConfiguration);
                                base.evaluate();
                                Looper.loop();
                            } catch (Throwable e) {
                                threadAssertionError[0] = e;
                                unitTestFailed = true;
                            } finally {
                                try {
                                    looperTearDown();
                                } catch (Throwable t) {
                                    if (threadAssertionError[0] == null) {
                                        threadAssertionError[0] = t;
                                    }
                                    unitTestFailed = true;
                                }
                                signalTestCompleted.countDown();
                                if (realm != null) {
                                    realm.close();
                                }
                                signalClosedRealm.countDown();
                            }
                        }
                    });
                    TestHelper.exitOrThrow(executorService, signalTestCompleted, signalClosedRealm, backgroundLooper, threadAssertionError);
                } catch (Throwable error) {
                    // These exceptions should only come from TestHelper.awaitOrFail()
                    testException = error;
                } finally {
                    // Try as hard as possible to close down gracefully, while still keeping all exceptions intact.
                    try {
                        after();
                    } catch (Throwable e) {
                        if (testException != null) {
                            // Both TestHelper.awaitOrFail() and after() threw an exception. Make sure we are aware of
                            // that fact by printing both exceptions.
                            StringWriter testStackTrace = new StringWriter();
                            testException.printStackTrace(new PrintWriter(testStackTrace));

                            StringWriter afterStackTrace = new StringWriter();
                            e.printStackTrace(new PrintWriter(afterStackTrace));

                            StringBuilder errorMessage = new StringBuilder()
                                    .append("after() threw an error that shadows a test case error")
                                    .append('\n')
                                    .append("== Test case exception ==\n")
                                    .append(testStackTrace.toString())
                                    .append('\n')
                                    .append("== after() exception ==\n")
                                    .append(afterStackTrace.toString());
                            fail(errorMessage.toString());
                        } else {
                            // Only after() threw an exception
                            throw e;
                        }
                    }

                    // Only TestHelper.awaitOrFail() threw an exception
                    if (testException != null) {
                        //noinspection ThrowFromFinallyBlock
                        throw testException;
                    }
                }
            }
        };
    }

