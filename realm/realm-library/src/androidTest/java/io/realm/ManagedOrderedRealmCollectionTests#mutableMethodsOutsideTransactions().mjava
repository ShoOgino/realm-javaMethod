    // Tests all methods that mutate data throw correctly if not inside an transaction.
    // Due to implementation details both UnsupportedOperation and IllegalState is accepted at this level.
    @Test
    public void mutableMethodsOutsideTransactions() {

        for (OrderedCollectionMutatorMethod method : OrderedCollectionMutatorMethod.values()) {

            // Define expected exception
            Class<? extends Throwable> expected = IllegalStateException.class;
            if (collectionClass == ManagedCollection.REALMRESULTS) {
                switch (method) {
                    case ADD_INDEX:
                    case ADD_ALL_INDEX:
                    case SET:
                    case REMOVE_INDEX:
                        expected = UnsupportedOperationException.class;
                        break;
                    default:
                        // Uses default exception.
                }
            }

            try {
                switch (method) {
                    case DELETE_INDEX: collection.deleteFromRealm(0); break;
                    case DELETE_FIRST: collection.deleteFirstFromRealm(); break;
                    case DELETE_LAST: collection.deleteLastFromRealm(); break;
                    case ADD_INDEX: collection.add(0, new AllJavaTypes()); break;
                    case ADD_ALL_INDEX: collection.addAll(0, Collections.singletonList(new AllJavaTypes())); break;
                    case SET: collection.set(0, new AllJavaTypes()); break;
                    case REMOVE_INDEX: collection.remove(0); break;
                }
                fail("Unknown method or it failed to throw: " + method);
            } catch (Throwable t) {
                if (!t.getClass().equals(expected)) {
                    fail(method + " didn't throw the expected exception. Was: " + t + ", expected: " + expected);
                }
            }
        }
    }

