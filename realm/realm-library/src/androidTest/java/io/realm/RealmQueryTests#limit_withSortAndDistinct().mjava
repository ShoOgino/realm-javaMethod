    @Test
    public void limit_withSortAndDistinct() {
        // The order of operators matter when using limit()
        // If applying sort/distinct without limit, any order will result in the same query result.

        realm.beginTransaction();
        RealmList<AllJavaTypes> list = realm.createObject(AllJavaTypes.class, -1).getFieldList(); // Root object;
        for (int i = 0; i < 5; i++) {
            AllJavaTypes obj = realm.createObject(AllJavaTypes.class, i);
            obj.setFieldLong(i);
            list.add(obj);
        }
        realm.commitTransaction();

        RealmResults<AllJavaTypes> results = list.where()
                .sort(AllJavaTypes.FIELD_LONG, Sort.DESCENDING) // [4, 4, 3, 3, 2, 2, 1, 1, 0, 0]
                .distinct(AllJavaTypes.FIELD_LONG) // [4, 3, 2, 1, 0]
                .limit(2) // [4, 3]
                .findAll();
        assertEquals(2, results.size());
        assertEquals(4, results.first().getFieldLong());
        assertEquals(3, results.last().getFieldLong());

        results = list.where()
                .limit(2) // [0, 1]
                .distinct(AllJavaTypes.FIELD_LONG) // [ 0, 1]
                .sort(AllJavaTypes.FIELD_LONG, Sort.DESCENDING) // [1, 0]
                .findAll();
        assertEquals(2, results.size());
        assertEquals(1, results.first().getFieldLong());
        assertEquals(0, results.last().getFieldLong());

        results = list.where()
                .distinct(AllJavaTypes.FIELD_LONG) // [ 0, 1, 2, 3, 4]
                .limit(2) // [0, 1]
                .sort(AllJavaTypes.FIELD_LONG, Sort.DESCENDING) // [1, 0]
                .findAll();
        assertEquals(2, results.size());
        assertEquals(1, results.first().getFieldLong());
        assertEquals(0, results.last().getFieldLong());
    }

