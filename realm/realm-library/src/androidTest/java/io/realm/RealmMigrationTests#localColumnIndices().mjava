    // If a migration creates a different ordering of columns on Realm A, while another ordering is generated by
    // creating a new Realm B. Global column indices will not work. They must be calculated for each Realm.
    @Test
    public void localColumnIndices() throws IOException {
        String MIGRATED_REALM = "migrated.realm";
        String NEW_REALM = "new.realm";

        // Migrates old Realm to proper schema.

        // V1 config
        RealmConfiguration v1Config = configFactory.createConfigurationBuilder()
                .name(MIGRATED_REALM)
                .schema(StringOnly.class)
                .schemaVersion(1)
                .build();
        Realm oldRealm = Realm.getInstance(v1Config);
        oldRealm.close();

        // V2 config
        RealmMigration migration = new RealmMigration() {
            @Override
            public void migrate(DynamicRealm realm, long oldVersion, long newVersion) {
                RealmSchema schema = realm.getSchema();
                schema.create("FieldOrder")
                        .addField("field2", int.class)
                        .addField("field1", boolean.class);
            }
        };

        RealmConfiguration v2Config = configFactory.createConfigurationBuilder()
                .name(MIGRATED_REALM)
                .schema(StringOnly.class, FieldOrder.class)
                .schemaVersion(2)
                .migration(migration)
                .build();
        oldRealm = Realm.getInstance(v2Config);

        // Creates new Realm which will cause column indices to be recalculated based on the order in the java file
        // instead of the migration.
        RealmConfiguration newConfig = configFactory.createConfigurationBuilder()
                .name(NEW_REALM)
                .schemaVersion(2)
                .schema(StringOnly.class, FieldOrder.class)
                .build();
        Realm newRealm = Realm.getInstance(newConfig);
        newRealm.close();

        // Tries to query migrated realm. With local column indices this will work. With global it will fail.
        assertEquals(0, oldRealm.where(FieldOrder.class).equalTo("field1", true).findAll().size());
        oldRealm.close();
    }

