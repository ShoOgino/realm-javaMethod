    @Test
    public void notificationsNumber() throws InterruptedException, ExecutionException {
        final CountDownLatch isReady = new CountDownLatch(1);
        final CountDownLatch isRealmOpen = new CountDownLatch(1);
        final AtomicInteger counter = new AtomicInteger(0);
        final Looper[] looper = new Looper[1];
        final RealmChangeListener<Realm> listener = new RealmChangeListener<Realm>() {
            @Override
            public void onChange(Realm object) {
                counter.incrementAndGet();
            }
        };

        ExecutorService executorService = Executors.newSingleThreadExecutor();
        Future<Boolean> future = executorService.submit(new Callable<Boolean>() {
            @Override
            public Boolean call() throws Exception {
                Realm realm = null;
                try {
                    Looper.prepare();
                    looper[0] = Looper.myLooper();
                    realm = Realm.getInstance(realmConfig);
                    realm.addChangeListener(listener);
                    isReady.countDown();
                    Looper.loop();
                } finally {
                    if (realm != null) {
                        realm.close();
                        isRealmOpen.countDown();
                    }
                }
                return true;
            }
        });

        // Waits until the looper in the background thread is started.
        TestHelper.awaitOrFail(isReady);

        // Triggers OnRealmChanged on background thread.
        realm = Realm.getInstance(realmConfig);
        realm.beginTransaction();
        Dog dog = realm.createObject(Dog.class);
        dog.setName("Rex");
        realm.commitTransaction();
        realm.close();

        try {
            future.get(1, TimeUnit.SECONDS);
        } catch (TimeoutException ignore) {
        } finally {
            looper[0].quit();
        }

        // Waits until the Looper thread is actually closed.
        TestHelper.awaitOrFail(isRealmOpen);

        assertEquals(1, counter.get());
        RealmCache.invokeWithGlobalRefCount(realmConfig, new TestHelper.ExpectedCountCallback(0));
    }

