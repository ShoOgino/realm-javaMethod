    // UC 3 for Sync RealmObject.
    // 1. Adds listener to RealmObject which is queried synchronized.
    // 2. Commits transaction in another non-looper thread.
    // 3. Listener on the RealmObject gets triggered.
    @Test
    @RunTestInLooperThread
    public void non_looper_thread_commit_realmobject_sync() {
        final Realm realm = looperThread.realm;
        realm.addChangeListener(new RealmChangeListener<Realm>() {
            @Override
            public void onChange(Realm object) {
                if (realm.where(Dog.class).count() == 2) {
                    looperThread.postRunnable(new Runnable() {
                        @Override
                        public void run() {
                            assertEquals(1, typebasedCommitInvocations.get());
                            looperThread.testComplete();
                        }
                    });
                }
            }
        });

        realm.beginTransaction();
        realm.createObject(Dog.class);
        realm.commitTransaction();

        Dog dog = realm.where(Dog.class).findFirst();
        looperThread.keepStrongReference.add(dog);
        dog.addChangeListener(new RealmChangeListener<Dog>() {
            @Override
            public void onChange(Dog object) {
                typebasedCommitInvocations.incrementAndGet();
            }
        });

        Thread thread = new Thread() {
            @Override
            public void run() {
                Realm bgRealm = Realm.getInstance(realm.getConfiguration());
                bgRealm.beginTransaction();
                bgRealm.createObject(Dog.class);
                bgRealm.commitTransaction();
                bgRealm.close();
            }
        };
        thread.start();
        try {
            thread.join();
        } catch (InterruptedException e) {
            fail(e.getMessage());
        }
    }

