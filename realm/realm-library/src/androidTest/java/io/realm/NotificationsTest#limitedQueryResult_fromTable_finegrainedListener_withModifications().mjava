    @Test
    @RunTestInLooperThread
    public void limitedQueryResult_fromTable_finegrainedListener_withModifications() {
        realm = looperThread.getRealm();
        realm.executeTransaction(r -> {
            for (int i = 0; i < 5; i++) {
                r.createObject(AllTypes.class).setColumnLong(i % 5);
            }
        });
        RealmResults<AllTypes> results = realm.where(AllTypes.class)
                .sort(AllTypes.FIELD_LONG, Sort.DESCENDING) // [4, 4, 3, 3, 2, 2, 1, 1, 0, 0]
                .distinct(AllTypes.FIELD_LONG) // [4, 3, 2, 1, 0]
                .limit(2) // [4, 3]
                .findAll();
        looperThread.keepStrongReference(results);
        results.addChangeListener((objects, changeSet) -> {
            assertEquals(2, objects.size());
            assertEquals(6, objects.first().getColumnLong());
            assertEquals(5, objects.last().getColumnLong());
            assertEquals(1, changeSet.getInsertions().length);
            assertEquals(0, changeSet.getInsertions()[0]);
            assertEquals(1, changeSet.getDeletions().length);
            assertEquals(1, changeSet.getDeletions()[0]);
            assertEquals(1, changeSet.getChanges().length);
            assertEquals(1, changeSet.getChanges()[0]);
            looperThread.testComplete();
        });

        realm.executeTransaction(new Realm.Transaction() {
            @Override
            public void execute(Realm realm) {
                realm.createObject(AllTypes.class).setColumnLong(6);
                for (AllTypes obj : realm.where(AllTypes.class).equalTo(AllTypes.FIELD_LONG, 4).findAll()) {
                    obj.setColumnLong(5);
                }
            }
        });
    }

