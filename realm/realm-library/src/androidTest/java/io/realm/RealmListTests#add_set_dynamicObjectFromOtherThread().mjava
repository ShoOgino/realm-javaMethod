    @Test
    public void add_set_dynamicObjectFromOtherThread() throws Throwable {
        final CountDownLatch finishedLatch = new CountDownLatch(1);
        DynamicRealm dynamicRealm = DynamicRealm.getInstance(realm.getConfiguration());
        final DynamicRealmObject dynDog = dynamicRealm.where(Dog.CLASS_NAME).findFirst();
        final String expectedMsg = "Cannot copy an object to a Realm instance created in another thread.";

        final AtomicReference<Throwable> thrownErrorRef = new AtomicReference<Throwable>();

        new Thread(new Runnable() {
            @Override
            public void run() {
                DynamicRealm dynamicRealm = DynamicRealm.getInstance(realm.getConfiguration());
                dynamicRealm.beginTransaction();
                try {
                    RealmList<DynamicRealmObject> list = dynamicRealm.createObject(Owner.CLASS_NAME)
                            .getList(Owner.FIELD_DOGS);
                    list.add(dynamicRealm.createObject(Dog.CLASS_NAME));

                    try {
                        list.add(dynDog);
                        fail();
                    } catch (IllegalStateException expected) {
                        assertEquals(expectedMsg, expected.getMessage());
                    }

                    try {
                        list.add(0, dynDog);
                        fail();
                    } catch (IllegalStateException expected) {
                        assertEquals(expectedMsg, expected.getMessage());
                    }

                    try {
                        list.set(0, dynDog);
                        fail();
                    } catch (IllegalStateException expected) {
                        assertEquals(expectedMsg, expected.getMessage());
                    }
                } catch (Throwable throwable) {
                    thrownErrorRef.set(throwable);
                } finally {
                    dynamicRealm.cancelTransaction();
                    dynamicRealm.close();
                    finishedLatch.countDown();
                }
            }
        }).start();
        TestHelper.awaitOrFail(finishedLatch);
        dynamicRealm.close();

        final Throwable thrown = thrownErrorRef.get();
        if (thrown != null) {
            throw thrown;
        }
    }

