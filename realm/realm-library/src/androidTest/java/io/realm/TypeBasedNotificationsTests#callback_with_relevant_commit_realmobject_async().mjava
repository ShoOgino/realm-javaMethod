    // UC 1 Async RealmObject.
    @Test
    @RunTestInLooperThread
    public void callback_with_relevant_commit_realmobject_async() {
        final Realm realm = looperThread.getRealm();

        // Step 1: Creates object.
        realm.beginTransaction();
        final Dog akamaru = realm.createObject(Dog.class);
        akamaru.setName("Akamaru");
        realm.commitTransaction();

        final Dog dog = realm.where(Dog.class).findFirstAsync();

        looperThread.keepStrongReference(dog);
        dog.addChangeListener(new RealmChangeListener<Dog>() {
            @Override
            public void onChange(Dog object) {
                switch (typebasedCommitInvocations.incrementAndGet()) {
                    case 1:
                        // Async query returns.
                        assertEquals("Akamaru", dog.getName());
                        assertEquals(0, dog.getAge());

                        // Step 2: Triggers non-related commit.
                        realm.executeTransactionAsync(new Realm.Transaction() {
                            @Override
                            public void execute(Realm realm) {
                            }
                        });

                        // Step 3: Triggers related commit.
                        realm.executeTransactionAsync(new Realm.Transaction() {
                            @Override
                            public void execute(Realm realm) {
                                realm.where(Dog.class).findFirst().setAge(17);
                            }
                        });
                        break;

                    case 2:
                        // Step 4: Responds to relevant change.
                        assertEquals(17, dog.getAge());
                        looperThread.testComplete();
                        break;
                    default:
                        fail();
                }
            }
        });
    }

