    // UC 1 Async RealmObject
    @Test
    @RunTestInLooperThread
    public void callback_with_relevant_commit_realmobject_async() {
        final Realm realm = looperThread.realm;

        // Step 1: Trigger global Realm change listener
        realm.beginTransaction();
        final Dog akamaru = realm.createObject(Dog.class);
        akamaru.setName("Akamaru");
        realm.commitTransaction();

        final Dog dog = realm.where(Dog.class).findFirstAsync();
        assertTrue(dog.load());

        dog.addChangeListener(new RealmChangeListener() {
            @Override
            public void onChange() {
                switch (typebasedCommitInvocations.incrementAndGet()) {
                    case 1:
                        assertEquals("Akamaru", dog.getName());
                        assertEquals(0, dog.getAge());
                        break;

                    case 2:
                        // Step 4: Respond to relevant change
                        assertEquals(17, dog.getAge());
                        break;
                }
            }
        });

        realm.addChangeListener(new RealmChangeListener() {
            @Override
            public void onChange() {
                int commits = globalCommitInvocations.incrementAndGet();
                switch (commits) {
                    case 1:
                        // Step 2: Trigger non-related commit
                        realm.beginTransaction();
                        realm.commitTransaction();
                        break;

                    case 2:
                        // Step 3: Trigger related commit
                        realm.beginTransaction();
                        akamaru.setAge(17);
                        realm.commitTransaction();
                        break;

                    case 3:
                        // Step 5: Complete test
                        realm.handler.post(new Runnable() {
                            @Override
                            public void run() {
                                assertEquals(3, globalCommitInvocations.get());
                                assertEquals(2, typebasedCommitInvocations.get());
                                looperThread.testComplete();
                            }
                        });

                }
            }
        });
    }

