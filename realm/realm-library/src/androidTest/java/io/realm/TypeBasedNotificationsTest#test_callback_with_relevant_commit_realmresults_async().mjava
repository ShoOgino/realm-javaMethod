    // UC 1 Async RealmResults
    public void test_callback_with_relevant_commit_realmresults_async() {
        handler.post(new Runnable() {
            @Override
            public void run() {
                realm = Realm.getInstance(configuration);
                realm.addChangeListener(new RealmChangeListener() {
                    @Override
                    public void onChange() {
                        if (globalCommitInvocations.incrementAndGet() == 3) {
                            realm.handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    signalTestFinished.countDown();
                                }
                            });
                        }
                    }
                });

                final RealmResults<Dog> dogs = realm.where(Dog.class).findAllAsync();
                assertTrue(dogs.load());
                dogs.addChangeListener(new RealmChangeListener() {
                    @Override
                    public void onChange() {
                        assertEquals(1, dogs.size());
                        assertEquals("Akamaru", dogs.get(0).getName());
                        typebasedCommitInvocations.incrementAndGet();
                    }
                });

                realm.beginTransaction();
                realm.commitTransaction();

                realm.beginTransaction();
                Dog akamaru = realm.createObject(Dog.class);
                akamaru.setName("Akamaru");
                realm.commitTransaction();

                realm.beginTransaction();
                akamaru.setAge(17);
                realm.commitTransaction();

            }
        });
        TestHelper.awaitOrFail(signalTestFinished);
        assertEquals(2, typebasedCommitInvocations.get());
    }

