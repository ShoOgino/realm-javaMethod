    @Test
    public void schemaIndexCacheIsUpdatedAfterSchemaChange() {
        final CatRealmProxy.CatColumnInfo catColumnInfo;
        catColumnInfo = (CatRealmProxy.CatColumnInfo) realm.schema.columnIndices.getColumnInfo(Cat.class);

        final long nameIndex = catColumnInfo.nameIndex;
        final AtomicLong nameIndexNew = new AtomicLong(-1L);

        // change column index of "name"
        realm.executeTransaction(new Realm.Transaction() {
            @Override
            public void execute(Realm realm) {
                final Table catTable = realm.getSchema().getTable(Cat.CLASS_NAME);
                final long nameIndex = catTable.getColumnIndex(Cat.FIELD_NAME);
                catTable.removeColumn(nameIndex);
                final long newIndex = catTable.addColumn(RealmFieldType.STRING,
                        Cat.FIELD_NAME, true);

                realm.setVersion(realm.getConfiguration().getSchemaVersion() + 1);

                nameIndexNew.set(newIndex);
            }
        });
        // we need â†“ to update index cache if the schema version was changed in the same thread.
        realm.sharedRealm.invokeSchemaChangeListenerIfSchemaChanged();

        // check if the index was changed
        assertNotEquals(nameIndex, nameIndexNew);

        // check if index in the ColumnInfo is updated
        assertEquals(nameIndexNew.get(), catColumnInfo.nameIndex);
        assertEquals(nameIndexNew.get(), (long) catColumnInfo.getIndicesMap().get(Cat.FIELD_NAME));

        // check by actual get and set
        realm.executeTransaction(new Realm.Transaction() {
            @Override
            public void execute(Realm realm) {
                final Cat cat = realm.createObject(Cat.class);
                cat.setName("pochi");
            }
        });
        //noinspection ConstantConditions
        assertEquals("pochi", realm.where(Cat.class).findFirst().getName());
    }

