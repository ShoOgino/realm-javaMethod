    @Test
    public void schemaIndexCacheIsUpdatedAfterSchemaChange() {
        final AtomicLong nameIndexNew = new AtomicLong(-1L);

        // get the pre-update index for the "name" column.
        CatRealmProxy.CatColumnInfo catColumnInfo
                = (CatRealmProxy.CatColumnInfo) realm.getSchema().getColumnInfo(Cat.class);
        final long nameIndex = catColumnInfo.nameIndex;

        // Change the index of the column "name".
        realm.executeTransaction(new Realm.Transaction() {
            @Override
            public void execute(Realm realm) {
                final Table catTable = realm.getSchema().getTable(Cat.CLASS_NAME);
                final long nameIndex = catTable.getColumnIndex(Cat.FIELD_NAME);
                catTable.removeColumn(nameIndex);
                final long newIndex = catTable.addColumn(RealmFieldType.STRING, Cat.FIELD_NAME, true);
                realm.setVersion(realm.getConfiguration().getSchemaVersion() + 1);
                nameIndexNew.set(newIndex);
            }
        });

        // We need to update index cache if the schema version was changed in the same thread.
        realm.sharedRealm.invokeSchemaChangeListenerIfSchemaChanged();

        // Verify that the index has changed.
        assertNotEquals(nameIndex, nameIndexNew);

        // Verify that the index in the ColumnInfo has been updated.
        catColumnInfo = (CatRealmProxy.CatColumnInfo) realm.getSchema().getColumnInfo(Cat.class);
        assertEquals(nameIndexNew.get(), catColumnInfo.nameIndex);
        assertEquals(nameIndexNew.get(), (long) catColumnInfo.getColumnIndex(Cat.FIELD_NAME));

        // Checks by actual get and set.
        realm.executeTransaction(new Realm.Transaction() {
            @Override
            public void execute(Realm realm) {
                final Cat cat = realm.createObject(Cat.class);
                cat.setName("pochi");
            }
        });
        //noinspection ConstantConditions
        assertEquals("pochi", realm.where(Cat.class).findFirst().getName());
    }

