    @Test
    public void rawPredicate_useJavaNames() {

        // Java Field names
        RealmResults<ClassWithValueDefinedNames> results = realm.where(ClassWithValueDefinedNames.class)
                .rawPredicate("field = 'Foo'")
                .findAll();
        assertTrue(results.isEmpty());

        // Internal field name
        results = realm.where(ClassWithValueDefinedNames.class)
                .rawPredicate("my-field-name = 'Foo'")
                .findAll();
        assertTrue(results.isEmpty());

        // Linking Objects using the computed field
        results = realm.where(ClassWithValueDefinedNames.class)
                .rawPredicate("parents.@count = 0")
                .findAll();
        assertTrue(results.isEmpty());

        // Linking Objects using dynamic query with internal name for both class and property
        results = realm.where(ClassWithValueDefinedNames.class)
                .rawPredicate("@links.my-class-name.object-link.@count = 0")
                .findAll();
        assertTrue(results.isEmpty());

        // Linking Objects using dynamic query with internal name for class and alias for property
        results = realm.where(ClassWithValueDefinedNames.class)
                .rawPredicate("@links.my-class-name.objectLink.@count = 0")
                .findAll();
        assertTrue(results.isEmpty());

        // Linking Objects using dynamic query with alias for class and internal name for property
        results = realm.where(ClassWithValueDefinedNames.class)
                .rawPredicate("@links.ClassWithValueDefinedNames.object-link.@count = 0")
                .findAll();
        assertTrue(results.isEmpty());

        // Linking Objects using dynamic query with alias both class and property
        results = realm.where(ClassWithValueDefinedNames.class)
                .rawPredicate("@links.ClassWithValueDefinedNames.objectLink.@count = 0")
                .findAll();
        assertTrue(results.isEmpty());
    }

