    /**
     * Table validation should fail if the backlinked column points to a field of the wrong type.
     */
    @Test
    public void migration_backlinkedSourceFieldWrongType() {
        final String realmName = "backlinks-sourceFieldWrongType.realm";

        RealmConfiguration realmConfig = configFactory.createConfigurationBuilder()
                .name(realmName)
                .schema(BacklinksTarget.class, BacklinksSource.class)
                .build();

        // Mock the schema info so the only difference compared with the original schema is that BacklinksSource.child
        // type is changed to BacklinksSource from BacklinksTarget.
        OsObjectSchemaInfo targetSchemaInfo = new OsObjectSchemaInfo.Builder("BacklinksTarget", false, 1, 1)
                .addPersistedProperty("id", RealmFieldType.INTEGER, !Property.PRIMARY_KEY, !Property.INDEXED, Property.REQUIRED)
                .addComputedLinkProperty("parents", "BacklinksSource", "child")
                .build();
        OsObjectSchemaInfo sourceSchemaInfo = new OsObjectSchemaInfo.Builder("BacklinksSource", false, 2, 0)
                .addPersistedProperty("name", RealmFieldType.STRING, !Property.PRIMARY_KEY, !Property.INDEXED, !Property.REQUIRED)
                .addPersistedLinkProperty("child", RealmFieldType.OBJECT,
                        "BacklinksSource"/*"BacklinksTarget" is the original value*/)
                .build();
        Map<Class<? extends RealmModel>, OsObjectSchemaInfo> infoMap =
                new HashMap<Class<? extends RealmModel>, OsObjectSchemaInfo>();
        infoMap.put(BacklinksTarget.class, targetSchemaInfo);
        infoMap.put(BacklinksSource.class, sourceSchemaInfo);

        RealmProxyMediator mediator = spy(realmConfig.getSchemaMediator());
        when(mediator.getExpectedObjectSchemaInfoMap()).thenReturn(infoMap);
        RealmConfiguration spyConfig = spy(realmConfig);
        when(spyConfig.getSchemaMediator()).thenReturn(mediator);

        try {
            Realm localRealm = Realm.getInstance(spyConfig);
            localRealm.close();
            fail();
        } catch (IllegalStateException expected) {
            assertThat(expected.getMessage(), CoreMatchers.containsString(
                    "Property 'BacklinksSource.child' declared as origin of linking objects property 'BacklinksTarget.parents' links to type 'BacklinksSource'"
            ));
        }
    }

