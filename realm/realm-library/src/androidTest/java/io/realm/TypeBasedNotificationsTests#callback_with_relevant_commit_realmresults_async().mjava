    // UC 1 Async RealmResults.
    @Test
    @RunTestInLooperThread
    public void callback_with_relevant_commit_realmresults_async() {
        final Realm realm = looperThread.getRealm();

        // Step 1: Creates object.
        realm.beginTransaction();
        final Dog akamaru = realm.createObject(Dog.class);
        akamaru.setName("Akamaru");
        realm.commitTransaction();

        final RealmResults<Dog> dogs = realm.where(Dog.class).findAllAsync();
        looperThread.keepStrongReference(dogs);
        dogs.addChangeListener(new RealmChangeListener<RealmResults<Dog>>() {
            @Override
            public void onChange(RealmResults<Dog> object) {
                // Step 4: Responds to relevant change.
                int commits = typebasedCommitInvocations.incrementAndGet();
                switch (commits) {
                    case 1:
                        // Async query returns.
                        assertEquals(1, dogs.size());
                        assertEquals("Akamaru", dogs.get(0).getName());
                        // Step 2: Trigger non-related commit. If this triggered the results listener,
                        // assertion will happen there.
                        realm.executeTransactionAsync(new Realm.Transaction() {
                            @Override
                            public void execute(Realm realm) {
                            }
                        });

                        // Step 3: Triggers related commit.
                        realm.executeTransactionAsync(new Realm.Transaction() {
                            @Override
                            public void execute(Realm realm) {
                                realm.where(Dog.class).findFirst().setAge(17);
                            }
                        });
                        break;
                    case 2:
                        assertEquals(17, dogs.get(0).getAge());
                        looperThread.testComplete();
                        break;
                    default:
                        fail();
                }
            }
        });
    }

