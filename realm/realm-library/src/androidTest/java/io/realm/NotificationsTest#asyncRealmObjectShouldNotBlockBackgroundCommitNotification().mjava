    // The presence of async RealmResults blocks any `REALM_CHANGE` notification . We make sure in this test that all
    // Realm listeners will be notified regardless of the presence of an async RealmObject. RealmObjects are special
    // in the sense that once you got a row accessor to that object, it is automatically up to date as soon as you
    // call advance_read().
    @Test
    @RunTestInLooperThread
    public void asyncRealmObjectShouldNotBlockBackgroundCommitNotification() {
        final AtomicInteger numberOfRealmCallbackInvocation = new AtomicInteger(0);
        final CountDownLatch signalClosedRealm = new CountDownLatch(1);
        final Realm realm = looperThread.getRealm();
        realm.addChangeListener(new RealmChangeListener<Realm>() {
            @Override
            public void onChange(final Realm realm) {
                switch (numberOfRealmCallbackInvocation.incrementAndGet()) {
                    case 1: {
                        // First commit.
                        Dog dog = realm.where(Dog.class).findFirstAsync();
                        assertTrue(dog.load());
                        dog.addChangeListener(new RealmChangeListener<Dog>() {
                            @Override
                            public void onChange(Dog dog) {
                            }
                        });

                        new Thread() {
                            @Override
                            public void run() {
                                Realm threadRealm = Realm.getInstance(realm.getConfiguration());
                                threadRealm.beginTransaction();
                                threadRealm.createObject(Dog.class);
                                threadRealm.commitTransaction();
                                threadRealm.close();
                                signalClosedRealm.countDown();
                            }
                        }.start();
                        break;
                    }
                    case 2: {
                        // Finishes test.
                        TestHelper.awaitOrFail(signalClosedRealm);
                        looperThread.testComplete();
                        break;
                    }
                }
            }
        });

        looperThread.postRunnable(new Runnable() {
            @Override
            public void run() {
                realm.beginTransaction();
                realm.createObject(Dog.class);
                realm.commitTransaction();
            }
        });
    }

