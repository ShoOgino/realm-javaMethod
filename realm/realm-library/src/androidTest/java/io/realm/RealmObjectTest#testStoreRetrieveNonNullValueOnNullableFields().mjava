    // store and retrieve non-null values when field can contain null strings
    public void testStoreRetrieveNonNullValueOnNullableFields() {
        final String testString = "FooBar";
        final byte[] testBytes = new byte[] {42};
        final Date testDate = newDate(2000, 1, 1);
        testRealm.beginTransaction();
        NullTypes nullTypes = testRealm.createObject(NullTypes.class);
        // 1 String
        nullTypes.setFieldStringNull(testString);
        // 2 Bytes
        nullTypes.setFieldBytesNull(testBytes);
        // 3 Boolean
        nullTypes.setFieldBooleanNull(true);
        // 4 Byte
        nullTypes.setFieldByteNull((byte)42);
        // 5 Short
        nullTypes.setFieldShortNull((short)42);
        // 6 Integer
        nullTypes.setFieldIntegerNull(42);
        // 7 Long
        nullTypes.setFieldLongNull(42L);
        // 8 Float
        nullTypes.setFieldFloatNull(42.42F);
        // 9 Double
        nullTypes.setFieldDoubleNull(42.42D);
        // 10 Date
        nullTypes.setFieldDateNull(testDate);
        testRealm.commitTransaction();

        nullTypes = testRealm.where(NullTypes.class).findFirst();
        // 1 String
        assertEquals(testString, nullTypes.getFieldStringNull());
        // 2 Bytes
        assertArrayEquals(testBytes, nullTypes.getFieldBytesNull());
        // 3 Boolean
        assertTrue(nullTypes.getFieldBooleanNull());
        // 4 Byte
        assertEquals((byte)42, (byte)nullTypes.getFieldByteNull().intValue());
        // 5 Short
        assertEquals((short)42, (short)nullTypes.getFieldShortNull().intValue());
        // 6 Integer
        assertEquals(42, nullTypes.getFieldIntegerNull().intValue());
        // 7 Long
        assertEquals(42L, nullTypes.getFieldLongNull().longValue());
        // 8 Float
        assertEquals(42.42F, nullTypes.getFieldFloatNull());
        // 9 Double
        assertEquals(42.42D, nullTypes.getFieldDoubleNull());
        // 10 Date
        assertEquals(testDate.getTime(), nullTypes.getFieldDateNull().getTime());
    }

