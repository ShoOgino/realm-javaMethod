    @Test
    @UiThreadTest
    public void realmList_emittedChangesetOnSubscribe() {
        final AtomicBoolean subscribedNotified = new AtomicBoolean(false);
        realm.beginTransaction();
        final RealmList<Dog> list = realm.createObject(AllTypes.class).getColumnRealmList();
        realm.commitTransaction();
        subscription = list.asChangesetObservable().subscribe(new Consumer<CollectionChange<RealmList<Dog>>>() {
            @Override
            public void accept(CollectionChange<RealmList<Dog>> change) throws Exception {
                assertEquals(list, change.getCollection());
                assertNull(change.getChangeset());
                subscribedNotified.set(true);
            }
        });
        assertTrue(subscribedNotified.get());
        subscription.dispose();
    }

