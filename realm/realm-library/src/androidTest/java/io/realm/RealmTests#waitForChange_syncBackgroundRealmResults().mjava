    @Test
    public void waitForChange_syncBackgroundRealmResults() throws InterruptedException {
        final CountDownLatch bgRealmOpened = new CountDownLatch(1);
        final CountDownLatch bgRealmClosed = new CountDownLatch(1);
        final AtomicBoolean bgRealmChangeResult = new AtomicBoolean(false);
        final AtomicLong bgRealmResultSize = new AtomicLong(0);

        // Wait in background
        final CountDownLatch signalTestFinished = new CountDownLatch(1);
        Thread thread = new Thread(new Runnable() {
            @Override
            public void run() {
                Realm realm = Realm.getInstance(realmConfig);
                RealmResults<AllTypes> results = realm.where(AllTypes.class).findAll();
                // First makes sure the results is empty.
                bgRealmResultSize.set(results.size());
                bgRealmOpened.countDown();
                bgRealmChangeResult.set(realm.waitForChange());
                bgRealmResultSize.set(results.size());
                realm.close();
                bgRealmClosed.countDown();
            }
        });
        thread.start();

        TestHelper.awaitOrFail(bgRealmOpened);
        // Background result should be empty.
        assertEquals(0, bgRealmResultSize.get());
        populateTestRealm();
        TestHelper.awaitOrFail(bgRealmClosed);
        assertTrue(bgRealmChangeResult.get());
        // Once RealmResults are synchronized after waitForChange, the result size should be what we expect.
        assertEquals(TEST_DATA_SIZE, bgRealmResultSize.get());
    }

