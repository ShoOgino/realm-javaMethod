    /**
     * Table validation should fail if the backlinked column points to a non-existent class.
     * The realm `backlinks-missingSourceClass.realm` contains two tables very like those
     * defined by `BacklinksSource` and `BacklinksTarget`.  In it, though, the source class
     * is named XXXBacklinksSource, like so:
     * <pre>
     * {@code
     * @LinkingObjects("child")
     *     private final RealmResults<XXXBacklinksSource> parents = null;
     * }
     * </pre>
     * If the both classes were present in the configuration, the test would fail because there
     * is no class named BacklinksSource in the Realm.  Since the configuration contains only the
     * single class `BacklinksTarget`, though, basic validation should pass. Backlink validation,
     * however, should fail, seeking the `BacklinksSource` table.
     */
    @Ignore("Need to rebuild the test library")
    @Test
    public void migration_backlinkedSourceClassDoesntExist() throws IOException {
        final String realmName = "backlinks-missingSourceClass.realm";

        RealmConfiguration realmConfig = configFactory.createConfigurationBuilder()
                .name(realmName)
                .schema(BacklinksTarget.class)
                .build();

        try {
            configFactory.copyRealmFromAssets(context, realmName, realmName);

            Realm localRealm = Realm.getInstance(realmConfig);
            localRealm.close();
            fail("A migration should have been required");
        } catch (IOException e) {
            fail("Failed copying realm");
        } catch (RealmMigrationNeededException expected) {
            assertTrue(expected.getMessage().contains("Cannot find source class"));
        } finally {
            Realm.deleteRealm(realmConfig);
        }
    }

