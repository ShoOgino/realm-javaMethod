    @Test
    public void rename_noSimilarPrimaryKeyWithOldSchema() {
        buildInitialMigrationSchema(MigrationClassRenamed.CLASS_NAME, true);

        RealmMigration migration = new RealmMigration() {
            @Override
            public void migrate(DynamicRealm realm, long oldVersion, long newVersion) {
                // Let us rename the old schema.
                realm.getSchema()
                        .rename(MigrationPrimaryKey.CLASS_NAME, MigrationClassRenamed.CLASS_NAME);

                // Then recreates the original schema to see if Realm is going to get confused.
                // Unlike the first time with buildInitialMigrationSchema(), we will not have a primary key.
                realm.getSchema()
                        .create(MigrationPrimaryKey.CLASS_NAME)
                        .addField(MigrationPrimaryKey.FIELD_FIRST,   Byte.class)
                        .addField(MigrationPrimaryKey.FIELD_SECOND,  Short.class)
                        .addField(MigrationPrimaryKey.FIELD_PRIMARY, String.class)
                        .addField(MigrationPrimaryKey.FIELD_FOURTH,  Integer.class)
                        .addField(MigrationPrimaryKey.FIELD_FIFTH,   Long.class);
            }
        };
        RealmConfiguration realmConfig = configFactory.createConfigurationBuilder()
                .schemaVersion(1)
                .schema(MigrationClassRenamed.class)
                .migration(migration)
                .build();
        // Trigger migration
        Realm realm = Realm.getInstance(realmConfig);
        realm.close();

        DynamicRealm dynamicRealm = DynamicRealm.getInstance(realmConfig);
        try {
            assertTrue(dynamicRealm.getSchema().get(MigrationClassRenamed.CLASS_NAME).hasPrimaryKey());
            assertFalse(dynamicRealm.getSchema().get(MigrationPrimaryKey.CLASS_NAME).hasPrimaryKey());
        } finally {
            dynamicRealm.close();
        }
    }

