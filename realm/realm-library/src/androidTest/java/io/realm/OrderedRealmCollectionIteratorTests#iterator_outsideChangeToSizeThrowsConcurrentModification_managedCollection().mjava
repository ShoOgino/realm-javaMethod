    @Test
    public void iterator_outsideChangeToSizeThrowsConcurrentModification_managedCollection() {
        if (skipTest(CollectionClass.REALMRESULTS, CollectionClass.UNMANAGED_REALMLIST)) {
            return;
        }

        // Tests all RealmCollection methods.
        for (RealmCollectionMethod method : RealmCollectionMethod.values()) {
            collection = createCollection(realm, collectionClass, TEST_SIZE);
            realm.beginTransaction();
            collection.remove(0); // Removes object creating circular dependency which will crash deleteAll.
            Iterator<AllJavaTypes> it = collection.iterator();
            switch (method) {
                case DELETE_ALL_FROM_REALM:
                    collection.deleteAllFromRealm(); break;

                // Does not impact size, so does not trigger ConcurrentModificationException.
                case WHERE:
                case MIN:
                case MAX:
                case SUM:
                case AVERAGE:
                case MIN_DATE:
                case MAX_DATE:
                case IS_VALID:
                case IS_MANAGED:
                    realm.cancelTransaction();
                    continue;
                default:
                    fail("Unknown method: " + method);
            }
            checkIteratorThrowsConcurrentModification(realm, method.toString(), it);
        }

        // Tests all OrderedRealmCollection methods.
        for (OrderedRealmCollectionMethod method : OrderedRealmCollectionMethod.values()) {
            collection = createCollection(realm, collectionClass, TEST_SIZE);
            realm.beginTransaction();
            Iterator<AllJavaTypes> it = collection.iterator();
            switch (method) {
                case DELETE_INDEX: collection.deleteFromRealm(0); break;
                case DELETE_FIRST: collection.deleteFirstFromRealm(); break;
                case DELETE_LAST: collection.deleteLastFromRealm(); break;

                // Does not impact size, so does not trigger ConcurrentModificationException.
                case SORT:
                case SORT_FIELD:
                case SORT_2FIELDS:
                case SORT_MULTI:
                    realm.cancelTransaction();
                    continue;
                default:
                    fail("Unknown method: " + method);

            }
            checkIteratorThrowsConcurrentModification(realm, method.toString(), it);
        }
    }

