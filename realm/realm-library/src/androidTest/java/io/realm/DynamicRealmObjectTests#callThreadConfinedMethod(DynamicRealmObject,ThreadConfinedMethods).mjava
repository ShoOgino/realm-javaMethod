    @SuppressWarnings({"ResultOfMethodCallIgnored", "EqualsWithItself", "SelfEquals"})
    private static void callThreadConfinedMethod(DynamicRealmObject obj, ThreadConfinedMethods method) {
        switch (method) {
            case GET_BOOLEAN:           obj.getBoolean(AllJavaTypes.FIELD_BOOLEAN);                 break;
            case GET_BYTE:              obj.getByte(AllJavaTypes.FIELD_BYTE);                       break;
            case GET_SHORT:             obj.getShort(AllJavaTypes.FIELD_SHORT);                     break;
            case GET_INT:               obj.getInt(AllJavaTypes.FIELD_INT);                         break;
            case GET_LONG:              obj.getLong(AllJavaTypes.FIELD_LONG);                       break;
            case GET_FLOAT:             obj.getFloat(AllJavaTypes.FIELD_FLOAT);                     break;
            case GET_DOUBLE:            obj.getDouble(AllJavaTypes.FIELD_DOUBLE);                   break;
            case GET_BLOB:              obj.getBlob(AllJavaTypes.FIELD_BINARY);                     break;
            case GET_STRING:            obj.getString(AllJavaTypes.FIELD_STRING);                   break;
            case GET_DATE:              obj.getDate(AllJavaTypes.FIELD_DATE);                       break;
            case GET_OBJECT:            obj.getObject(AllJavaTypes.FIELD_OBJECT);                   break;
            case GET_LIST:              obj.getList(AllJavaTypes.FIELD_LIST);                       break;
            case GET_PRIMITIVE_LIST:    obj.getList(AllJavaTypes.FIELD_STRING_LIST, String.class);  break;
            case GET:                   obj.get(AllJavaTypes.FIELD_LONG);                           break;

            case SET_BOOLEAN:           obj.setBoolean(AllJavaTypes.FIELD_BOOLEAN, true);                           break;
            case SET_BYTE:              obj.setByte(AllJavaTypes.FIELD_BYTE,       (byte) 1);                       break;
            case SET_SHORT:             obj.setShort(AllJavaTypes.FIELD_SHORT,     (short) 1);                      break;
            case SET_INT:               obj.setInt(AllJavaTypes.FIELD_INT,         1);                              break;
            case SET_LONG:              obj.setLong(AllJavaTypes.FIELD_LONG,       1L);                             break;
            case SET_FLOAT:             obj.setFloat(AllJavaTypes.FIELD_FLOAT,     1F);                             break;
            case SET_DOUBLE:            obj.setDouble(AllJavaTypes.FIELD_DOUBLE,   1D);                             break;
            case SET_BLOB:              obj.setBlob(AllJavaTypes.FIELD_BINARY,     new byte[] {1, 2, 3});           break;
            case SET_STRING:            obj.setString(AllJavaTypes.FIELD_STRING,   "12345");                        break;
            case SET_DATE:              obj.setDate(AllJavaTypes.FIELD_DATE,       new Date(1L));                   break;
            case SET_OBJECT:            obj.setObject(AllJavaTypes.FIELD_OBJECT,   obj);                            break;
            case SET_LIST:              obj.setList(AllJavaTypes.FIELD_LIST,       new RealmList<>(obj));           break;
            case SET_PRIMITIVE_LIST:    obj.setList(AllJavaTypes.FIELD_STRING_LIST,new RealmList<String>("foo"));   break;
            case SET:                   obj.set(AllJavaTypes.FIELD_LONG,           1L);                             break;

            case IS_NULL:     obj.isNull(AllJavaTypes.FIELD_OBJECT);           break;
            case SET_NULL:    obj.setNull(AllJavaTypes.FIELD_OBJECT);          break;

            case HAS_FIELD:       obj.hasField(AllJavaTypes.FIELD_OBJECT);     break;
            case GET_FIELD_NAMES: obj.getFieldNames();                         break;
            case GET_TYPE:        obj.getType();                               break;
            case GET_FIELD_TYPE:  obj.getFieldType(AllJavaTypes.FIELD_OBJECT); break;

            case HASH_CODE:   obj.hashCode();  break;
            case EQUALS:      obj.equals(obj); break;
            case TO_STRING:   obj.toString();  break;

            default:
                throw new AssertionError("missing case for " + method);
        }
    }

