    //UC 0 using Realm.copyToRealmOrUpdate
    @Test
    @RunTestInLooperThread
    public void callback_should_trigger_for_createOrUpdateObjectFromJson_from_JSONObject() {
        final Realm realm = looperThread.realm;
        realm.addChangeListener(new RealmChangeListener() {
            @Override
            public void onChange() {
                if (globalCommitInvocations.incrementAndGet() == 3) {
                    realm.handler.post(new Runnable() {
                        @Override
                        public void run() {
                            assertEquals(1, typebasedCommitInvocations.get());
                            looperThread.testComplete();
                        }
                    });
                }
            }
        });

        try {
            AllTypesPrimaryKey obj = new AllTypesPrimaryKey();
            obj.setColumnLong(1);
            obj.setColumnString("Foo");

            realm.beginTransaction();
            realm.copyToRealm(obj);
            realm.commitTransaction();


            JSONObject json = new JSONObject();
            json.put("columnLong", 1);
            json.put("columnString", "bar");

            realm.beginTransaction();
            final AllTypesPrimaryKey newObj = realm.createOrUpdateObjectFromJson(AllTypesPrimaryKey.class, json);
            realm.commitTransaction();

            newObj.addChangeListener(new RealmChangeListener() {
                @Override
                public void onChange() {
                    assertEquals(1, realm.allObjects(AllTypesPrimaryKey.class).size());
                    assertEquals("bar", newObj.getColumnString());
                    assertTrue(newObj.getColumnBoxedBoolean());
                    typebasedCommitInvocations.incrementAndGet();
                }
            });

            realm.beginTransaction();
            newObj.setColumnBoxedBoolean(Boolean.TRUE);
            realm.commitTransaction();

        } catch (JSONException e) {
            fail(e.getMessage());
        }
    }

