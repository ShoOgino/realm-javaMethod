    // Test that that a WeakReferenceListener can be removed.
    // This test is not a proper GC test, but just ensures that listeners can be removed from the list of weak listeners
    // without throwing an exception.
    @Test
    @RunTestInLooperThread
    public void removingWeakReferenceListener() throws InterruptedException {
/*        final AtomicInteger counter = new AtomicInteger(0);
        final Realm realm = looperThread.realm;
        RealmChangeListener<Realm> listenerA = new RealmChangeListener<Realm>() {
            @Override
            public void onChange(Realm object) {
                counter.incrementAndGet();
            }
        };
        RealmChangeListener<Realm> listenerB = new RealmChangeListener<Realm>() {
            @Override
            public void onChange(Realm object) {
                assertEquals(0, counter.get());
                assertEquals(1, realm.handlerController.weakChangeListeners.size());
                looperThread.testComplete();
            }
        };
        realm.handlerController.addChangeListenerAsWeakReference(listenerA);

        // There is no guaranteed way to release the WeakReference,
        // just clear it.
        for (WeakReference<RealmChangeListener<? extends BaseRealm>> weakRef : realm.handlerController.weakChangeListeners) {
            weakRef.clear();
        }

        realm.handlerController.addChangeListenerAsWeakReference(listenerB);

        realm.beginTransaction();
        realm.createObject(AllTypes.class);
        realm.commitTransaction();*/
    }

