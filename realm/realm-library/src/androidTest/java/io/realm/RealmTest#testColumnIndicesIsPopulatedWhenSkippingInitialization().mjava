    // Realm validation & initialization is done once, still ColumnIndices
    // should be populated for the subsequent Realm sharing the same configuration
    // even if we skip initialization & validation
    public void testColumnIndicesIsPopulatedWhenSkippingInitialization() throws Throwable {
        final Throwable[] threadAssertionError = new Throwable[1];
        final CountDownLatch callerThreadCompleted = new CountDownLatch(1);
        final CountDownLatch signalBgFinished = new CountDownLatch(1);
        final RealmConfiguration realmConfiguration = TestHelper.
                createConfiguration(getContext(), "testColumnIndicesIsPopulatedWhenSkippingInitialization");
        Realm.deleteRealm(realmConfiguration);
        Realm realm = Realm.getInstance(realmConfiguration);

        realm.beginTransaction();
        realm.createObject(AllTypes.class).setColumnLong(42);
        realm.commitTransaction();

        RealmResults<AllTypes> all = realm.where(AllTypes.class).findAll();
        assertNotNull(all);
        assertEquals(1, all.size());
        assertEquals(42, all.get(0).getColumnLong());

        // open a background Realm
        new Thread() {
            @Override
            public void run() {
                try {
                    callerThreadCompleted.await();
                    Realm backgroundRealm = Realm.getInstance(realmConfiguration);

                    backgroundRealm.beginTransaction();
                    backgroundRealm.createObject(AllTypes.class).setColumnLong(7);
                    backgroundRealm.commitTransaction();

                    RealmResults<AllTypes> allBg = backgroundRealm.where(AllTypes.class).findAll();
                    assertNotNull(allBg);
                    assertEquals(2, allBg.size());
                    assertEquals(42, allBg.get(0).getColumnLong());
                    assertEquals(7, allBg.get(1).getColumnLong());

                    backgroundRealm.close();
                } catch (InterruptedException e) {
                    threadAssertionError[0] = e;
                } catch (AssertionFailedError e) {
                    threadAssertionError[0] = e;

                } finally {
                    signalBgFinished.countDown();
                }
            }
        }.start();

        callerThreadCompleted.countDown();
        signalBgFinished.await();
        realm.close();
        if (threadAssertionError[0] != null)
            throw threadAssertionError[0];
    }

