    @Test
    @RunTestInLooperThread
    public void dynamicRealmResults_emittedChangesetOnUpdate() {
        final DynamicRealm dynamicRealm = DynamicRealm.getInstance(looperThread.getConfiguration());
        RealmResults<DynamicRealmObject> results = dynamicRealm.where(AllTypes.CLASS_NAME).findAll();

        subscription = results.asChangesetObservable()
            .subscribe(change -> {
                RealmResults<DynamicRealmObject> collection = change.getCollection();
                if (collection.isLoaded() && collection.isEmpty()) {
                    looperThread.postRunnable(() -> {
                        DynamicRealm dynRealm = DynamicRealm.getInstance(looperThread.getConfiguration());
                        dynRealm.executeTransaction(dr -> {
                            dr.createObject(AllTypes.CLASS_NAME);
                        });
                        dynRealm.close();
                    });
                }

                if (collection.isLoaded() && collection.size() == 1) {
                    assertEquals(1, change.getChangeset().getInsertions().length);
                    disposeSuccessfulTest(dynamicRealm);
                }
            });
    }

