    @Test
    public void distinctMultiArgs_emptyField() {
        final long numberOfBlocks = 25;
        final long numberOfObjects = 10;
        populateForDistinct(realm, numberOfBlocks, numberOfObjects, false);

        RealmQuery<AnnotationIndexTypes> query = realm.where(AnnotationIndexTypes.class);
        // An empty string field in the middle.
        try {
            query.distinct(AnnotationIndexTypes.FIELD_INDEX_BOOL, "", AnnotationIndexTypes.FIELD_INDEX_INT);
        } catch (IllegalArgumentException ignored) {
        }
        // An empty string field at the end.
        try {
            query.distinct(AnnotationIndexTypes.FIELD_INDEX_BOOL, AnnotationIndexTypes.FIELD_INDEX_INT, "");
        } catch (IllegalArgumentException ignored) {
        }
        // A null string field in the middle.
        try {
            query.distinct(AnnotationIndexTypes.FIELD_INDEX_BOOL, (String) null, AnnotationIndexTypes.FIELD_INDEX_INT);
        } catch (IllegalArgumentException ignored) {
        }
        // A null string field at the end.
        try {
            query.distinct(AnnotationIndexTypes.FIELD_INDEX_BOOL, AnnotationIndexTypes.FIELD_INDEX_INT, (String) null);
        } catch (IllegalArgumentException ignored) {
        }
        // (String) Null makes varargs a null array.
        try {
            query.distinct(AnnotationIndexTypes.FIELD_INDEX_BOOL, (String) null);
        } catch (IllegalArgumentException ignored) {
        }
        // Two (String) null for first and varargs fields.
        try {
            query.distinct((String) null, (String) null);
        } catch (IllegalArgumentException ignored) {
        }
        // "" & (String) null combination.
        try {
            query.distinct("", (String) null);
        } catch (IllegalArgumentException ignored) {
        }
        // "" & (String) null combination.
        try {
            query.distinct((String) null, "");
        } catch (IllegalArgumentException ignored) {
        }
        // Two empty fields tests.
        try {
            query.distinct("", "");
        } catch (IllegalArgumentException ignored) {
        }
    }

