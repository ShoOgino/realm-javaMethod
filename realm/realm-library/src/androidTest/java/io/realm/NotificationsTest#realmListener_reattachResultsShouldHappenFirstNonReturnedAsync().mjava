    // See https://github.com/realm/realm-android-adapters/issues/48
    // Step 1: Populate the db
    // Step 2: Create a async query
    // Step 3: Add listener to the async results
    //         Event Queue: |async callback| <- TOP
    // Step 4: Deletes object which will make the results contain a invalid object at this moment
    //         Right calling order: |Reattach      |   Wrong order: |async callback|  <- TOP
    //                              |async callback|                |Reattach      |
    // Step 5: Posted runnable called.
    //
    @Test
    @RunTestInLooperThread(/*step1*/before = PopulateOneAllTypes.class)
    public void realmListener_reattachResultsShouldHappenFirstNonReturnedAsync() {
        final Realm realm = looperThread.realm;

        // Step 2
        final RealmResults<AllTypes> asyncResults = realm.where(AllTypes.class).findAll();
        final RealmResults<AllTypes> results = realm.where(AllTypes.class).findAll();

        assertEquals(1, results.size());

        // Step 3
        looperThread.keepStrongReference.add(asyncResults);
        asyncResults.addChangeListener(new RealmChangeListener<RealmResults<AllTypes>>() {
            @Override
            public void onChange(RealmResults<AllTypes> element) {
                // Step 5
                assertEquals(0, asyncResults.size());
                assertEquals(0, results.size());
                looperThread.testComplete();
            }
        });

        // Step 4
        realm.executeTransaction(new Realm.Transaction() {
            @Override
            public void execute(Realm realm) {
                AllTypes allTypes = realm.where(AllTypes.class).findFirst();
                assertNotNull(allTypes);
                allTypes.deleteFromRealm();
                assertEquals(0, realm.where(AllTypes.class).count());
                assertFalse(results.get(0).isValid());
            }
        });
    }

