    @Test
    public void querySingleRelationDate() {
        RealmResults<Owner> owners1 = testRealm.where(Owner.class).equalTo("cat.birthday", new Date(6000)).findAll();
        assertEquals(1, owners1.size());
        assertEquals(12, owners1.first().getCat().getAge());

        RealmResults<Owner> none1 = testRealm.where(Owner.class).equalTo("cat.birthday", new Date(1000)).findAll();
        assertEquals(0, none1.size());

        RealmResults<Owner> owners2 = testRealm.where(Owner.class).notEqualTo("cat.birthday", new Date(1000)).findAll();
        assertEquals(1, owners2.size());
        assertEquals(12, owners2.first().getCat().getAge());

        RealmResults<Owner> none2 = testRealm.where(Owner.class).notEqualTo("cat.birthday", new Date(6000)).findAll();
        assertEquals(0, none2.size());

        RealmResults<Owner> owners3 = testRealm.where(Owner.class).greaterThan("cat.birthday", new Date(5)).findAll();
        assertEquals(1, owners3.size());
        assertEquals(12, owners3.first().getCat().getAge());

        RealmResults<Owner> owners4 = testRealm.where(Owner.class).greaterThanOrEqualTo("cat.birthday", new Date(5)).findAll();
        assertEquals(1, owners4.size());
        assertEquals(12, owners4.first().getCat().getAge());

        RealmResults<Owner> owners5 = testRealm.where(Owner.class).lessThan("cat.birthday", new Date(10000)).findAll();
        assertEquals(1, owners5.size());
        assertEquals(12, owners5.first().getCat().getAge());

        RealmResults<Owner> owners6 = testRealm.where(Owner.class).lessThanOrEqualTo("cat.birthday", new Date(10000)).findAll();
        assertEquals(1, owners6.size());
        assertEquals(12, owners6.first().getCat().getAge());

        try {
            testRealm.where(Owner.class).between("cat.birthday", new Date(1), new Date(10000)).findAll();
            fail();
        } catch (IllegalArgumentException ignored) {
            // Between does not support link queries.
        }
    }

