    @Test
    public void sortAndDistinctMixed() {
        // Dataset:
        // (FIELD_INDEX_LONG, FIELD_INDEX_INT, FIELD_INDEX_STRING)
        // (1, 1, "A")
        // (2, 1, "B")
        // (3, 1, "C")
        // Depending on the sorting, distinct should pick the first element encountered.
        // The order of sort/distinct in the query matters

        // Case 1: Selecting highest numbers
        RealmResults<AnnotationIndexTypes> results1a = realm.where(AnnotationIndexTypes.class)
                .sort(AnnotationIndexTypes.FIELD_INDEX_LONG, Sort.DESCENDING)
                .distinct(AnnotationIndexTypes.FIELD_INDEX_INT)
                .findAll();
        assertEquals(1, results1a.size());
        assertEquals(3, results1a.get(0).getIndexLong());

        RealmResults<AnnotationIndexTypes> results1b = realm.where(AnnotationIndexTypes.class)
                .distinct(AnnotationIndexTypes.FIELD_INDEX_INT)
                .sort(AnnotationIndexTypes.FIELD_INDEX_LONG, Sort.DESCENDING)
                .findAll();
        assertEquals(1, results1b.size());
        assertEquals(1, results1b.get(0).getIndexLong());

        // Case 1: Selecting lowest number numbers
        RealmResults<AnnotationIndexTypes> results2a = realm.where(AnnotationIndexTypes.class)
                .sort(AnnotationIndexTypes.FIELD_INDEX_LONG, Sort.ASCENDING)
                .distinct(AnnotationIndexTypes.FIELD_INDEX_INT)
                .findAll();
        assertEquals(1, results2a.size());
        assertEquals(1, results2a.get(0).getIndexLong());

        RealmResults<AnnotationIndexTypes> results2b = realm.where(AnnotationIndexTypes.class)
                .distinct(AnnotationIndexTypes.FIELD_INDEX_INT)
                .sort(AnnotationIndexTypes.FIELD_INDEX_LONG, Sort.ASCENDING)
                .findAll();
        assertEquals(1, results2b.size());
        assertEquals(1, results2b.get(0).getIndexLong());
    }

