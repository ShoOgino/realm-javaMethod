    //UC 0 using Realm.createOrUpdateObjectFromJson
    public void test_callback_should_trigger_for_createOrUpdateObjectFromJson_InputStream() {
        handler.post(new Runnable() {
            @Override
            public void run() {
                realm = Realm.getInstance(configuration);
                realm.addChangeListener(new RealmChangeListener() {
                    @Override
                    public void onChange() {
                        if (globalCommitInvocations.incrementAndGet() == 2) {
                            realm.handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    signalTestFinished.countDown();
                                }
                            });
                        }
                    }
                });

                try {
                    AllTypesPrimaryKey obj = new AllTypesPrimaryKey();
                    Date date = new Date(0);
                    // ID
                    obj.setColumnLong(1);
                    obj.setColumnBinary(new byte[]{1});
                    obj.setColumnBoolean(true);
                    obj.setColumnDate(date);
                    obj.setColumnDouble(1);
                    obj.setColumnFloat(1);
                    obj.setColumnString("1");
                    realm.beginTransaction();
                    realm.copyToRealm(obj);
                    realm.commitTransaction();

                    InputStream in = TestHelper.loadJsonFromAssets(getContext(), "all_types_primary_key_field_only.json");
                    realm.beginTransaction();
                    final AllTypesPrimaryKey objectFromJson = realm.createOrUpdateObjectFromJson(AllTypesPrimaryKey.class, in);
                    realm.commitTransaction();
                    in.close();

                    objectFromJson.addChangeListener(new RealmChangeListener() {
                        @Override
                        public void onChange() {
                            assertEquals("ObjectFromJson", objectFromJson.getColumnString());
                            assertEquals(1L, objectFromJson.getColumnLong());
                            assertEquals(1f, objectFromJson.getColumnFloat());
                            assertEquals(1d, objectFromJson.getColumnDouble());
                            assertEquals(true, objectFromJson.isColumnBoolean());
                            assertArrayEquals(new byte[]{1}, objectFromJson.getColumnBinary());
                            assertNull(objectFromJson.getColumnRealmObject());
                            assertEquals(0, objectFromJson.getColumnRealmList().size());
                            typebasedCommitInvocations.incrementAndGet();
                        }
                    });

                    realm.beginTransaction();
                    objectFromJson.setColumnString("ObjectFromJson");
                    realm.commitTransaction();

                } catch (IOException e) {
                    fail(e.getMessage());
                }
            }
        });

        TestHelper.awaitOrFail(signalTestFinished);
        assertEquals(1, typebasedCommitInvocations.get());
    }

