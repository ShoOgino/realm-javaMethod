    // UC 3 for Sync RealmObject
    // 1. Add listener to RealmObject which is queried synchronized.
    // 2. Commit transaction in another non-looper thread
    // 3. Listener on the RealmObject gets triggered.
    public void test_non_looper_thread_commit_realmobject_sync() {
        handler.post(new Runnable() {
            @Override
            public void run() {
                realm = Realm.getInstance(configuration);
                realm.addChangeListener(new RealmChangeListener() {
                    @Override
                    public void onChange() {
                        if (realm.where(Dog.class).count() == 2) {
                            realm.handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    signalTestFinished.countDown();
                                }
                            });
                        }
                    }
                });

                realm.beginTransaction();
                realm.createObject(Dog.class);
                realm.commitTransaction();

                Dog dog = realm.where(Dog.class).findFirst();
                dog.addChangeListener(new RealmChangeListener() {
                    @Override
                    public void onChange() {
                        typebasedCommitInvocations.incrementAndGet();
                    }
                });

                Thread thread = new Thread() {
                    @Override
                    public void run() {
                        Realm bgRealm = Realm.getInstance(realm.getConfiguration());
                        bgRealm.beginTransaction();
                        bgRealm.createObject(Dog.class);
                        bgRealm.commitTransaction();
                        bgRealm.close();
                    }
                };
                thread.start();
                try {
                    thread.join();
                } catch (InterruptedException e) {
                    fail(e.getMessage());
                }
            }
        });
        TestHelper.awaitOrFail(signalTestFinished);
        assertEquals(1, typebasedCommitInvocations.get());
    }

