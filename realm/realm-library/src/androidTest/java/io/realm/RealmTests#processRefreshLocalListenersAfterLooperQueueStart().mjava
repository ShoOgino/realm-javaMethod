    // This test assures that calling refresh will not trigger local listeners until after the Looper receives a
    // REALM_CHANGE message
    @Test
    public void processRefreshLocalListenersAfterLooperQueueStart() throws Throwable {
        // Used to validate the result
        final AtomicBoolean listenerWasCalled = new AtomicBoolean(false);
        final AtomicBoolean typeListenerWasCalled = new AtomicBoolean(false);

        // Used by the background thread to wait for the main thread to do the write operation
        final CountDownLatch bgThreadLatch = new CountDownLatch(1);
        final CountDownLatch bgClosedLatch = new CountDownLatch(2);
        final CountDownLatch bgThreadReadyLatch = new CountDownLatch(1);
        final CountDownLatch signalClosedRealm = new CountDownLatch(1);

        final Looper[] looper = new Looper[1];
        final Throwable[] throwable = new Throwable[1];

        ExecutorService executorService = Executors.newSingleThreadExecutor();
        executorService.submit(new Runnable() {
            @Override
            public void run() {
                // this will allow to register a listener.
                // we don't start looping to prevent the callback to be invoked via
                // the handler mechanism, the purpose of this test is to make sure refresh calls
                // the listeners.
                Looper.prepare();
                looper[0] = Looper.myLooper();

                Realm bgRealm = Realm.getInstance(realmConfig);
                RealmResults<Dog> dogs = bgRealm.where(Dog.class).findAll();
                try {
                    bgRealm.addChangeListener(new RealmChangeListener<Realm>() {
                        @Override
                        public void onChange(Realm object) {
                            listenerWasCalled.set(true);
                            bgClosedLatch.countDown();
                        }
                    });
                    dogs.addChangeListener(new RealmChangeListener<RealmResults<Dog>>() {
                        @Override
                        public void onChange(RealmResults<Dog> object) {
                            typeListenerWasCalled.set(true);
                            bgClosedLatch.countDown();
                        }
                    });

                    bgThreadReadyLatch.countDown();
                    bgThreadLatch.await(); // Wait for the main thread to do a write operation
                    bgRealm.refresh(); // This should call the listener
                    assertFalse(listenerWasCalled.get());
                    assertFalse(typeListenerWasCalled.get());

                    Looper.loop();

                } catch (Throwable e) {
                    throwable[0] = e;

                } finally {
                    bgRealm.close();
                    signalClosedRealm.countDown();
                }
            }
        });

        // Wait until bgThread finishes adding listener to the RealmResults. Otherwise same TableView version won't
        // trigger the listener.
        bgThreadReadyLatch.await();
        realm.beginTransaction();
        realm.createObject(Dog.class);
        realm.commitTransaction();
        bgThreadLatch.countDown();
        bgClosedLatch.await();

        TestHelper.exitOrThrow(executorService, bgClosedLatch, signalClosedRealm, looper, throwable);

        assertTrue(listenerWasCalled.get());
        assertTrue(typeListenerWasCalled.get());
    }

