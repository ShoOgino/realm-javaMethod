    // Pre-null Realms will leave columns not-nullable after the underlying storage engine has
    // migrated the file format. An explicit migration step to convert to nullable, and the
    // old class (without @Required) can be used,
    @Test
    public void migratePreNull() throws IOException {
        final AtomicBoolean migrationCalled = new AtomicBoolean(false);
        configFactory.copyRealmFromAssets(context,
                "string-only-pre-null-0.82.2.realm", Realm.DEFAULT_REALM_NAME);
        RealmMigration migration = new RealmMigration() {
            @Override
            public void migrate(DynamicRealm realm, long oldVersion, long newVersion) {
                RealmObjectSchema objectSchema = realm.getSchema().get(StringOnly.CLASS_NAME);
                objectSchema.setRequired(StringOnly.FIELD_CHARS, false);
                migrationCalled.set(true);
            }
        };

        RealmConfiguration realmConfig = configFactory.createConfigurationBuilder()
                .schemaVersion(1)
                .schema(StringOnly.class)
                .migration(migration)
                .build();
        Realm realm = Realm.getInstance(realmConfig);
        assertTrue(migrationCalled.get());

        StringOnly stringOnly = realm.where(StringOnly.class).findFirst();
        assertNotNull(stringOnly);
        // This object was created with 0.82.2
        assertEquals("String_set_with_0.82.2", stringOnly.getChars());
        realm.beginTransaction();
        stringOnly.setChars(null);
        realm.commitTransaction();
        realm.close();
    }

