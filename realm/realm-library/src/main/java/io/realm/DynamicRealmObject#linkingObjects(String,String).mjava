    /**
     * Returns {@link RealmResults} containing all {@code srcClassName} class objects that have a relationship
     * to this object from {@code srcFieldName} field.
     * <p>
     * An entry is added for each reference, e.g. if the same reference is in a list multiple times,
     * the src object will show up here multiple times.
     *
     * @param srcClassName name of the class returned objects belong to.
     * @param srcFieldName name of the field in the source class that holds a reference to this object.
     *                    Field type must be either {@code io.realm.RealmFieldType.OBJECT} or {@code io.realm.RealmFieldType.LIST}.
     * @return the result.
     * @throws IllegalArgumentException if the {@code srcClassName} is {@code null} or does not exist,
     * the {@code srcFieldName} is {@code null} or does not exist,
     * type of the source field is not supported.
     */
    public RealmResults<DynamicRealmObject> linkingObjects(String srcClassName, String srcFieldName) {
        final DynamicRealm realm = (DynamicRealm) proxyState.getRealm$realm();
        realm.checkIfValid();
        proxyState.getRow$realm().checkIfAttached();

        final RealmSchema schema = realm.getSchema();
        final RealmObjectSchema realmObjectSchema = schema.get(srcClassName);
        if (realmObjectSchema == null) {
            throw new IllegalArgumentException("Class not found: " + srcClassName);
        }

        if (srcFieldName == null) {
            throw new IllegalArgumentException("Non-null 'srcFieldName' required.");
        }
        if (srcFieldName.contains(".")) {
            throw new IllegalArgumentException(MSG_LINK_QUERY_NOT_SUPPORTED);
        }

        final RealmFieldType fieldType = realmObjectSchema.getFieldType(srcFieldName); // throws IAE if not found
        if (fieldType != RealmFieldType.OBJECT && fieldType != RealmFieldType.LIST) {
            throw new IllegalArgumentException(String.format(Locale.ENGLISH,
                    "Unexpected field type: %1$s. Field type should be either %2$s.%3$s or %2$s.%4$s.",
                    fieldType.name(),
                    RealmFieldType.class.getSimpleName(),
                    RealmFieldType.OBJECT.name(), RealmFieldType.LIST.name()));
        }

        return RealmResults.createBacklinkResults(realm, (CheckedRow) proxyState.getRow$realm(), realmObjectSchema.getTable(), srcFieldName);
    }

