    /**
     * Returns an Rx Observable that monitors changes to this RealmList. It will emit the current RealmList when
     * subscribed. For each update to the RealmList a pair consisting of the RealmList and the
     * {@link OrderedCollectionChangeSet} will be sent. The changeset will be {@code null} the first
     * time an RealmList is emitted.
     * <p>
     * RealmList will continually be emitted as the RealmList is updated - {@code onComplete} will never be called.
     * <p>
     * Items emitted from Realm Observables are frozen (See {@link #freeze()}. This means that they
     * are immutable and can be read on any thread.
     * <p>
     * Realm Observables always emit items from the thread holding the live Realm. This means that if
     * you need to do further processing, it is recommend to observe the values on a computation
     * scheduler:
     * <p>
     * {@code
     * list.asChangesetObservable()
     *   .observeOn(Schedulers.computation())
     *   .map((rxList, changes) -> doExpensiveWork(rxList, changes))
     *   .observeOn(AndroidSchedulers.mainThread())
     *   .subscribe( ... );
     * }
     *
     * @return RxJava Observable that only calls {@code onNext}. It will never call {@code onComplete} or {@code OnError}.
     * @throws UnsupportedOperationException if the required RxJava framework is not on the classpath or the
     * corresponding Realm instance doesn't support RxJava.
     * @throws IllegalStateException if the Realm wasn't opened on a Looper thread.
     * @see <a href="https://realm.io/docs/java/latest/#rxjava">RxJava and Realm</a>
     */
    public Observable<CollectionChange<RealmList<E>>> asChangesetObservable() {
        if (baseRealm instanceof Realm) {
            return baseRealm.configuration.getRxFactory().changesetsFrom((Realm) baseRealm, this);
        } else if (baseRealm instanceof DynamicRealm) {
            DynamicRealm dynamicRealm = (DynamicRealm) baseRealm;
            RealmList<DynamicRealmObject> dynamicResults = (RealmList<DynamicRealmObject>) this;
            return (Observable) baseRealm.configuration.getRxFactory().changesetsFrom(dynamicRealm, dynamicResults);
        } else {
            throw new UnsupportedOperationException(baseRealm.getClass() + " does not support RxJava2.");
        }
    }

