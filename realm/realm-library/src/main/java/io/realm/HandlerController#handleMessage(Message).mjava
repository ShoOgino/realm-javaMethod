    @Override
    public boolean handleMessage(Message message) {
        // Due to how a ConcurrentHashMap iterator is created we cannot be sure that other threads are
        // aware when this threads handler is removed before they send messages to it. We don't wish to synchronize
        // access to the handlers as they are the prime mean of notifying about updates. Instead we make sure
        // that if a message does slip though (however unlikely), it will not try to update a SharedGroup that no
        // longer exists. `sharedRealm` will only be null if a Realm is really closed.
        if (realm.sharedRealm != null) {
            QueryUpdateTask.Result result;
            switch (message.what) {

                case LOCAL_COMMIT:
                case REALM_CHANGED:
                    realmChanged(message.what == LOCAL_COMMIT);
                    break;

                case HandlerControllerConstants.COMPLETED_ASYNC_REALM_RESULTS:
                    result = (QueryUpdateTask.Result) message.obj;
                    completedAsyncRealmResults(result);
                    break;

                case HandlerControllerConstants.COMPLETED_ASYNC_REALM_OBJECT:
                    result = (QueryUpdateTask.Result) message.obj;
                    completedAsyncRealmObject(result);
                    break;

                case HandlerControllerConstants.COMPLETED_UPDATE_ASYNC_QUERIES:
                    // This is called once the background thread completed the update of the async queries.
                    result = (QueryUpdateTask.Result) message.obj;
                    completedAsyncQueriesUpdate(result);
                    break;

                case HandlerControllerConstants.REALM_ASYNC_BACKGROUND_EXCEPTION:
                    // Doesn't fail silently in the background in case of Core exception.
                    throw (Error) message.obj;

                default:
                    throw new IllegalArgumentException("Unknown message: " + message.what);
            }
        }
        return true;
    }

