    /**
     * Return a distinct set of objects of a specific class. As a Realm is unordered, it is undefined which objects are
     * returned in case of multiple occurrences.
     * This method is only available from a Looper thread.
     *
     * @param className the Class to get objects of.
     * @param fieldName the field name.
     * @return immediately an empty {@link RealmResults}. Users need to register a listener
     * {@link io.realm.RealmResults#addChangeListener(RealmChangeListener)} to be notified
     * when the query completes.
     * @throws IllegalArgumentException if a field name does not exist or the field is not indexed.
     */
    public RealmResults<DynamicRealmObject> distinctAsync(String className, String fieldName) {
        checkNotNullFieldName(fieldName);
        checkIfValid();
        Table table = schema.getTable(className);
        long columnIndex = table.getColumnIndex(fieldName);
        if (columnIndex == -1) {
            throw new IllegalArgumentException(String.format("Field name '%s' does not exist.", fieldName));
        }

        // check if the field is indexed
        if (!table.hasSearchIndex(columnIndex)) {
            throw new IllegalArgumentException(String.format("Field name '%s' must be indexed in order to use it for distinct queries.", fieldName));
        }

        return where(className).distinctAsync(columnIndex);
    }

