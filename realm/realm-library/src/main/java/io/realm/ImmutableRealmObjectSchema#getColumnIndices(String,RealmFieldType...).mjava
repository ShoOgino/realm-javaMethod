    /**
     * Returns a field descriptor based on Java field names found in model classes.
     *
     * @param publicJavaNameDescription field name or linked field description
     * @param validColumnTypes valid field type for the last field in a linked field
     * @return the corresponding FieldDescriptor.
     * @throws IllegalArgumentException if a proper FieldDescriptor could not be created.
     */
    @Override
    FieldDescriptor getColumnIndices(String publicJavaNameDescription, RealmFieldType... validColumnTypes) {
        return FieldDescriptor.createStandardFieldDescriptor(getSchemaConnector(), getTable(), publicJavaNameDescription, validColumnTypes);
    }

