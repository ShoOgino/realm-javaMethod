    /**
     * Returns a distinct set of objects of a specific class. If the result is sorted, the first
     * object will be returend in case of multiple occurences, otherwise it is undefined which
     * object is returned.
     *
     * @param fieldName the field name.
     * @return a non-null {@link RealmResults} containing the distinct objects.
     * @throws IllegalArgumentException if a field name does not exist.
     * @throws IllegalArgumentException if a field's type is not supported.
     * @throws IllegalArgumentException if a field points linked properties.
     * @throws UnsupportedOperationException if a field is not indexed.
     */
    public RealmResults<E> distinct(String fieldName) {
        realm.checkIfValid();
        long columnIndex = getColumnIndex(fieldName);
        TableOrView tableOrView = getTable();

        TableView tableView;
        if (tableOrView instanceof Table) {
            tableView = ((Table) tableOrView).getDistinctView(columnIndex);
        } else {
            tableView = ((TableView) tableOrView).getTable().getDistinctView(columnIndex);
        }

        RealmResults<E> realmResults;
        if (realm instanceof DynamicRealm) {
            realmResults =  (RealmResults<E>) RealmResults.createFromDynamicTableOrView(realm, tableView, className);
        } else {
            realmResults = RealmResults.createFromTableOrView(realm, tableView, classSpec);
        }
        return realmResults;
    }

