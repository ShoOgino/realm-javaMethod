    /**
     * Returns a frozen snapshot of this object. The frozen copy can be read and queried from any thread without throwing
     * an {@link IllegalStateException}.
     * <p>
     * Freezing a RealmObject also creates a frozen Realm which has its own lifecycle, but if the live Realm that spawned the
     * original collection is fully closed (i.e. all instances across all threads are closed), the frozen Realm and
     * object will be closed as well.
     * <p>
     * Frozen objects can be queried as normal, but trying to mutate it in any way or attempting to register a listener will
     * throw an {@link IllegalStateException}.
     * <p>
     * Note: Keeping a large number of frozen objects with different versions alive can have a negative impact on the filesize
     * of the Realm. In order to avoid such a situation it is possible to set {@link RealmConfiguration.Builder#maxNumberOfActiveVersions(long)}.
     *
     * @return a frozen copy of this object.
     * @throws IllegalStateException if this method is called from inside a write transaction.
     */
    public static <E extends RealmModel> E freeze(E object) {
        if (object instanceof RealmObjectProxy) {
            RealmObjectProxy proxy = (RealmObjectProxy) object;
            BaseRealm realm = proxy.realmGet$proxyState().getRealm$realm();
            BaseRealm frozenRealm = (realm.isFrozen()) ? realm : realm.freeze();

            Row frozenRow = proxy.realmGet$proxyState().getRow$realm().freeze(frozenRealm.sharedRealm);
            if (frozenRealm instanceof DynamicRealm) {
                //noinspection unchecked
                return (E) new DynamicRealmObject(frozenRealm, frozenRow);
            } else if (frozenRealm instanceof Realm) {
                //noinspection unchecked
                Class<E> modelClass = (Class<E>) object.getClass().getSuperclass();
                return (E) frozenRealm.getConfiguration().getSchemaMediator().newInstance(
                        modelClass, frozenRealm, frozenRow, realm.getSchema().getColumnInfo(modelClass),
                        false, Collections.<String>emptyList());
            } else {
                throw new UnsupportedOperationException("Unknown Realm type: " + frozenRealm.getClass().getName());
            }
        } else {
            throw new IllegalArgumentException("It is only possible to freeze valid managed Realm objects.");
        }
    }

