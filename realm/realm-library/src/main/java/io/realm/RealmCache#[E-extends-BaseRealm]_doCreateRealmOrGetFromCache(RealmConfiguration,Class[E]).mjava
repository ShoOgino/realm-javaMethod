    private synchronized <E extends BaseRealm> E doCreateRealmOrGetFromCache(RealmConfiguration configuration,
            Class<E> realmClass) {

        RefAndCount refAndCount = refAndCountMap.get(RealmCacheType.valueOf(realmClass));

        if (getTotalGlobalRefCount() == 0) {
            copyAssetFileIfNeeded(configuration);
            boolean fileExists = configuration.realmExists();

            SharedRealm sharedRealm = null;
            try {
                sharedRealm = SharedRealm.getInstance(configuration);

                // If waitForInitialRemoteData() was enabled, we need to make sure that all data is downloaded
                // before proceeding. We need to open the Realm instance first to start any potential underlying
                // SyncSession so this will work. TODO: This needs to be decoupled.
                if (!fileExists) {
                    try {
                        ObjectServerFacade.getSyncFacadeIfPossible().downloadRemoteChanges(configuration);
                    } catch (Throwable t) {
                        // If an error happened while downloading initial data, we need to reset the file so we can
                        // download it again on the next attempt.
                        // Realm.deleteRealm() is under the same lock as this method and globalCount is still 0, so
                        // this should be safe.
                        sharedRealm.close();
                        sharedRealm = null;
                        Realm.deleteRealm(configuration);
                        throw t;
                    }
                }

                if (Table.primaryKeyTableNeedsMigration(sharedRealm)) {
                    sharedRealm.beginTransaction();
                    if (Table.migratePrimaryKeyTableIfNeeded(sharedRealm)) {
                        sharedRealm.commitTransaction();
                    } else {
                        sharedRealm.cancelTransaction();
                    }
                }

            } finally {
                if (sharedRealm != null) {
                    sharedRealm.close();
                }
            }

            // We are holding the lock, and we can set the invalidated configuration since there is no global ref to it.
            this.configuration = configuration;
        } else {
            // Throws exception if validation failed.
            validateConfiguration(configuration);
        }

        if (refAndCount.localRealm.get() == null) {
            // Creates a new local Realm instance
            BaseRealm realm;

            if (realmClass == Realm.class) {
                // RealmMigrationNeededException might be thrown here.
                realm = Realm.createInstance(this);
            } else if (realmClass == DynamicRealm.class) {
                realm = DynamicRealm.createInstance(this);
            } else {
                throw new IllegalArgumentException(WRONG_REALM_CLASS_MESSAGE);
            }

            // The Realm instance has been created without exceptions. Cache and reference count can be updated now.
            refAndCount.localRealm.set(realm);
            refAndCount.localCount.set(0);

            if (realmClass == Realm.class && refAndCount.globalCount == 0) {
                // Stores a copy of local ColumnIndices as a global cache.
                RealmCache.storeColumnIndices(typedColumnIndicesArray, realm.getSchema().getImmutableColumnIndicies());
            }
            // This is the first instance in current thread, increase the global count.
            refAndCount.globalCount++;
        }

        Integer refCount = refAndCount.localCount.get();
        refAndCount.localCount.set(refCount + 1);

        //noinspection unchecked
        return (E) refAndCount.localRealm.get();
    }

