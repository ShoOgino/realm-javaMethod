    /**
     * Returns the {@link RealmList} of objects being linked to from this field.
     *
     * @param fieldName the name of the field.
     * @return the {@link RealmList} data for this field.
     * @throws IllegalArgumentException if field name doesn't exist or it doesn't contain a list of links.
     */
    public RealmList<DynamicRealmObject> getList(String fieldName) {
        proxyState.getRealm$realm().checkIfValid();

        long columnIndex = proxyState.getRow$realm().getColumnIndex(fieldName);
        try {
            LinkView linkView = proxyState.getRow$realm().getLinkList(columnIndex);
            String className = linkView.getTargetTable().getClassName();
            return new RealmList<>(className, linkView, proxyState.getRealm$realm());
        } catch (IllegalArgumentException e) {
            checkFieldType(fieldName, columnIndex, RealmFieldType.LIST);
            throw e;
        }
    }

