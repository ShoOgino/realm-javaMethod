    /**
     * Returns the {@link RealmList} of {@link DynamicRealmObject}s being linked from the given field.
     *
     * @param fieldName the name of the field.
     * @return the {@link RealmList} data for this field.
     * @throws IllegalArgumentException if field name doesn't exist or it doesn't contain a list of objects.
     */
    public RealmList<DynamicRealmObject> getList(String fieldName) {
        proxyState.getRealm$realm().checkIfValid();

        long columnIndex = proxyState.getRow$realm().getColumnIndex(fieldName);
        try {
            OsList osList = proxyState.getRow$realm().getList(columnIndex);
            //noinspection ConstantConditions
            @Nonnull
            String className = osList.getTargetTable().getClassName();
            return new RealmList<>(className, osList, proxyState.getRealm$realm());
        } catch (IllegalArgumentException e) {
            checkFieldType(fieldName, columnIndex, RealmFieldType.LIST);
            throw e;
        }
    }

