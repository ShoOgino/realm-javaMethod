    /**
     * Instantiates and adds a new embedded object to the Realm.
     * <p>
     * This method should only be used to created objects of types marked as embedded.
     *
     * @param clazz the Class of the object to create. It must be marked with {@code \@RealmClass(embedded = true)}.
     * @param parentObject The parent object which should a reference to the embedded object. If the parent property is a list
     * the embedded object will be added to the end of that list.
     * @param parentProperty the property in the parent class which holds the reference.
     * @return the newly created embedded object.
     * @throws IllegalArgumentException if {@code clazz} is not an embedded class or if the property
     * in the parent class cannot hold objects of the appropriate type.
     * @see RealmClass#embedded()
     */
    public <E extends RealmModel> E createEmbeddedObject(Class<E> clazz, RealmModel parentObject, String parentProperty) {
        checkIfValid();
        Util.checkNull(parentObject, "parentObject");
        Util.checkEmpty(parentProperty, "parentProperty");
        if (!RealmObject.isManaged(parentObject) || !RealmObject.isValid(parentObject)) {
            throw new IllegalArgumentException("Only valid, managed objects can be a parent to an embedded object.");
        }
        RealmObjectProxy proxy = (RealmObjectProxy) parentObject;
        long parentPropertyColKey = schema.getSchemaForClass(parentObject.getClass()).getColumnKey(parentProperty);
        RealmFieldType parentPropertyType = schema.getSchemaForClass(parentObject.getClass()).getFieldType(parentProperty);
        Row embeddedObject;
        switch(parentPropertyType) {
            case OBJECT: {
                // FIXME: Check type of link
                long objKey = proxy.realmGet$proxyState().getRow$realm().createEmbeddedObject(parentPropertyColKey);
                embeddedObject = getTable(clazz).getUncheckedRow(objKey);
                break;
            }
            case LIST: {
                // FIXME: Check type of link
                long objKey = proxy.realmGet$proxyState().getRow$realm().getModelList(parentPropertyColKey).createAndAddEmbeddedObject();
                embeddedObject = getTable(clazz).getUncheckedRow(objKey);
                break;
            }
            default:
                throw new IllegalArgumentException("Parent property is not a reference to embedded objects of the appropriate type: " + parentPropertyType);
        }

        //noinspection unchecked
        return (E) configuration.getSchemaMediator().newInstance(clazz,
                this,
                embeddedObject,
                schema.getColumnInfo(clazz),
                true, Collections.EMPTY_LIST);
    }

