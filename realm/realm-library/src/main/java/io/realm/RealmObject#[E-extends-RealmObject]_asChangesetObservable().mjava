    /**
     * Returns an Rx Observable that monitors changes to this RealmObject. It will emit the current RealmObject when
     * subscribed to. For each update to the RealmObject a pair consisting of the RealmObject and the
     * {@link ObjectChangeSet} will be sent. The changeset will be {@code null} the first
     * time the RealmObject is emitted.
     * <p>
     * The RealmObject will continually be emitted as it is updated - {@code onComplete} will never be called.
     * <p>
     * Note that when the {@link Realm} is accessed from threads other than where it was created,
     * {@link IllegalStateException} will be thrown. Care should be taken when using different schedulers
     * with {@code subscribeOn()} and {@code observeOn()}. Consider using {@code Realm.where().find*Async()}
     * instead.
     *
     * @return RxJava Observable that only calls {@code onNext}. It will never call {@code onComplete} or {@code OnError}.
     * @throws UnsupportedOperationException if the required RxJava framework is not on the classpath or the
     * corresponding Realm instance doesn't support RxJava.
     * @see <a href="https://realm.io/docs/java/latest/#rxjava">RxJava and Realm</a>
     */
    public final <E extends RealmObject> Observable<ObjectChange<E>> asChangesetObservable() {
        return (Observable) RealmObject.asChangesetObservable(this);
    }

