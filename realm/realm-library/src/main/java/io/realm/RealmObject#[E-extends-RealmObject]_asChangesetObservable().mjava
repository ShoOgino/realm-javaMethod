    /**
     * Returns an Rx Observable that monitors changes to this RealmObject. It will emit the current RealmObject when
     * subscribed to. For each update to the RealmObject a pair consisting of the RealmObject and the
     * {@link ObjectChangeSet} will be sent. The changeset will be {@code null} the first
     * time the RealmObject is emitted.
     * <p>
     * The RealmObject will continually be emitted as it is updated - {@code onComplete} will never be called.
     * <p>
     * Items emitted from Realm Observables are frozen (See {@link #freeze()}. This means that they
     * are immutable and can be read on any thread.
     * <p>
     * Realm Observables always emit items from the thread holding the live Realm. This means that if
     * you need to do further processing, it is recommend to observe the values on a computation
     * scheduler:
     * <p>
     * {@code
     * obj.asChangesetObservable()
     *   .observeOn(Schedulers.computation())
     *   .map((rxObj, changes) -> doExpensiveWork(rxObj, changes√•))
     *   .observeOn(AndroidSchedulers.mainThread())
     *   .subscribe( ... );
     * }
     *
     * @return RxJava Observable that only calls {@code onNext}. It will never call {@code onComplete} or {@code OnError}.
     * @throws UnsupportedOperationException if the required RxJava framework is not on the classpath or the
     * corresponding Realm instance doesn't support RxJava.
     * @throws IllegalStateException if the Realm wasn't opened on a Looper thread.
     * @see <a href="https://realm.io/docs/java/latest/#rxjava">RxJava and Realm</a>
     */
    public final <E extends RealmObject> Observable<ObjectChange<E>> asChangesetObservable() {
        return (Observable) RealmObject.asChangesetObservable(this);
    }

