    /**
     * Replaces the RealmList at the given field on all objects in this collection.
     *
     *
     * @param fieldName name of the field to update.
     * @param list new value for the field.
     * @throws IllegalArgumentException if field name doesn't exist, isn't a RealmList field , if the
     * objects in the list are not managed or the type of the objects in the list are wrong.
     */
    @SuppressWarnings("unchecked")
    public <T> void setList(String fieldName, RealmList<T> list) {
        checkNonEmptyFieldName(fieldName);
        fieldName = mapFieldNameToInternalName(fieldName);
        realm.checkIfValidAndInTransaction();

        //noinspection ConstantConditions
        if (list == null) {
            throw new IllegalArgumentException("Non-null 'list' required");
        }

        // Due to type erasure of generics it is not possible to have multiple overloaded methods with the same signature.
        // So instead we fake  it by checking the first element in the list and verifies that
        // against the underlying type.
        RealmFieldType columnType = realm.getSchema().getSchemaForClass(osResults.getTable().getClassName()).getFieldType(fieldName);
        switch (columnType) {
            case LIST:
                checkTypeOfListElements(list, RealmModel.class);
                checkRealmObjectConstraints(fieldName, (RealmModel) list.first(null));
                osResults.setModelList(fieldName, (RealmList<RealmModel>) list);
                break;
            case INTEGER_LIST:
                // Integers are a bit annoying as they are all stored as the same type in Core
                // but the Java type system cannot seamlessly translate between e.g Short and Long.
                Class<?> listType = getListType(list);
                if (listType.equals(Integer.class)) {
                    osResults.setIntegerList(fieldName, (RealmList<Integer>) list);
                } else if (listType.equals(Long.class)) {
                    osResults.setLongList(fieldName, (RealmList<Long>) list);
                } else if (listType.equals(Short.class)) {
                    osResults.setShortList(fieldName, (RealmList<Short>) list);
                } else if (listType.equals(Byte.class)) {
                    osResults.setByteList(fieldName, (RealmList<Byte>) list);
                } else {
                    throw new IllegalArgumentException(String.format("List contained the wrong type of elements. " +
                            "Elements that can be mapped to Integers was expected, but the actual type is '%s'",
                            listType));
                }
                break;
            case BOOLEAN_LIST:
                checkTypeOfListElements(list, Boolean.class);
                osResults.setBooleanList(fieldName, (RealmList<Boolean>) list);
                break;
            case STRING_LIST:
                checkTypeOfListElements(list, String.class);
                osResults.setStringList(fieldName, (RealmList<String>) list);
                break;
            case BINARY_LIST:
                checkTypeOfListElements(list, byte[].class);
                osResults.setByteArrayList(fieldName, (RealmList<byte[]>) list);
                break;
            case DATE_LIST:
                checkTypeOfListElements(list, Date.class);
                osResults.setDateList(fieldName, (RealmList<Date>) list);
                break;
            case DECIMAL128_LIST:
                checkTypeOfListElements(list, Decimal128.class);
                osResults.setDecimal128List(fieldName, (RealmList<Decimal128>) list);
                break;
            case OBJECT_ID_LIST:
                checkTypeOfListElements(list, ObjectId.class);
                osResults.setObjectIdList(fieldName, (RealmList<ObjectId>) list);
                break;
            case FLOAT_LIST:
                checkTypeOfListElements(list, Float.class);
                osResults.setFloatList(fieldName, (RealmList<Float>) list);
                break;
            case DOUBLE_LIST:
                checkTypeOfListElements(list, Double.class);
                osResults.setDoubleList(fieldName, (RealmList<Double>) list);
                break;
            default: {
//                // Handle Decimal128 and ObjectId in a special way since they might not be on the
//                // classpath
//                if (columnType == RealmFieldType.DECIMAL128_LIST) {
//                    checkTypeOfListElements(list, Decimal128.class);
//                    osResults.setDecimal128List(fieldName, (RealmList<Decimal128>) list);
//                } else if (columnType == RealmFieldType.OBJECT_ID_LIST) {
//                    checkTypeOfListElements(list, ObjectId.class);
//                    osResults.setObjectIdList(fieldName, (RealmList<ObjectId>) list);
//                }
                throw new IllegalArgumentException(String.format("Field '%s' is not a list but a %s", fieldName, columnType));
            }
        }
    }

