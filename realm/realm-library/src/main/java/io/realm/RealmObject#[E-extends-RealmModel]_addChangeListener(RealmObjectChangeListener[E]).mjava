    /**
     * Adds a change listener to this RealmObject to get detailed information about changes. The listener will be
     * triggered if any value field or referenced RealmObject field is changed, or the RealmList field itself is
     * changed.
     * <p>
     * Registering a change listener will not prevent the underlying RealmObject from being garbage collected.
     * If the RealmObject is garbage collected, the change listener will stop being triggered. To avoid this, keep a
     * strong reference for as long as appropriate e.g. in a class variable.
     * <p>
     * <pre>
     * {@code
     * public class MyActivity extends Activity {
     *
     *     private Person person; // Strong reference to keep listeners alive
     *
     *     \@Override
     *     protected void onCreate(Bundle savedInstanceState) {
     *       super.onCreate(savedInstanceState);
     *       person = realm.where(Person.class).findFirst();
     *       person.addChangeListener(new RealmObjectChangeListener<Person>() {
     *           \@Override
     *           public void onChange(Person person, ObjectChangeSet changeSet) {
     *               // React to change
     *           }
     *       });
     *     }
     * }
     * }
     * </pre>
     *
     * @param listener the change listener to be notified.
     * @throws IllegalArgumentException if the change listener is {@code null} or the object is an unmanaged object.
     * @throws IllegalStateException if you try to add a listener from a non-Looper or {@link IntentService} thread.
     * @throws IllegalStateException if you try to add a listener inside a transaction.
     */
    public final <E extends RealmModel> void addChangeListener(RealmObjectChangeListener<E> listener) {
        //noinspection unchecked
        RealmObject.addChangeListener((E) this, listener);
    }

