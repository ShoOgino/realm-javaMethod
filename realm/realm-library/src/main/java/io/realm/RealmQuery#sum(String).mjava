    /**
     * Calculates the sum of a given field.
     *
     * @param fieldName the field to sum. Only number fields are supported.
     * @return the sum of fields of the matching objects. If no objects exist or they all have {@code null} as the value
     * for the given field, {@code 0} will be returned. When computing the sum, objects with {@code null} values
     * are ignored.
     * @throws java.lang.IllegalArgumentException if the field is not a number type.
     * @throws RealmException if called from the UI thread after opting out via {@link RealmConfiguration.Builder#allowQueriesOnUiThread(boolean)}.
     */
    public Number sum(String fieldName) {
        realm.checkIfValid();
        realm.checkAllowQueriesOnUiThread();

        long columnKey = schema.getAndCheckFieldColumnKey(fieldName);
        switch (table.getColumnType(columnKey)) {
            case INTEGER:
                return query.sumInt(columnKey);
            case FLOAT:
                return query.sumFloat(columnKey);
            case DOUBLE:
                return query.sumDouble(columnKey);
            case DECIMAL128:
                return query.sumDecimal128(columnKey);
            default:
                throw new IllegalArgumentException(String.format(Locale.US,
                        TYPE_MISMATCH, fieldName, "int, float or double"));
        }
    }

