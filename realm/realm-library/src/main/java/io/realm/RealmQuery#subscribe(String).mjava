    /**
     * Creates an anonymous subscription from this query or returns the existing Subscription if
     * one already existed.
     *
     * @return the name of the query.
     * @return the subscription representing this query.
     * @throws IllegalStateException if this method is not called inside a write transaction, if
     * the query is on a {@link DynamicRealm} or a {@link RealmList}.
     * @throws IllegalArgumentException if a subscription for a different query with the same name
     * already exists.
     */
    @ObjectServer
    @Beta
    public Subscription subscribe(String name) {
        realm.checkIfValid();
        if (realm instanceof DynamicRealm) {
            throw new IllegalStateException("'subscribe' is not supported for queries on Dynamic Realms.");
        }
        if (osList != null) {
            throw new IllegalStateException("Cannot create subscriptions for queries based on a 'RealmList. Subscribe to the object holding the list instead.'");
        }
        if (TextUtils.isEmpty(name)) {
            throw new IllegalArgumentException("Non-empty 'name' required.");
        }
        long rowIndex = nativeSubscribe(realm.getSharedRealm().getNativePtr(), name, query.getNativePtr(), queryDescriptors.getNativePtr());
        CheckedRow row = ((Realm) realm).getTable(Subscription.class).getCheckedRow(rowIndex);
        return realm.get(Subscription.class, null, row);
    }

