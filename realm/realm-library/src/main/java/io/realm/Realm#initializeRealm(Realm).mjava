    private static void initializeRealm(Realm realm) {
        // Everything in this method needs to be behind a transaction lock to prevent multi-process interaction while
        // the Realm is initialized.
        boolean commitChanges = false;
        try {
            realm.beginTransaction();
            long currentVersion = realm.getVersion();
            boolean unversioned = currentVersion == UNVERSIONED;
            commitChanges = unversioned;

            if (unversioned) {
                realm.setVersion(realm.configuration.getSchemaVersion());
            }
            final RealmProxyMediator mediator = realm.configuration.getSchemaMediator();
            final Set<Class<? extends RealmModel>> modelClasses = mediator.getModelClasses();

            final Map<Class<? extends RealmModel>, ColumnInfo> columnInfoMap = new HashMap<>(modelClasses.size());
            if (unversioned) {
                // Create all of the tables.
                for (Class<? extends RealmModel> modelClass : modelClasses) {
                    mediator.createTable(modelClass, realm.sharedRealm);
                }
            }
            for (Class<? extends RealmModel> modelClass : modelClasses) {
                // Now that they have all been created, validate them.
                columnInfoMap.put(modelClass, mediator.validateTable(modelClass, realm.sharedRealm, false));
            }

            realm.schema.setColumnIndices(
                    (unversioned) ? realm.configuration.getSchemaVersion() : currentVersion,
                    columnInfoMap);

            if (unversioned) {
                final Transaction transaction = realm.configuration.getInitialDataTransaction();
                if (transaction != null) {
                    transaction.execute(realm);
                }
            }
        } catch (Exception e) {
            commitChanges = false;
            throw e;
        } finally {
            if (commitChanges) {
                realm.commitTransaction();
            } else {
                realm.cancelTransaction();
            }
        }
    }

