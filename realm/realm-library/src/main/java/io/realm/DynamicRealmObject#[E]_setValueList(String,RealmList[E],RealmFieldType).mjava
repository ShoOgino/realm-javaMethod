    @SuppressWarnings("unchecked")
    private <E> void setValueList(String fieldName, RealmList<E> list, RealmFieldType primitiveType) {
        long columnKey = proxyState.getRow$realm().getColumnKey(fieldName);
        OsList osList = proxyState.getRow$realm().getValueList(columnKey, primitiveType);

        Class<E> elementClass;
        switch(primitiveType) {
            case INTEGER_LIST: elementClass = (Class<E>) Long.class; break;
            case BOOLEAN_LIST: elementClass = (Class<E>) Boolean.class; break;
            case STRING_LIST: elementClass = (Class<E>) String.class; break;
            case BINARY_LIST: elementClass = (Class<E>) byte[].class; break;
            case DATE_LIST: elementClass = (Class<E>) Date.class; break;
            case FLOAT_LIST: elementClass = (Class<E>) Float.class; break;
            case DOUBLE_LIST: elementClass = (Class<E>) Double.class; break;
            case DECIMAL128_LIST: elementClass = (Class<E>) Decimal128.class; break;
            case OBJECT_ID_LIST: elementClass = (Class<E>) ObjectId.class; break;
            default:
                throw new IllegalArgumentException("Unsupported type: " + primitiveType);
        }
        final ManagedListOperator<?> operator = getOperator(proxyState.getRealm$realm(), osList, primitiveType, elementClass);

        if (list.isManaged() && osList.size() == list.size()) {
            // There is a chance that the source list and the target list are the same list in the same object.
            // In this case, we can't use removeAll().
            final int size = list.size();
            final Iterator<?> iterator = list.iterator();
            for (int i = 0; i < size; i++) {
                @Nullable
                final Object value = iterator.next();
                operator.set(i, value);
            }
        }  else {
            osList.removeAll();
            for (Object value : list) {
                operator.append(value);
            }
        }
    }

