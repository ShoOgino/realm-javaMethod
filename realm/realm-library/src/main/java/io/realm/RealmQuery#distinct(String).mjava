    /**
     * Returns a distinct set of objects of a specific class. If the result is sorted, the first
     * object will be returend in case of multiple occurences, otherwise it is undefined which
     * object is returned.
     *
     * @param fieldName the field name.
     * @return a non-null {@link RealmResults} containing the distinct objects.
     * @throws IllegalArgumentException if a field name does not exist.
     * @throws IllegalArgumentException if a field's type is not supported.
     * @throws IllegalArgumentException if a field points linked properties.
     * @throws UnsupportedOperationException if a field is not indexed.
     */
    public RealmResults<E> distinct(String fieldName) {
        checkQueryIsNotReused();
        if (fieldName.contains(".")) {
            throw new IllegalArgumentException("Distinct operation on linked properties is not supported: " + fieldName);
        }
        Table table = this.table.getTable();
        long columnIndex = table.getColumnIndex(fieldName);
        if (columnIndex == -1) {
            throw new IllegalArgumentException(String.format("Field name '%s' does not exist.", fieldName));
        }
        TableView tableView = this.query.findAll();
        tableView.distinct(columnIndex);

        RealmResults<E> realmResults;
        if (isDynamicQuery()) {
            realmResults =  (RealmResults<E>) RealmResults.createFromDynamicTableOrView(realm, tableView, className);
        } else {
            realmResults = RealmResults.createFromTableOrView(realm, tableView, clazz);
        }
        return realmResults;
    }

