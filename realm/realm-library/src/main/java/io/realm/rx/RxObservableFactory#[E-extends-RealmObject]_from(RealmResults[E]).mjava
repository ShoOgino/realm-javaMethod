    /**
     * Creates an Observable for a RealmResults. It will emit the initial results when subscribed to and on each
     * update to the results.
     *
     * RealmResults observables are effectively hot observables as RealmObjects auto-update.
     *
     * @param results RealmResults to listen to changes for.
     * @param <E> Type of RealmObject
     */
    public static <E extends RealmObject> Observable<RealmResults<E>> from(final RealmResults<E> results) {
        return Observable.create(new Observable.OnSubscribe<RealmResults<E>>() {
            @Override
            public void call(final Subscriber<? super RealmResults<E>> subscriber) {
                final RealmChangeListener listener = new RealmChangeListener() {
                    @Override
                    public void onChange() {
                        subscriber.onNext(results);
                    }
                };
                results.addChangeListener(listener);
                subscriber.add(Subscriptions.create(new Action0() {
                    @Override
                    public void call() {
                        results.removeChangeListener(listener);
                    }
                }));

                // Immediately call onNext with the current value as due to Realms auto-update it will be the latest
                // value. This mimics a BehaviorSubject.
                subscriber.onNext(results);
            }
        });
    }

