    @Override
    public <E extends RealmModel> Flowable<E> from(final Realm realm, final E object) {
        final RealmConfiguration realmConfig = realm.getConfiguration();
        return Flowable.create(new FlowableOnSubscribe<E>() {
            @Override
            public void subscribe(final FlowableEmitter<E> emitter) throws Exception {
                // Gets instance to make sure that the Realm is open for as long as the
                // Observable is subscribed to it.
                final Realm observableRealm = Realm.getInstance(realmConfig);
                objectRefs.get().acquireReference(object);
                final RealmChangeListener<E> listener = new RealmChangeListener<E>() {
                    @Override
                    public void onChange(E obj) {
                        if (!emitter.isCancelled()) {
                            emitter.onNext(obj);
                        }
                    }
                };
                RealmObject.addChangeListener(object, listener);

                // Cleanup when stream is disposed
                emitter.setDisposable(Disposables.fromRunnable(new Runnable() {
                    @Override
                    public void run() {
                        RealmObject.removeChangeListener(object, listener);
                        observableRealm.close();
                        objectRefs.get().releaseReference(object);
                    }
                }));

                // Emit current value immediately
                emitter.onNext(object);

            }
        }, BACK_PRESSURE_STRATEGY);
    }

