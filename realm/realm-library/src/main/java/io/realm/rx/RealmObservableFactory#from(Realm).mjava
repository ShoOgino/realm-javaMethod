    @Override
    public Flowable<Realm> from(Realm realm) {
        final RealmConfiguration realmConfig = realm.getConfiguration();
        return Flowable.create(new FlowableOnSubscribe <Realm>() {
            @Override
            public void subscribe(final FlowableEmitter<Realm> emitter) throws Exception {
                // Instance is cached by Realm, so no need to keep strong reference
                final Realm observableRealm = Realm.getInstance(realmConfig);
                final RealmChangeListener<Realm> listener = new RealmChangeListener<Realm>() {
                    @Override
                    public void onChange(Realm realm) {
                        if (!emitter.isCancelled()) {
                            emitter.onNext(realm);
                        }
                    }
                };
                observableRealm.addChangeListener(listener);

                // Cleanup when stream is disposed
                emitter.setDisposable(Disposables.fromRunnable(new Runnable() {
                    @Override
                    public void run() {
                        observableRealm.removeChangeListener(listener);
                        observableRealm.close();
                    }
                }));

                // Emit current value immediately
                emitter.onNext(observableRealm);
            }
        }, BACK_PRESSURE_STRATEGY);
    }

