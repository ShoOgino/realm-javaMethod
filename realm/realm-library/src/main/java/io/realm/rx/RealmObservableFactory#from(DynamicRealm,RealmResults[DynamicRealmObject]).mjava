    @Override
    public Observable<RealmResults<DynamicRealmObject>> from(DynamicRealm realm, final RealmResults<DynamicRealmObject> results) {
        final RealmConfiguration realmConfig = realm.getConfiguration();
        return Observable.create(new Observable.OnSubscribe<RealmResults<DynamicRealmObject>>() {
            @Override
            public void call(final Subscriber<? super RealmResults<DynamicRealmObject>> subscriber) {
                // Gets instance to make sure that the Realm is open for as long as the
                // Observable is subscribed to it.
                final DynamicRealm observableRealm = DynamicRealm.getInstance(realmConfig);
                resultsRefs.get().acquireReference(results);

                final RealmChangeListener<RealmResults<DynamicRealmObject>> listener = new RealmChangeListener<RealmResults<DynamicRealmObject>>() {
                    @Override
                    public void onChange(RealmResults<DynamicRealmObject> result) {
                        if (!subscriber.isUnsubscribed()) {
                            subscriber.onNext(results);
                        }
                    }
                };
                results.addChangeListener(listener);
                subscriber.add(Subscriptions.create(new Action0() {
                    @Override
                    public void call() {
                        results.removeChangeListener(listener);
                        observableRealm.close();
                        resultsRefs.get().releaseReference(results);
                    }
                }));

                // Immediately calls onNext with the current value, as due to Realm's auto-update, it will be the latest
                // value.
                subscriber.onNext(results);
            }
        });
    }

