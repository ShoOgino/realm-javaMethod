    @Override
    public <E> Observable<CollectionChange<RealmResults<E>>> changesetsFrom(Realm realm, final RealmResults<E> results) {
        if (realm.isFrozen()) {
            return Observable.just(new CollectionChange<RealmResults<E>>(results, null));
        }
        final RealmConfiguration realmConfig = realm.getConfiguration();
        Scheduler scheduler = getScheduler();
        return Observable.create(new ObservableOnSubscribe<CollectionChange<RealmResults<E>>>() {
            @Override
            public void subscribe(final ObservableEmitter<CollectionChange<RealmResults<E>>> emitter) {
                // If the Realm has been closed, just create an empty Observable because we assume it is going to be disposed shortly.
                if (!results.isValid()) return;

                // Gets instance to make sure that the Realm is open for as long as the
                // Observable is subscribed to it.
                final Realm observableRealm = Realm.getInstance(realmConfig);
                resultsRefs.get().acquireReference(results);
                final OrderedRealmCollectionChangeListener<RealmResults<E>> listener = new OrderedRealmCollectionChangeListener<RealmResults<E>>() {
                    @Override
                    public void onChange(RealmResults<E> e, OrderedCollectionChangeSet changeSet) {
                        if (!emitter.isDisposed()) {
                            emitter.onNext(new CollectionChange<RealmResults<E>>(returnFrozenObjects ? results.freeze() : results, changeSet));
                        }
                    }
                };
                results.addChangeListener(listener);

                // Cleanup when stream is disposed
                emitter.setDisposable(Disposables.fromRunnable(new Runnable() {
                    @Override
                    public void run() {
                        if (!observableRealm.isClosed()) {
                            results.removeChangeListener(listener);
                            observableRealm.close();
                        }
                        resultsRefs.get().releaseReference(results);
                    }
                }));

                // Emit current value immediately
                emitter.onNext(new CollectionChange<>(returnFrozenObjects ? results.freeze() : results, null));
            }
        }).subscribeOn(scheduler).unsubscribeOn(scheduler);
    }

