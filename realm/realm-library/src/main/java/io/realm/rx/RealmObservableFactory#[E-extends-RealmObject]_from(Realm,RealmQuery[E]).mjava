    @Override
    public <E extends RealmObject> Observable<RealmQuery<E>> from(final Realm realm, final RealmQuery<E> query) {
        checkRxJavaAvailable();
        // Create copy of the RealmQuery on the current thread and prepare it for handover
        final RealmQuery<E> queryCopy = query.clone();

        return Observable.create(new Observable.OnSubscribe<RealmQuery<E>>() {
            @Override
            public void call(final Subscriber<? super RealmQuery<E>> subscriber) {
                // Create an Realm instance that is open for as long as the subscription is alive.
                final Realm subscriberRealm = Realm.getInstance(realm.getConfiguration());
                RealmQuery<E> queryClone = RealmQuery.copyQuery(subscriberRealm, query); // TODO Can I steal it?
                subscriber.add(Subscriptions.create(new Action0() {
                    @Override
                    public void call() {
                        subscriberRealm.close();
                    }
                }));
                subscriber.onNext(queryClone);
                subscriber.onCompleted();
            }
        });
    }

