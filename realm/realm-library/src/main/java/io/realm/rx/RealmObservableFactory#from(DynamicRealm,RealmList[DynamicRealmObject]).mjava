    @Override
    public Flowable<RealmList<DynamicRealmObject>> from(DynamicRealm realm, final RealmList<DynamicRealmObject> list) {
        final RealmConfiguration realmConfig = realm.getConfiguration();
        return Flowable.create(new FlowableOnSubscribe<RealmList<DynamicRealmObject>>() {
            @Override
            public void subscribe(final FlowableEmitter<RealmList<DynamicRealmObject>> emitter) throws Exception {
                // Gets instance to make sure that the Realm is open for as long as the
                // Observable is subscribed to it.
                final DynamicRealm observableRealm = DynamicRealm.getInstance(realmConfig);
                listRefs.get().acquireReference(list);
                final RealmChangeListener<RealmList<DynamicRealmObject>> listener = new RealmChangeListener<RealmList<DynamicRealmObject>>() {
                    @Override
                    public void onChange(RealmList<DynamicRealmObject> results) {
                        if (!emitter.isCancelled()) {
                            emitter.onNext(list);
                        }
                    }
                };
                list.addChangeListener(listener);

                // Cleanup when stream is disposed
                emitter.setDisposable(Disposables.fromRunnable(new Runnable() {
                    @Override
                    public void run() {
                        list.removeChangeListener(listener);
                        observableRealm.close();
                        listRefs.get().releaseReference(list);
                    }
                }));

                // Emit current value immediately
                emitter.onNext(list);

            }
        }, BACK_PRESSURE_STRATEGY);
    }

