    @Override
    public Flowable<DynamicRealmObject> from(DynamicRealm realm, final DynamicRealmObject object) {
        if (realm.isFrozen()) {
            return Flowable.just(object);
        }
        final RealmConfiguration realmConfig = realm.getConfiguration();
        Scheduler scheduler = getScheduler();
        return Flowable.create(new FlowableOnSubscribe<DynamicRealmObject>() {
            @Override
            public void subscribe(final FlowableEmitter<DynamicRealmObject> emitter) {
                // If the Realm has been closed, just create an empty Observable because we assume it is going to be disposed shortly.
                if (!RealmObject.isValid(object)) return;

                // Gets instance to make sure that the Realm is open for as long as the
                // Observable is subscribed to it.
                final DynamicRealm observableRealm = DynamicRealm.getInstance(realmConfig);
                objectRefs.get().acquireReference(object);
                final RealmChangeListener<DynamicRealmObject> listener = new RealmChangeListener<DynamicRealmObject>() {
                    @Override
                    public void onChange(DynamicRealmObject obj) {
                        if (!emitter.isCancelled()) {
                            emitter.onNext(returnFrozenObjects ? RealmObject.freeze(obj) : obj);
                        }
                    }
                };
                RealmObject.addChangeListener(object, listener);

                // Cleanup when stream is disposed
                emitter.setDisposable(Disposables.fromRunnable(new Runnable() {
                    @Override
                    public void run() {
                        if (!observableRealm.isClosed()) {
                            RealmObject.removeChangeListener(object, listener);
                            observableRealm.close();
                        }
                        objectRefs.get().releaseReference(object);
                    }
                }));

                // Emit current value immediately
                emitter.onNext(returnFrozenObjects ? RealmObject.freeze(object) : object);

            }
        }, BACK_PRESSURE_STRATEGY).subscribeOn(scheduler).unsubscribeOn(scheduler);
    }

