    /**
     * Login the user on the Realm Object Server. This is done synchronously, so calling this method on the Android
     * UI thread will always crash. A logged in user is required to be able to create a {@link SyncConfiguration}.
     *
     * @param credentials credentials to use.
     * @param authenticationUrl Server that can authenticate against.
     * @throws ObjectServerError if the login failed.
     */
    public static User login(final Credentials credentials, final String authenticationUrl) throws ObjectServerError {
        final URL authUrl;
        try {
            authUrl = new URL(authenticationUrl);
        } catch (MalformedURLException e) {
            throw new IllegalArgumentException("Invalid URL " + authenticationUrl + ".", e);
        }

        final AuthenticationServer server = SyncManager.getAuthServer();
        try {
            AuthenticateResponse result = server.authenticateUser(credentials, authUrl);
            if (result.isValid()) {
                SyncUser syncUser = new SyncUser(result.getRefreshToken(), authUrl);
                User user = new User(syncUser);
                RealmLog.info("Succeeded authenticating user.\n%s", user);
                SyncManager.getUserStore().put(UserStore.CURRENT_USER_KEY, user);
                SyncManager.notifyUserLoggedIn(user);
                return user;
            } else {
                RealmLog.info("Failed authenticating user.\n%s", result.getError());
                throw result.getError();
            }
        } catch (IOException e) {
            throw new ObjectServerError(ErrorCode.IO_EXCEPTION, e);
        } catch (Throwable e) {
            throw new ObjectServerError(ErrorCode.UNKNOWN, e);
        }
    }

