    /**
     * Initializes the Realm library and creates a default configuration that is ready to use. It is required to call
     * this method before interacting with any other of the Realm API's.
     *
     * A good place is in an {@link android.app.Application} subclass:
     * <pre>
     * {@code
     * public class MyApplication extends Application {
     *   \@Override
     *   public void onCreate() {
     *     super.onCreate();
     *     Realm.init(this);
     *   }
     * }
     * }
     * </pre>
     *
     * Remember to register it in the {@code AndroidManifest.xml} file:
     * <pre>
     * {@code
     * <?xml version="1.0" encoding="utf-8"?>
     * <manifest xmlns:android="http://schemas.android.com/apk/res/android" package="io.realm.example">
     * <application android:name=".MyApplication">
     *   // ...
     * </application>
     * </manifest>
     * }
     * </pre>
     *
     * @param context the Application Context.
     * @throws IllegalArgumentException if a {@code null} context is provided.
     * @see #getDefaultInstance()
     */
    public static synchronized void init(Context context) {
        if (BaseRealm.applicationContext == null) {
            if (context == null) {
                throw new IllegalArgumentException("Non-null context required.");
            }
            RealmCore.loadLibrary(context);
            RealmLog.add(io.realm.BuildConfig.DEBUG ? new AndroidLogger(Log.DEBUG) : new AndroidLogger(Log.WARN));
            defaultConfiguration = new RealmConfiguration.Builder(context).build();
            ObjectServerFacade.getSyncFacadeIfPossible().init(context);
            BaseRealm.applicationContext = context.getApplicationContext();
        }
    }

