    private OsRealmConfig(final RealmConfiguration config,
                          String fifoFallbackDir,
                          boolean autoUpdateNotification,
                          @Nullable OsSchemaInfo schemaInfo,
                          @Nullable OsSharedRealm.MigrationCallback migrationCallback,
                          @Nullable OsSharedRealm.InitializationCallback initializationCallback) {
        this.realmConfiguration = config;
        this.nativePtr = nativeCreate(config.getPath(), fifoFallbackDir, true, config.getMaxNumberOfActiveVersions());
        NativeContext.dummyContext.addReference(this);

        // Retrieve Sync settings first. We need syncRealmUrl to identify if this is a SyncConfig
        int j = 0;
        Object[] syncConfigurationOptions = ObjectServerFacade.getSyncFacadeIfPossible().getSyncConfigurationOptions(realmConfiguration);
        String syncUserIdentifier = (String) syncConfigurationOptions[j++];
        String syncRealmUrl = (String) syncConfigurationOptions[j++];
        String syncRealmAuthUrl = (String) syncConfigurationOptions[j++];
        String syncRefreshToken = (String) syncConfigurationOptions[j++];
        String syncAccessToken = (String) syncConfigurationOptions[j++];
        String deviceId = (String) syncConfigurationOptions[j++];
        Byte sessionStopPolicy = (Byte) syncConfigurationOptions[j++];
        String urlPrefix = (String)(syncConfigurationOptions[j++]);
        String customAuthorizationHeaderName = (String)(syncConfigurationOptions[j++]);
        //noinspection unchecked
        Map<String, String> customHeadersMap = (Map<String, String>) (syncConfigurationOptions[j++]);
        Byte clientResyncMode = (Byte) syncConfigurationOptions[j++];
        String encodedPartitionValue = (String) syncConfigurationOptions[j++];
        Object syncService = syncConfigurationOptions[j++];
        Long appPtr = (Long) syncConfigurationOptions[j++];

        // Convert the headers into a String array to make it easier to send through JNI
        // [key1, value1, key2, value2, ...]
        String[] customHeaders = new String[customHeadersMap != null ? customHeadersMap.size() * 2 : 0];
        if (customHeadersMap != null) {
            int i = 0;
            for (Map.Entry<String, String> entry : customHeadersMap.entrySet()) {
                customHeaders[i] = entry.getKey();
                customHeaders[i + 1] = entry.getValue();
                i = i + 2;
            }
        }

        // Set encryption key
        byte[] key = config.getEncryptionKey();
        if (key != null) {
            nativeSetEncryptionKey(nativePtr, key);
        }

        // Set durability
        nativeSetInMemory(nativePtr, config.getDurability() == Durability.MEM_ONLY);

        // Set auto update notification
        nativeEnableChangeNotification(nativePtr, autoUpdateNotification);

        // Set schema related params.
        SchemaMode schemaMode = SchemaMode.SCHEMA_MODE_MANUAL;
        if (config.isRecoveryConfiguration()) {
            schemaMode = SchemaMode.SCHEMA_MODE_IMMUTABLE;
        } else if (config.isReadOnly()) {
            schemaMode = SchemaMode.SCHEMA_MODE_READONLY;
        } else if (syncRealmUrl != null) {
            schemaMode = SchemaMode.SCHEMA_MODE_ADDITIVE_DISCOVERED;
        } else if (config.shouldDeleteRealmIfMigrationNeeded()) {
            schemaMode = SchemaMode.SCHEMA_MODE_RESET_FILE;
        }
        final long schemaVersion = config.getSchemaVersion();
        final long nativeSchemaPtr = schemaInfo == null ? 0 : schemaInfo.getNativePtr();
        this.migrationCallback = migrationCallback;
        nativeSetSchemaConfig(nativePtr, schemaMode.getNativeValue(), schemaVersion, nativeSchemaPtr, migrationCallback);

        // Compact on launch
        this.compactOnLaunchCallback = config.getCompactOnLaunchCallback();
        if (compactOnLaunchCallback != null) {
            nativeSetCompactOnLaunchCallback(nativePtr, compactOnLaunchCallback);
        }

        // Initial data transaction
        this.initializationCallback = initializationCallback;
        if (initializationCallback != null) {
            nativeSetInitializationCallback(nativePtr, initializationCallback);
        }

        URI resolvedRealmURI  = null;
        // Set sync config
        if (syncRealmUrl != null) {
            String resolvedSyncRealmUrl = nativeCreateAndSetSyncConfig(
                    appPtr,
                    nativePtr,
                    syncRealmUrl,
                    syncRealmAuthUrl,
                    syncUserIdentifier,
                    syncRefreshToken,
                    syncAccessToken,
                    deviceId,
                    sessionStopPolicy,
                    urlPrefix,
                    customAuthorizationHeaderName,
                    customHeaders,
                    clientResyncMode,
                    encodedPartitionValue,
                    syncService);
            try {
                resolvedSyncRealmUrl = syncRealmAuthUrl + urlPrefix.substring(1); // FIXME
                resolvedRealmURI = new URI(resolvedSyncRealmUrl);
            } catch (URISyntaxException e) {
                RealmLog.error(e, "Cannot create a URI from the Realm URL address");
            }

            // TODO: maybe expose the option for a custom Proxy or ProxySelector in the config?
            ProxySelector proxySelector = ProxySelector.getDefault();
            if (resolvedRealmURI != null && proxySelector != null) {
                URI websocketUrl = null;
                try {
                    // replace scheme in URI so that a proxy selector won't be confused by 'ws://' or 'wss://'
                    websocketUrl = new URI(resolvedSyncRealmUrl.replaceFirst("ws", "http"));
                } catch (URISyntaxException e) {
                    // we shouldn't ever get here if parsing the resolved url above worked
                    RealmLog.error(e, "Cannot create a URI from the Realm URL address");
                }
                List<java.net.Proxy> proxies = proxySelector.select(websocketUrl);
                if (proxies != null && !proxies.isEmpty()) {
                    java.net.Proxy proxy = proxies.get(0);
                    if (proxy.type() != java.net.Proxy.Type.DIRECT) {
                        byte proxyType = -1;
                        switch (proxy.type()) {
                            case HTTP:
                                proxyType = PROXYCONFIG_TYPE_VALUE_HTTP;
                                break;
                            default:
                                // this should never happen
                        }

                        if (proxy.type() == java.net.Proxy.Type.HTTP) {
                            java.net.SocketAddress address = proxy.address();
                            if (address instanceof java.net.InetSocketAddress) {
                                java.net.InetSocketAddress inetAddress = (java.net.InetSocketAddress) address;
                                nativeSetSyncConfigProxySettings(nativePtr, proxyType,
                                        inetAddress.getHostString(), inetAddress.getPort());
                            } else {
                                RealmLog.error("Unsupported proxy socket address type: " + address.getClass().getName());
                            }
                        } else {
                            // FIXME: enable once realm-sync adds support for SOCKS proxies
                            RealmLog.error("SOCKS proxies are not supported.");
                        }
                    }
                }

            }

        }
        this.resolvedRealmURI = resolvedRealmURI;
    }

