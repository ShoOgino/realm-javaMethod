    /**
     * Add a new column to the indexMap.
     * <p>
     * <b>For use only in subclass constructors!</b>.
     * Must be called from within the subclass constructor, to maintain the effectively-final contract.
     * <p>
     * No validation done here.  Presuming that all necessary validation takes place in {@code Proxy.validateTable}.
     *
     * @param table The table to search for the column.
     * @param columnName The name of the column whose index is sought.
     * @param columnType Type RealmType of the column.
     * @return the index of the column in the table
     */
    @SuppressWarnings("unused")
    protected final long addColumnDetails(Table table, String columnName, RealmFieldType columnType) {
        long columnIndex = table.getColumnIndex(columnName);
        if (columnIndex >= 0) {
            String linkedTableName = ((columnType != RealmFieldType.OBJECT) && (columnType != RealmFieldType.LIST))
                    ? null
                    : table.getLinkTarget(columnIndex).getClassName();

            indicesMap.put(columnName, new ColumnDetails(columnIndex, columnType, linkedTableName));
        }

        return columnIndex;
    }

