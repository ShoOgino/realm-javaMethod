    @SuppressWarnings("unchecked")
    private boolean updateRealmResultsQueries(SharedGroup sharedGroup, Result result) {
        for (Builder.QueryEntry  queryEntry : realmResultsEntries) {
            if (!isTaskCancelled()) {
                switch (queryEntry.queryArguments.type) {
                    case ArgumentsHolder.TYPE_FIND_ALL: {
                        long handoverTableViewPointer = TableQuery.nativeFindAllWithHandover
                                (sharedGroup.getNativePointer(),
                                        sharedGroup.getNativeReplicationPointer(),
                                        queryEntry.handoverQueryPointer, 0, Table.INFINITE, Table.INFINITE);
                        result.updatedTableViews.put(queryEntry.element, handoverTableViewPointer);
                        // invalidate the handover query pointer, in case this task is cancelled
                        // we will not try to close/delete a consumed pointer
                        queryEntry.handoverQueryPointer = 0L;
                        break;
                    }
                    case ArgumentsHolder.TYPE_DISTINCT: {
                        long handoverTableViewPointer = TableQuery.nativeGetDistinctViewWithHandover
                                (sharedGroup.getNativePointer(),
                                        sharedGroup.getNativeReplicationPointer(),
                                        queryEntry.handoverQueryPointer,
                                        queryEntry.queryArguments.columnIndex);
                        result.updatedTableViews.put(queryEntry.element, handoverTableViewPointer);
                        // invalidate the handover query pointer, in case this task is cancelled
                        // we will not try to close/delete a consumed pointer
                        queryEntry.handoverQueryPointer = 0L;
                        break;
                    }
                    case ArgumentsHolder.TYPE_FIND_ALL_SORTED: {
                        long handoverTableViewPointer = TableQuery.nativeFindAllSortedWithHandover(
                                sharedGroup.getNativePointer(),
                                sharedGroup.getNativeReplicationPointer(),
                                queryEntry.handoverQueryPointer,
                                0, Table.INFINITE, Table.INFINITE,
                                queryEntry.queryArguments.columnIndex,
                                queryEntry.queryArguments.sortOrder.getValue());

                        result.updatedTableViews.put(queryEntry.element, handoverTableViewPointer);
                        queryEntry.handoverQueryPointer = 0L;
                        break;
                    }
                    case ArgumentsHolder.TYPE_FIND_ALL_MULTI_SORTED:

                        long handoverTableViewPointer = TableQuery.nativeFindAllMultiSortedWithHandover(
                                sharedGroup.getNativePointer(),
                                sharedGroup.getNativeReplicationPointer(),
                                queryEntry.handoverQueryPointer,
                                0, Table.INFINITE, Table.INFINITE,
                                queryEntry.queryArguments.columnIndices,
                                TableQuery.getNativeSortOrderValues(queryEntry.queryArguments.sortOrders));

                        result.updatedTableViews.put(queryEntry.element, handoverTableViewPointer);
                        queryEntry.handoverQueryPointer = 0L;
                        break;
                    default:
                        throw new IllegalArgumentException("Query mode " + queryEntry.queryArguments.type + " not supported");
                }
            } else {
                for (Long handoverQueryPointer : result.updatedTableViews.values()) {
                    if (handoverQueryPointer != 0) {
                        TableQuery.nativeCloseQueryHandover(handoverQueryPointer);
                    }
                }
                return false;
            }
        }
        return true;
    }

