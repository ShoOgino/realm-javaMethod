    // The calling orders in JNI:
    // 1. getObservers() to get the array of current ObserverPair. (called in BindingContext::get_observed_rows)
    // 2. getObservedRowPtrs() with return value from step 1. To get an array of Row pointers. (called in
    //    BindingContext::get_observed_rows)
    // 3. Every RowObserverPair.onChange() deliver the changes to java. (called in BindingContext::did_change())
    // 4. clearRowRefs() to reset the strong reference we hold in the ObserverPair. (called in
    //    BindingContext::did_change())
    // Called by JNI
    @SuppressWarnings("unused")
    private RowObserverPair[] getObservers() {
        final List<RowObserverPair> pairList = new ArrayList<RowObserverPair>(rowObserverPairs.size());
        rowObserverPairs.foreach(new ObserverPairList.Callback<RowObserverPair>() {
            @Override
            public void onCalled(RowObserverPair pair, Object observer) {
                // TODO: Anyone knows why do we need to cast it here?
                // Keep a strong ref of the row! in case it gets GCed before clearRowRefs!
                pair.row = (UncheckedRow) pair.rowRef.get();
                pairList.add(pair);
            }
        });
        return pairList.toArray(new RowObserverPair[pairList.size()]);
    }

