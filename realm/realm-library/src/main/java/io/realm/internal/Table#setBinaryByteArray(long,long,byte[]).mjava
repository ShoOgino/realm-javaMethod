    /**
     * Sets the value for a (binary) cell.
     *
     * @param columnIndex column index of the cell.
     * @param rowIndex row index of the cell.
     * @param data the ByteBuffer must be allocated with {@code ByteBuffer.allocateDirect(len)}.
     */

    /*
    @Override
    public void setBinaryByteBuffer(long columnIndex, long rowIndex, ByteBuffer data) {
        if (immutable) throwImmutable();
        if (data == null)
            throw new IllegalArgumentException("Null array");
        if (data.isDirect())
            nativeSetByteBuffer(nativePtr, columnIndex, rowIndex, data);
        else
            throw new RuntimeException("Currently ByteBuffer must be allocateDirect()."); // FIXME: support other than allocateDirect
    }

    protected native void nativeSetByteBuffer(long nativeTablePtr, long columnIndex, long rowIndex, ByteBuffer data);
     */


    @Override
    public void setBinaryByteArray(long columnIndex, long rowIndex, byte[] data) {
        checkImmutable();
        nativeSetByteArray(nativePtr, columnIndex, rowIndex, data);
    }

