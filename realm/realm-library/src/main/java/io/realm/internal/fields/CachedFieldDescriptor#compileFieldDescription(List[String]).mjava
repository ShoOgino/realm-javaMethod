    @Override
    protected void compileFieldDescription(List<String> fields) {
        final int nFields = fields.size();
        long[] columnIndices = new long[nFields];
        long[] tableNativePointers = new long[nFields];
        String currentTable = className;

        ColumnInfo tableInfo;
        String columnName = null;
        RealmFieldType columnType = null;
        long columnIndex;
        for (int i = 0; i < nFields; i++) {
            columnName = fields.get(i);
            if ((columnName == null) || (columnName.length() <= 0)) {
                throw new IllegalArgumentException(
                        "Invalid query: Field descriptor contains an empty field.  A field description may not begin with or contain adjacent periods ('.').");
            }

            tableInfo = schema.getColumnInfo(currentTable);
            if (tableInfo == null) {
                throw new IllegalArgumentException(
                        String.format(Locale.US, "Invalid query: table '%s' not found in this schema.", currentTable));
            }

            columnIndex = tableInfo.getColumnIndex(columnName);
            if (columnIndex < 0) {
                throw new IllegalArgumentException(
                        String.format(Locale.US, "Invalid query: field '%s' not found in table '%s'.", columnName, currentTable));
            }

            columnType = tableInfo.getColumnType(columnName);
            // we don't check the type of the last field in the chain since it is done in the C++ code
            if (i < nFields - 1) {
                verifyInternalColumnType(currentTable, columnName, columnType);
            }
            currentTable = tableInfo.getLinkedTable(columnName);
            columnIndices[i] = columnIndex;
            tableNativePointers[i] = (columnType != RealmFieldType.LINKING_OBJECTS)
                    ? NativeObject.NULLPTR
                    : schema.getNativeTablePtr(currentTable);
        }

        setCompilationResults(className, columnName, columnType, columnIndices, tableNativePointers);
    }

