    @Override
    protected void compileFieldDescription(List<String> fields) {
        final int nFields = fields.size();
        long[] columnIndices = new long[nFields];
        long[] tableNativePointers = new long[nFields];

        String currentClassName = className;
        String currentColumnName = null;
        RealmFieldType currentColumnType = null;
        for (int i = 0; i < nFields; i++) {
            currentColumnName = fields.get(i);
            if ((currentColumnName == null) || (currentColumnName.length() <= 0)) {
                throw new IllegalArgumentException(
                        "Invalid query: Field descriptor contains an empty field.  A field description may not begin with or contain adjacent periods ('.').");
            }

            final ColumnInfo columnInfo = schema.getColumnInfo(currentClassName);
            if (columnInfo == null) {
                throw new IllegalArgumentException(
                        String.format(Locale.US, "Invalid query: class '%s' not found in this schema.", currentClassName));
            }

            final long columnIndex = columnInfo.getColumnIndex(currentColumnName);
            if (columnIndex < 0) {
                throw new IllegalArgumentException(
                        String.format(Locale.US, "Invalid query: field '%s' not found in table '%s'.", currentColumnName, currentClassName));
            }

            currentColumnType = columnInfo.getColumnType(currentColumnName);
            // we don't check the type of the last field in the chain since it is done in the C++ code
            if (i < nFields - 1) {
                verifyInternalColumnType(currentClassName, currentColumnName, currentColumnType);
            }
            currentClassName = columnInfo.getLinkedTable(currentColumnName);
            columnIndices[i] = columnIndex;
            tableNativePointers[i] = (currentColumnType != RealmFieldType.LINKING_OBJECTS)
                    ? NativeObject.NULLPTR
                    : schema.getNativeTablePtr(currentClassName);
        }

        setCompilationResults(className, currentColumnName, currentColumnType, columnIndices, tableNativePointers);
    }

