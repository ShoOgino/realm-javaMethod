    /**
     * Add a new column to the indexMap.
     * <p>
     * <b>For use only in subclass constructors!</b>.
     * Must be called from within the subclass constructor, to maintain the effectively-final contract.
     * <p>
     * No validation done here.  Presuming that all necessary validation takes place in {@code Proxy.validateTable}.
     *
     * @param javaFieldName The name of the java field name.
     * @param internalColumnName The underlying column name in the Realm file for the Java field name.
     * @param objectSchemaInfo the {@link OsObjectSchemaInfo} for the corresponding {@code RealmObject}.
     * @return the index of the column in the table.
     */
    protected final long addColumnDetails(String javaFieldName, String internalColumnName, OsObjectSchemaInfo objectSchemaInfo) {
        Property property = objectSchemaInfo.getProperty(internalColumnName);
        ColumnDetails cd = new ColumnDetails(property);
        indicesFromJavaFieldNames.put(javaFieldName, cd);
        indicesFromColumnNames.put(internalColumnName, cd);
        return property.getColumnIndex();
    }

