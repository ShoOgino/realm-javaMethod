    /**
     * Login the user on the Realm Object Server
     *
     * @param credentials credentials to use
     * @param authenticationUrl URL to authenticateUser against
     * @param callback callback when login has completed or failed. This callback will always happen on the UI thread.
     * @throws IllegalArgumentException
     */
    // FIXME Return task that can be canceled
    public static RealmAsyncTask loginAsync(final Credentials credentials, final String authenticationUrl, final Callback callback) {
        final URL authUrl;
        try {
            authUrl = new URL(authenticationUrl);
        } catch (MalformedURLException e) {
            throw new IllegalArgumentException("Invalid URL " + authenticationUrl + ".", e);
        }
        if (Looper.myLooper() == null) {
            throw new IllegalStateException("Asynchronous login is only possible from looper threads.");
        }

        final Handler handler = new Handler(Looper.myLooper());

        final AuthenticationServer server = SyncManager.getAuthServer();
        Future<?> authenticateRequest = SyncManager.NETWORK_POOL_EXECUTOR.submit(new Runnable() {
            @Override
            public void run() {
                // Don't retry authenticateUser requests. The app might want to respond to errors.
                try {
                    AuthenticateResponse result = server.authenticateUser(credentials, authUrl, credentials.shouldCreateUser());
                    if (result.isValid()) {
                        User user = new User(result.getRefreshToken().identity(), result.getRefreshToken(), authUrl);
                        postSuccess(user);
                    } else {
                        postError(result.getError());
                    }
                } catch (IOException e) {
                    postError(new ObjectServerError(ErrorCode.IO_EXCEPTION, e));
                }
            }

            private void postError(final ObjectServerError error) {
                RealmLog.info("Failed authenticating user.\n%s", error);
                if (callback != null) {
                    handler.post(new Runnable() {
                        @Override
                        public void run() {
                            callback.onError(error);
                        }
                    });
                }
            }

            private void postSuccess(final User user) {
                RealmLog.info("Succeeded authenticating user.\n%s", user);
                if (callback != null) {
                    handler.post(new Runnable() {
                        @Override
                        public void run() {
                            callback.onSuccess(user);
                        }
                    });
                }
            }
        });
        authenticateTask = new RealmAsyncTask(authenticateRequest, SyncManager.NETWORK_POOL_EXECUTOR);
        return authenticateTask;
    }

