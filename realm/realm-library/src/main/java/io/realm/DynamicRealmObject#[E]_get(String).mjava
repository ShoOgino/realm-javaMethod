    /**
     * Returns the value for the given field.
     *
     * @param fieldName name of the field.
     * @return the field value.
     * @throws ClassCastException if the field doesn't contain a field of the defined return type.
     */
    @SuppressWarnings("unchecked")
    public <E> E get(String fieldName) {
        proxyState.getRealm$realm().checkIfValid();

        long columnIndex = proxyState.getRow$realm().getColumnIndex(fieldName);
        RealmFieldType type = proxyState.getRow$realm().getColumnType(columnIndex);
        switch (type) {
            case BOOLEAN: return (E) Boolean.valueOf(proxyState.getRow$realm().getBoolean(columnIndex));
            case INTEGER: return (E) Long.valueOf(proxyState.getRow$realm().getLong(columnIndex));
            case FLOAT: return (E) Float.valueOf(proxyState.getRow$realm().getFloat(columnIndex));
            case DOUBLE: return (E) Double.valueOf(proxyState.getRow$realm().getDouble(columnIndex));
            case STRING: return (E) proxyState.getRow$realm().getString(columnIndex);
            case BINARY: return (E) proxyState.getRow$realm().getBinaryByteArray(columnIndex);
            case DATE: return (E) proxyState.getRow$realm().getDate(columnIndex);
            case OBJECT: return (E) getObject(fieldName);
            case LIST: return (E) getList(fieldName);
            case UNSUPPORTED_TABLE:
            case UNSUPPORTED_MIXED:
            default:
                throw new IllegalStateException("Field type not supported: " + type);
        }
    }

