    /**
     * Returns the value for the given field.
     *
     * @param fieldName name of the field.
     * @return the field value.
     * @throws ClassCastException if the field doesn't contain a field of the defined return type.
     */
    @SuppressWarnings({"unchecked", "TypeParameterUnusedInFormals"})
    public <E> E get(String fieldName) {
        proxyState.getRealm$realm().checkIfValid();

        long columnKey = proxyState.getRow$realm().getColumnKey(fieldName);
        if (proxyState.getRow$realm().isNull(columnKey)) {
            return null;
        }
        RealmFieldType type = proxyState.getRow$realm().getColumnType(columnKey);
        switch (type) {
            case BOOLEAN:
                return (E) Boolean.valueOf(proxyState.getRow$realm().getBoolean(columnKey));
            case INTEGER:
                return (E) Long.valueOf(proxyState.getRow$realm().getLong(columnKey));
            case FLOAT:
                return (E) Float.valueOf(proxyState.getRow$realm().getFloat(columnKey));
            case DOUBLE:
                return (E) Double.valueOf(proxyState.getRow$realm().getDouble(columnKey));
            case STRING:
                return (E) proxyState.getRow$realm().getString(columnKey);
            case BINARY:
                return (E) proxyState.getRow$realm().getBinaryByteArray(columnKey);
            case DATE:
                return (E) proxyState.getRow$realm().getDate(columnKey);
            case DECIMAL128:
                return (E) proxyState.getRow$realm().getDecimal128(columnKey);
            case OBJECT_ID:
                return (E) proxyState.getRow$realm().getObjectId(columnKey);
            case OBJECT:
                return (E) getObject(fieldName);
            case LIST:
                return (E) getList(fieldName);
            default:
                throw new IllegalStateException("Field type not supported: " + type);
        }
    }

