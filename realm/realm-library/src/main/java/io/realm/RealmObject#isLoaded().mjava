    /**
     * Checks if the query used to find this RealmObject has completed.
     *
     * Async methods like {@link RealmQuery#findFirstAsync()} return an {@link RealmObject} that represents the future
     * result of the {@link RealmQuery}. It can be considered similar to a {@link java.util.concurrent.Future} in this
     * regard.
     *
     * Once {@code isLoaded()} returns {@code true}, the object represents the query result even if the query
     * didn't find any object matching the query parameters. In this case the {@link RealmObject} will
     * become a "null" object.
     *
     * "Null" objects represents {@code null}.  An exception is throw if any accessor is called, so it is important to
     * also check {@link #isValid()} before calling any methods. A common pattern is:
     *
     * <pre>
     * {@code
     * Person person = realm.where(Person.class).findFirstAsync();
     * person.isLoaded(); // == false
     * person.addChangeListener(new RealmChangeListener() {
     *      \@Override
     *      public void onChange(Person person) {
     *          person.isLoaded(); // Always true here
     *          if (person.isValid()) {
     *              // It is safe to access the person.
     *          }
     *      }
     * });
     * }
     * </pre>
     *
     * Synchronous RealmObjects are by definition blocking hence this method will always return {@code true} for them.
     * This method will return {@code true} if called on an unmanaged object (created outside of Realm).
     *
     * @return {@code true} if the query has completed, {@code false} if the query is in
     * progress.
     *
     * @see #isValid()
     */
    public final boolean isLoaded() {
        return RealmObject.isLoaded(this);
    }

