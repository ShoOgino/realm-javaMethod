    private void getSession(SessionCallback callback) {
        // Work-around for a race condition happening when shutting down a Looper test and
        // Resetting the SyncManager
        // The problem is the `@After` block which runs as soon as the test method has completed.
        // For integration tests this will attempt to reset the SyncManager which will fail
        // if Realms are still open as they hold a reference to a session object.
        // By moving this into a Looper callback we ensure that a looper test can shutdown as
        // intended.
        // Generally it seems that using calling `RunInLooperThread.testComplete()` in a synchronous
        looperThread.postRunnable((Runnable) () -> {
            SyncUser user = UserFactory.createUniqueUser(Constants.AUTH_URL);
            SyncConfiguration syncConfiguration = configFactory
                    .createSyncConfigurationBuilder(user, Constants.SYNC_SERVER_URL)
                    .build();
            looperThread.closeAfterTest(Realm.getInstance(syncConfiguration));
            callback.onReady(SyncManager.getSession(syncConfiguration));
        });
    }

