    // A Realm that was opened before a user logged out should be able to resume uploading if the user logs back in.
    // this test validate the behaviour of SyncSessionStopPolicy::AfterChangesUploaded
    @Test
    @Ignore()
    public void uploadChangesWhenRealmOutOfScope() throws InterruptedException {
        final String uniqueName = UUID.randomUUID().toString();
        SyncCredentials credentials = SyncCredentials.usernamePassword(uniqueName, "password", true);
        SyncUser user = SyncUser.login(credentials, Constants.AUTH_URL);

        final char[] chars = new char[1_000_000];// 2MB
        Arrays.fill(chars, '.');
        final String twoMBString = new String(chars);

        final SyncConfiguration syncConfiguration = configFactory
                .createSyncConfigurationBuilder(user, Constants.SYNC_SERVER_URL)
                .sessionStopPolicy(OsRealmConfig.SyncSessionStopPolicy.AFTER_CHANGES_UPLOADED)
                .modules(new StringOnlyModule())
                .build();
        Realm realm = Realm.getInstance(syncConfiguration);

        realm.beginTransaction();
        // upload 50MB
        for (int i = 0; i < 25; i++) {
            realm.createObject(StringOnly.class).setChars(twoMBString);
        }
        realm.commitTransaction();
        realm.close();

        final CountDownLatch testCompleted = new CountDownLatch(1);

        final HandlerThread handlerThread = new HandlerThread("HandlerThread");
        handlerThread.start();
        Looper looper = handlerThread.getLooper();
        Handler handler = new Handler(looper);
        handler.post(new Runnable() {
            @Override
            public void run() {
                // using an admin user to open the Realm on different path on the device to monitor when all the uploads are done
                SyncUser admin = UserFactory.createAdminUser(Constants.AUTH_URL);
                SyncCredentials credentialsAdmin = SyncCredentials.accessToken(SyncTestUtils.getRefreshToken(admin).value(), "custom-admin-user");
                SyncUser adminUser = SyncUser.login(credentialsAdmin, Constants.AUTH_URL);

                SyncConfiguration adminConfig = configurationFactory.createSyncConfigurationBuilder(adminUser, syncConfiguration.getServerUrl().toString())
                        .modules(new StringOnlyModule())
                        .build();
                final Realm adminRealm = Realm.getInstance(adminConfig);
                RealmResults<StringOnly> all = adminRealm.where(StringOnly.class).findAll();
                RealmChangeListener<RealmResults<StringOnly>> realmChangeListener = new RealmChangeListener<RealmResults<StringOnly>>() {
                    @Override
                    public void onChange(RealmResults<StringOnly> stringOnlies) {
                        if (stringOnlies.size() == 25) {
                            for (int i = 0; i < 25; i++) {
                                assertEquals(1_000_000, stringOnlies.get(i).getChars().length());
                            }
                            adminRealm.close();
                            testCompleted.countDown();
                            handlerThread.quit();
                        }
                    }
                };
                all.addChangeListener(realmChangeListener);
            }
        });

        TestHelper.awaitOrFail(testCompleted, 60);

        user.logout();
        realm.close();
    }

