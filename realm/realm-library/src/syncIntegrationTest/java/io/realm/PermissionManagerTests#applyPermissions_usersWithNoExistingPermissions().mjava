    @Test
    @RunTestInLooperThread(emulateMainThread = true)
    public void applyPermissions_usersWithNoExistingPermissions() {
        final SyncUser user1 = UserFactory.createUser("user1@realm.io");
        final SyncUser user2 = UserFactory.createUser("user2@realm.io");
        PermissionManager pm1 = user1.getPermissionManager();
        looperThread.closeAfterTest(pm1);

        // Create request for giving all users with no existing permissions WRITE permissions to `user1`'s Realm.
        UserCondition condition = UserCondition.noExistingPermissions();
        AccessLevel accessLevel = AccessLevel.WRITE;
        final String url = createRemoteRealm(user1, "test");
        PermissionRequest request = new PermissionRequest(condition, url, accessLevel);

        pm1.applyPermissions(request, new PermissionManager.ApplyPermissionsCallback() {
            @Override
            public void onSuccess() {
                // Default permissions are not recorded in the __permission Realm for user2
                // Only way to check is by opening the Realm.
                SyncConfiguration config = new SyncConfiguration.Builder(user2, url)
                        .waitForInitialRemoteData()
                        .errorHandler(new SyncSession.ErrorHandler() {
                            @Override
                            public void onError(SyncSession session, ObjectServerError error) {
                                fail(error.toString());
                            }
                        })
                        .build();

                RealmAsyncTask task = Realm.getInstanceAsync(config, new Realm.Callback() {
                    @Override
                    public void onSuccess(Realm realm) {
                        realm.close();
                        looperThread.testComplete();
                    }

                    @Override
                    public void onError(Throwable exception) {
                        fail(exception.toString());
                    }
                });
                looperThread.keepStrongReference(task);
            }

            @Override
            public void onError(ObjectServerError error) {
                fail(error.toString());
            }
        });
    }

