    /**
     * Wait for a given permission to be present.
     *
     * @param permissions permission results.
     * @param user user that is being granted the permission.
     * @param urlSuffix the url suffix to listen for.
     * @param accessLevel the expected access level for 'user'.
     */
    private void assertPermissionPresent(RealmResults<Permission> permissions, final SyncUser user, String urlSuffix, final AccessLevel accessLevel) {
        RealmResults<Permission> filteredPermissions = permissions.where().endsWith("path", urlSuffix).findAllAsync();
        looperThread.keepStrongReference(permissions);
        filteredPermissions.addChangeListener(new RealmChangeListener<RealmResults<Permission>>() {
            @Override
            public void onChange(RealmResults<Permission> permissions) {
                switch(permissions.size()) {
                    case 0: return;
                    case 1:
                        Permission p = permissions.first();
                        assertEquals(accessLevel.mayRead(), p.mayRead());
                        assertEquals(accessLevel.mayWrite(), p.mayWrite());
                        assertEquals(accessLevel.mayManage(), p.mayManage());
                        assertEquals(user.getIdentity(), p.getUserId());
                        looperThread.testComplete();
                        break;
                    default:
                        fail("To many permissions matched: " + Arrays.toString(permissions.toArray()));
                }
            }
        });
    }

