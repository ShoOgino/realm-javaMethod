    @Test
    @RunTestInLooperThread
    public void includeLinkingObjects_throwsOnInvalidTypes() {
        SyncUser user1 = UserFactory.createUniqueUser(Constants.AUTH_URL);

        Realm realm = getPartialRealm(user1);
        realm.executeTransaction(r -> {
            RealmQuery<AllJavaTypes> query = r.where(AllJavaTypes.class).equalTo(AllJavaTypes.FIELD_STRING, "child");

            Set<String> invalidFields = Collections.unmodifiableSet(new HashSet<>(Arrays.asList(
                    AllJavaTypes.FIELD_IGNORED, AllJavaTypes.FIELD_STRING, AllJavaTypes.FIELD_SHORT, AllJavaTypes.FIELD_INT,
                    AllJavaTypes.FIELD_LONG, AllJavaTypes.FIELD_ID, AllJavaTypes.FIELD_BYTE, AllJavaTypes.FIELD_FLOAT, AllJavaTypes.FIELD_DOUBLE,
                    AllJavaTypes.FIELD_BOOLEAN, AllJavaTypes.FIELD_DATE, AllJavaTypes.FIELD_BINARY, AllJavaTypes.FIELD_OBJECT,
                    AllJavaTypes.FIELD_LIST, AllJavaTypes.FIELD_STRING_LIST, AllJavaTypes.FIELD_BINARY_LIST, AllJavaTypes.FIELD_BOOLEAN_LIST,
                    AllJavaTypes.FIELD_LONG_LIST, AllJavaTypes.FIELD_INTEGER_LIST, AllJavaTypes.FIELD_SHORT_LIST, AllJavaTypes.FIELD_BYTE_LIST,
                    AllJavaTypes.FIELD_DOUBLE_LIST, AllJavaTypes.FIELD_FLOAT_LIST, AllJavaTypes.FIELD_DATE_LIST)));

            for (String field : invalidFields) {
                try {
                    query.includeLinkingObjects(field);
                    fail(field + " failed.");
                } catch (IllegalArgumentException ignore) {
                }
            }
        });
        realm.close();
        looperThread.postRunnable(() -> {
            looperThread.testComplete();
        });
    }

