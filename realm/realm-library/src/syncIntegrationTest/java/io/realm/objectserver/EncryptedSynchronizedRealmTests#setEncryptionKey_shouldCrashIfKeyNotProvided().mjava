    // If an encrypted synced Realm is re-opened with the wrong key, throw an exception.
    @Test
    public void setEncryptionKey_shouldCrashIfKeyNotProvided() throws InterruptedException {
        // STEP 1: open a synced Realm using a local encryption key
        String username = UUID.randomUUID().toString();
        String password = "password";
        SyncUser user = SyncUser.logIn(SyncCredentials.usernamePassword(username, password, true), Constants.AUTH_URL);

        final byte[] randomKey = TestHelper.getRandomKey();

        SyncConfiguration configWithEncryption = configurationFactory.createSyncConfigurationBuilder(user, Constants.USER_REALM)
                .modules(new StringOnlyModule())
                .waitForInitialRemoteData()
                .errorHandler(new SyncSession.ErrorHandler() {
                    @Override
                    public void onError(SyncSession session, ObjectServerError error) {
                        fail(error.getErrorMessage());
                    }
                })
                .encryptionKey(randomKey)
                .build();

        Realm realm = Realm.getInstance(configWithEncryption);
        assertTrue(realm.isEmpty());

        realm.beginTransaction();
        realm.createObject(StringOnly.class).setChars("Hi Alice");
        realm.commitTransaction();

        // STEP 2: Close the Realm and log the user out to forget about it.
        realm.close();
        user.logOut();

        // STEP 3: try to open again the Realm without the encryption key should fail
        user = SyncUser.logIn(SyncCredentials.usernamePassword(username, password, false), Constants.AUTH_URL);
        SyncConfiguration configWithoutEncryption = configurationFactory.createSyncConfigurationBuilder(user, Constants.USER_REALM)
                .modules(new StringOnlyModule())
                .waitForInitialRemoteData()
                .errorHandler(new SyncSession.ErrorHandler() {
                    @Override
                    public void onError(SyncSession session, ObjectServerError error) {
                        fail(error.getErrorMessage());
                    }
                })
                .build();

        try {
            realm = Realm.getInstance(configWithoutEncryption);
            fail("It should not be possible to open the Realm without the encryption key set previously.");
        } catch (RealmError ignored) {
        } finally {
            if (realm != null) {
                realm.close();
            }
        }
    }

