    // retrieving a logged out user
    @Test
    @RunTestInLooperThread
    public void retrieve_logout() {
        final SyncUser adminUser = UserFactory.createAdminUser(Constants.AUTH_URL);

        final String username = UUID.randomUUID().toString();
        final String password = "password";
        final SyncCredentials credentials = SyncCredentials.usernamePassword(username, password, true);
        final SyncUser user = SyncUser.logIn(credentials, Constants.AUTH_URL);
        final String identity = user.getIdentity();

        // unless the refresh_token is revoked (via logout) the admin user can still retrieve the user
        // we make sure the token is revoked before trying to retrieve the user
        SyncManager.addAuthenticationListener(new AuthenticationListener() {
            @Override
            public void loggedIn(SyncUser user) {
                SyncManager.removeAuthenticationListener(this);
                looperThread.postRunnable(new Runnable() {
                    @Override
                    public void run() {
                        fail("loggedIn should not be invoked");
                    }
                });
            }

            @Override
            public void loggedOut(final SyncUser user) {
                SyncManager.removeAuthenticationListener(this);
                looperThread.postRunnable(new Runnable() {
                    @Override
                    public void run() {
                        assertFalse(user.isValid());
                        SyncUserInfo userInfo = adminUser.retrieveInfoForUser(username, SyncCredentials.IdentityProvider.USERNAME_PASSWORD);

                        assertNotNull(userInfo);
                        assertEquals(identity, userInfo.getIdentity());
                        assertFalse(userInfo.isAdmin());
                        assertTrue(userInfo.getMetadata().isEmpty());
                        assertEquals(username, userInfo.getAccounts().get(SyncCredentials.IdentityProvider.USERNAME_PASSWORD));

                        looperThread.testComplete();
                    }
                });

            }
        });
        user.logOut();
    }

