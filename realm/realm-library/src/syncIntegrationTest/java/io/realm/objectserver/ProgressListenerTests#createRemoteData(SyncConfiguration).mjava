    // Create remote data for a given user.
    private URI createRemoteData(final SyncConfiguration config) {
        final Realm realm = Realm.getInstance(config);
        final CountDownLatch changesUploaded = new CountDownLatch(1);
        final SyncSession session = SyncManager.getSession(config);
        final long beforeAdd = realm.where(AllTypes.class).count();
        writeSampleData(realm);

        final long threadId = Thread.currentThread().getId();

        session.addUploadProgressListener(ProgressMode.INDEFINITELY, new ProgressListener() {
            @Override
            public void onChange(Progress progress) {
                // FIXME: This check is to make sure before this method returns, all the uploads has been done.
                // See https://github.com/realm/realm-object-store/issues/581#issuecomment-339353832
                if (threadId == Thread.currentThread().getId()) {
                    return;
                }
                if (progress.isTransferComplete()) {
                    Realm realm = Realm.getInstance(config);
                    final long afterAdd = realm.where(AllTypes.class).count();
                    realm.close();

                    RealmLog.warn(String.format(Locale.ENGLISH,"createRemoteData upload %d/%d objects count:%d",
                            progress.getTransferredBytes(), progress.getTransferableBytes(), afterAdd));
                    // FIXME: Remove this after https://github.com/realm/realm-object-store/issues/581
                    if (afterAdd == TEST_SIZE + beforeAdd) {
                        session.removeProgressListener(this);
                        changesUploaded.countDown();
                    } else if (afterAdd < TEST_SIZE + beforeAdd) {
                        fail("The added objects are more than expected.");
                    }
                }
            }
        });
        TestHelper.awaitOrFail(changesUploaded);
        realm.close();
        return config.getServerUrl();
    }

