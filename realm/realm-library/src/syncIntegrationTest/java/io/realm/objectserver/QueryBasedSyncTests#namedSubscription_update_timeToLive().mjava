    @Test
    @RunTestInLooperThread
    public void namedSubscription_update_timeToLive() {
        SyncUser user = UserFactory.createUniqueUser(Constants.AUTH_URL);
        final Realm realm = getPartialRealm(user);
        looperThread.closeAfterTest(realm);

        RealmQuery<PartialSyncObjectA> query1 = realm.where(PartialSyncObjectA.class).greaterThan("number", 5);
        RealmResults<PartialSyncObjectA> results = query1.findAllAsync("update-test-ttl");
        results.addChangeListener((objects1, changeSet1) -> {
            if (changeSet1.isCompleteResult()) {
                results.removeAllChangeListeners();
                final Subscription sub1 = realm.getSubscription("update-test-ttl");
                final Date firstUpdatedAt = sub1.getUpdatedAt();
                final Date firstExpiresAt = sub1.getExpiresAt();
                assertEquals(Long.MAX_VALUE, sub1.getExpiresAt().getTime());
                assertEquals(Long.MAX_VALUE, sub1.getTimeToLive());

                SystemClock.sleep(2);
                RealmQuery<PartialSyncObjectA> query2 = realm.where(PartialSyncObjectA.class).equalTo("string", "foo");
                RealmResults<PartialSyncObjectA> results2 = query2.findAllAsync("update-test-ttl", 10, TimeUnit.MILLISECONDS, true);
                results2.addChangeListener((objects2, changeSet2) -> {
                    if (changeSet2.isCompleteResult()) {
                        assertEquals(10, sub1.getTimeToLive());
                        assertTrue(sub1.getExpiresAt().getTime() < firstExpiresAt.getTime());
                        assertTrue(firstUpdatedAt.getTime() < sub1.getUpdatedAt().getTime());
                        looperThread.testComplete();
                    }
                });
                looperThread.keepStrongReference(results2);
            }
        });
        looperThread.keepStrongReference(results);
    }

