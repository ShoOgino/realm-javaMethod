    @Test
    public void downloadProgressListener_indefinitely() throws InterruptedException {
        final AtomicInteger transferCompleted = new AtomicInteger(0);
        final CountDownLatch allChangesDownloaded = new CountDownLatch(1);
        final CountDownLatch startWorker = new CountDownLatch(1);
        final SyncUser userWithData = loginUser();

        URI serverUrl = createRemoteData(userWithData);

        // Create worker thread that puts data into another Realm.
        // This is to avoid blocking one progress listener while waiting for another to complete.
        Thread worker = new Thread(new Runnable() {
            @Override
            public void run() {
                TestHelper.awaitOrFail(startWorker);
                createRemoteData(userWithData);
            }
        });
        worker.start();

        SyncUser adminUser = loginAdminUser();
        final SyncConfiguration adminConfig = configFactory.createSyncConfigurationBuilder(adminUser, serverUrl.toString()).build();
        Realm adminRealm = Realm.getInstance(adminConfig);
        Realm userRealm = Realm.getInstance(configFactory.createSyncConfigurationBuilder(userWithData, Constants.SYNC_USER_REALM).build()); // Keep session alive
        SyncSession session = SyncManager.getSession(adminConfig);
        session.addDownloadProgressListener(ProgressMode.INDEFINITELY, new ProgressListener() {
            @Override
            public void onChange(Progress progress) {
                if (progress.isTransferComplete()) {
                    switch (transferCompleted.incrementAndGet()) {
                        case 1:
                            // Initial trigger when registering
                            assertTransferComplete(progress, false);
                            break;
                        case 2: {
                            assertTransferComplete(progress, true);
                            Realm adminRealm = Realm.getInstance(adminConfig);
                            assertEquals(TEST_SIZE, adminRealm.where(AllTypes.class).count());
                            adminRealm.close();
                            startWorker.countDown();
                            break;
                        }
                        case 3: {
                            assertTransferComplete(progress, true);
                            Realm adminRealm = Realm.getInstance(adminConfig);
                            assertEquals(TEST_SIZE * 2, adminRealm.where(AllTypes.class).count());
                            adminRealm.close();
                            allChangesDownloaded.countDown();
                            break;
                        }
                        default:
                            fail();
                    }
                }
            }
        });
        TestHelper.awaitOrFail(allChangesDownloaded);
        adminRealm.close();
        userRealm.close();
        userWithData.logout();
        adminUser.logout();
        worker.join();
    }

