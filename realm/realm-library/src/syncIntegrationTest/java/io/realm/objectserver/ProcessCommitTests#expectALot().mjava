    // FIXME: Ignore for now. They do still not work. It might be caused by two processes each creating
    // a Sync Client, but it needs to be investigated.
    //TODO send string from service and match
    //     replicate integration tests from Cocoa
    //     add gradle task to start the sh script automatically (create pid file, ==> run or kill existing process
    //     check the requirement for the issue again
    @Test
    @Ignore
    public void expectALot() throws Throwable {
        final Throwable[] exception = new Throwable[1];
        final CountDownLatch testFinished = new CountDownLatch(1);
        ExecutorService service = Executors.newSingleThreadExecutor();
        //noinspection unused
        final Future<?> future = service.submit(new Runnable() {
            @Override
            public void run() {
                try {
                    Looper.prepare();
                    Context targetContext = InstrumentationRegistry.getInstrumentation().getTargetContext();

                    SyncUser user = UserFactory.createDefaultUser(Constants.AUTH_URL);
                    String realmUrl = Constants.SYNC_SERVER_URL_2;
                    final SyncConfiguration syncConfig = new SyncConfiguration.Builder(user, realmUrl)
                            .name(SendsALot.class.getSimpleName())
                            .errorHandler(new SyncSession.ErrorHandler() {
                                @Override
                                public void onError(SyncSession session, ObjectServerError error) {
                                    fail("Sync failure: " + error);
                                }

                                @Override
                                public void onClientResetRequired(SyncSession session, ClientResetHandler handler) {
                                    fail("Client Reset");
                                }
                            })
                            .build();
                    Realm.deleteRealm(syncConfig);//TODO do this in Rule as async tests
                    final Realm realm = Realm.getInstance(syncConfig);
                    Intent intent = new Intent(targetContext, SendsALot.class);
                    targetContext.startService(intent);

                    final RealmResults<TestObject> all = realm.where(TestObject.class).findAllSorted("intProp");
                    all.addChangeListener(new RealmChangeListener<RealmResults<TestObject>>() {
                        @Override
                        public void onChange(RealmResults<TestObject> element) {
                            assertEquals(100, element.size());
                            for (int i = 0; i < 100; i++) {
                                assertEquals(i, element.get(i).getIntProp());
                                assertEquals("property " + i, element.get(i).getStringProp());
                            }

                            testFinished.countDown();
                        }
                    });

                    Looper.loop();

                } catch (Throwable e) {
                    exception[0] = e;
                    testFinished.countDown();
                }
            }
        });
        boolean testTimedOut = testFinished.await(30, TimeUnit.SECONDS);
        if (exception[0] != null) {
            throw exception[0];
        } else if (!testTimedOut) {
            fail("Test timed out ");
        }
    }

