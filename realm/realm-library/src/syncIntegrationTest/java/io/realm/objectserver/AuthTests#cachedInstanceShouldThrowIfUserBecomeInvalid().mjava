    // Cached instances of RealmConfiguration should not be allowed to be used if the user is no longer valid
    @Test
    public void cachedInstanceShouldThrowIfUserBecomeInvalid() throws InterruptedException {
        String username = UUID.randomUUID().toString();
        String password = "password";

        SyncCredentials credentials = SyncCredentials.usernamePassword(username, password, true);
        SyncUser user = SyncUser.login(credentials, Constants.AUTH_URL);
        final RealmConfiguration configuration = new SyncConfiguration.Builder(user, Constants.USER_REALM).build();
        Realm realm = Realm.getInstance(configuration);

        user.logout();
        assertFalse(user.isValid());

        final CountDownLatch backgroundThread = new CountDownLatch(1);
        // Should throw when using the invalid configuration form a different thread
        new Thread() {
            @Override
            public void run() {
                try {
                    Realm.getInstance(configuration);
                    fail("Invalid SyncConfiguration should throw");
                } catch (IllegalStateException expected) {
                } finally {
                    backgroundThread.countDown();
                }
            }
        }.start();

        backgroundThread.await();

        // it is ok to return the cached instance, since this use case is legit
        // user refresh token can timeout, or the token can be revoked from ROS
        // while running the Realm instance. So it doesn't make sense to break this behaviour
        Realm cachedInstance = Realm.getInstance(configuration);
        assertNotNull(cachedInstance);

        realm.close();
        cachedInstance.close();
    }

