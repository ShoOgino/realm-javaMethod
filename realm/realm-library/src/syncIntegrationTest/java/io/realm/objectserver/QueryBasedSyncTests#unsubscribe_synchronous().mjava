    @Test
    @RunTestInLooperThread
    public void unsubscribe_synchronous() throws InterruptedException {
        SyncUser user = UserFactory.createUniqueUser(Constants.AUTH_URL);
        createServerData(user, Constants.SYNC_SERVER_URL);

        // Create partial Realm that will wait for the subscriptions
        final SyncConfiguration partialSyncConfig = configurationFactory.createSyncConfigurationBuilder(user, Constants.SYNC_SERVER_URL)
                .name("partialSync")
                .initialData(r -> {
                    r.where(PartialSyncObjectA.class).greaterThan("number", 5).subscribe("my-sub");
                })
                .waitForInitialRemoteData()
                .addModule(new PartialSyncModule())
                .build();
        Realm realm = Realm.getInstance(partialSyncConfig);
        looperThread.closeAfterTest(realm);

        realm.executeTransaction(r -> {
            Subscription sub = r.getSubscription("my-sub");
            assertEquals(Subscription.State.ACTIVE, sub.getState());
            sub.unsubscribe();
            assertEquals(Subscription.State.INVALIDATED, sub.getState());
        });

        // Objects should eventually disappear from the device
        RealmResults<PartialSyncObjectA> results = realm.where(PartialSyncObjectA.class).findAll();
        results.addChangeListener((objects, changeSet) -> {
            if (objects.isEmpty()) {
                looperThread.testComplete();
            }
        });
    }

