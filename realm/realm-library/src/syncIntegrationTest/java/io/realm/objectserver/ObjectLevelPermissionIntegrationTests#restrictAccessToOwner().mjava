    // Restrict read/write permission, only the owner of the object can see/modify it
    @Test
    @RunTestInLooperThread()
    public void restrictAccessToOwner() throws InterruptedException {
        List schemaModules = Arrays.asList(new StringOnlyModule(), new OLPermissionModule(), new ObjectPermissionsModule());

        // connect with user1
        SyncUser user1 = UserFactory.createUniqueUser(Constants.AUTH_URL);
        SyncConfiguration user1SyncConfig = configurationFactory
                .createSyncConfigurationBuilder(user1, Constants.DEFAULT_REALM)
                .modules(schemaModules)
                .build();
        Realm user1Realm = Realm.getInstance(user1SyncConfig);
        user1Realm.beginTransaction();

        // added a new Role to restrict access to our objects
        Role role = user1Realm.createObject(Role.class, "role_" + user1.getIdentity());
        role.addMember(user1.getIdentity());

        // add permission so this will be only visible and modifiable from user1
        Permission userPermission = new Permission(role);
        userPermission.setCanRead(true);
        userPermission.setCanQuery(true);
        userPermission.setCanCreate(true);
        userPermission.setCanUpdate(true);
        userPermission.setCanUpdate(true);
        userPermission.setCanDelete(true);
        userPermission.setCanSetPermissions(true);
        userPermission.setCanModifySchema(true);

        PermissionObject permissionObject1 = user1Realm.createObject(PermissionObject.class, "Foo");
        permissionObject1.getPermissions().add(userPermission);
        user1Realm.commitTransaction();

        SyncManager.getSession(user1SyncConfig).uploadAllLocalChanges();
        user1Realm.close();

        // Connect with admin user and verify that user1 object is visible (non-partial Realm)
        SyncUser adminUser = UserFactory.createAdminUser(Constants.AUTH_URL);
        SyncConfiguration adminConfig = configurationFactory.createSyncConfigurationBuilder(adminUser, Constants.DEFAULT_REALM)
                .fullSynchronization()
                .modules(schemaModules)
                .waitForInitialRemoteData()
                .build();
        Realm adminRealm = Realm.getInstance(adminConfig);
        RealmResults<PermissionObject> allPermissionObjects = adminRealm.where(PermissionObject.class).findAll();
        assertEquals(1, allPermissionObjects.size());
        PermissionObject permissionObject = allPermissionObjects.first();
        assertEquals("Foo", permissionObject.getName());
        assertEquals(1, permissionObject.getPermissions().size());
        Permission permission = permissionObject.getPermissions().get(0);
        assertFullAccess(permission);
        adminRealm.close();

        // Connect with user 2 and verify that user1 object is not visible
        SyncUser user2 = UserFactory.createUniqueUser(Constants.AUTH_URL);
        SyncConfiguration syncConfig2 = configurationFactory.createSyncConfigurationBuilder(user2, Constants.DEFAULT_REALM)
                .modules(schemaModules)
                .build();
        Realm user2Realm = Realm.getInstance(syncConfig2);
        looperThread.closeAfterTest(user2Realm);
        RealmResults<PermissionObject> allAsync = user2Realm.where(PermissionObject.class).findAllAsync();
        looperThread.keepStrongReference(allAsync);
        // new object should not be visible for user2 partial sync
        allAsync.addChangeListener((permissionObjects2, changeSet) -> {
            RealmLog.info("State: " + changeSet.getState().toString() + ", complete: " + changeSet.isCompleteResult());
            if (changeSet.isCompleteResult()) {
                assertEquals(0, permissionObjects2.size());
                looperThread.testComplete();
            }
        });
    }

