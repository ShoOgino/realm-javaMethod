    // If client B encrypts its synced Realm, client A should be able to access that Realm with a different encryption key.
    @Test
    public void setEncryptionKey_differentClientsWithDifferentKeys() throws InterruptedException {
        // STEP 1: prepare a synced Realm for client A
        String username = UUID.randomUUID().toString();
        String password = "password";
        SyncUser user = SyncUser.logIn(SyncCredentials.usernamePassword(username, password, true), Constants.AUTH_URL);

        final byte[] randomKey = TestHelper.getRandomKey();

        SyncConfiguration configWithEncryption = configurationFactory.createSyncConfigurationBuilder(user, Constants.USER_REALM)
                .fullSynchronization()
                .modules(new StringOnlyModule())
                .waitForInitialRemoteData()
                .errorHandler(new SyncSession.ErrorHandler() {
                    @Override
                    public void onError(SyncSession session, ObjectServerError error) {
                        fail(error.getErrorMessage());
                    }
                })
                .encryptionKey(randomKey)
                .build();

        Realm realm = Realm.getInstance(configWithEncryption);
        assertTrue(realm.isEmpty());

        realm.beginTransaction();
        realm.createObject(StringOnly.class).setChars("Hi Alice");
        realm.commitTransaction();

        // STEP 2: make sure the changes gets to the server
        SyncManager.getSession(configWithEncryption).uploadAllLocalChanges();
        realm.close();

        // STEP 3: prepare a synced Realm for client B (admin user)
        SyncUser admin = UserFactory.createAdminUser(Constants.AUTH_URL);
        SyncCredentials credentials = SyncCredentials.accessToken(SyncTestUtils.getRefreshToken(admin).value(), "custom-admin-user");
        SyncUser adminUser = SyncUser.logIn(credentials, Constants.AUTH_URL);

        final byte[] adminRandomKey = TestHelper.getRandomKey();

        SyncConfiguration adminConfigWithEncryption = configurationFactory.createSyncConfigurationBuilder(adminUser, configWithEncryption.getServerUrl().toString())
                .fullSynchronization()
                .modules(new StringOnlyModule())
                .waitForInitialRemoteData()
                .errorHandler(new SyncSession.ErrorHandler() {
                    @Override
                    public void onError(SyncSession session, ObjectServerError error) {
                        fail(error.getErrorMessage());
                    }
                })
                .encryptionKey(adminRandomKey)
                .build();

        Realm adminRealm = Realm.getInstance(adminConfigWithEncryption);
        RealmResults<StringOnly> all = adminRealm.where(StringOnly.class).findAll();
        assertEquals(1, all.size());
        assertEquals("Hi Alice", all.get(0).getChars());

        adminRealm.beginTransaction();
        adminRealm.createObject(StringOnly.class).setChars("Hi Bob");
        adminRealm.commitTransaction();
        SyncManager.getSession(adminConfigWithEncryption).uploadAllLocalChanges();
        adminRealm.close();

        // STEP 4: client A can see changes from client B (although they're using different encryption keys)
        realm = Realm.getInstance(configWithEncryption);
        SyncManager.getSession(configWithEncryption).downloadAllServerChanges();// force download latest commits from ROS
        realm.refresh(); // Not calling refresh will still point to the previous version of the Realm without the latest admin commit  "Hi Bob"
        assertEquals(2, realm.where(StringOnly.class).count());

        adminRealm = Realm.getInstance(adminConfigWithEncryption);

        RealmResults<StringOnly> allSorted = realm.where(StringOnly.class).sort(StringOnly.FIELD_CHARS).findAll();
        RealmResults<StringOnly> allSortedAdmin = adminRealm.where(StringOnly.class).sort(StringOnly.FIELD_CHARS).findAll();
        assertEquals("Hi Alice", allSorted.get(0).getChars());
        assertEquals("Hi Bob", allSorted.get(1).getChars());

        assertEquals("Hi Alice", allSortedAdmin.get(0).getChars());
        assertEquals("Hi Bob", allSortedAdmin.get(1).getChars());

        adminRealm.close();
        adminUser.logOut();

        realm.close();
        user.logOut();
    }

