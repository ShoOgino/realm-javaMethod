    private UpdateResult updateInternal(UpdateType type, final Bson filter, final Bson update, @Nullable final UpdateOptions options) {
        AtomicReference<UpdateResult> success = new AtomicReference<>(null);
        AtomicReference<ObjectServerError> error = new AtomicReference<>(null);
        OsJNIResultCallback<UpdateResult> callback = new OsJNIResultCallback<UpdateResult>(success, error) {
            @Override
            protected UpdateResult mapSuccess(Object result) {
                // FIXME: see OsMongoCollection.cpp - collection_mapper_update. There surely is a better way to do this
                BsonArray array = JniBsonProtocol.decode((String) result, BsonArray.class, codecRegistry);
                long matchedCount = array.get(0).asInt32().getValue();
                long modifiedCount = array.get(1).asInt32().getValue();

                // FIXME: this seems ugly, but Stitch allows retuning null for upsertedId
                BsonValue upsertedId = array.get(2);
                if (upsertedId instanceof BsonNull) {
                    upsertedId = null;
                }
                return new UpdateResult(matchedCount, modifiedCount, upsertedId);
            }
        };

        String jsonFilter = JniBsonProtocol.encode(filter, codecRegistry);
        String jsonUpdate = JniBsonProtocol.encode(update, codecRegistry);

        switch (type) {
            case ONE:
                if (options == null) {
                    nativeUpdateOne(nativePtr, jsonFilter, jsonUpdate, callback);
                } else {
                    nativeUpdateOneWithOptions(nativePtr, jsonFilter, jsonUpdate, options.isUpsert(), callback);
                }
                break;
            case MANY:
                if (options == null) {
                    nativeUpdateMany(nativePtr, jsonFilter, jsonUpdate, callback);
                } else {
                    nativeUpdateManyWithOptions(nativePtr, jsonFilter, jsonUpdate, options.isUpsert(), callback);
                }
                break;
        }
        return ResultHandler.handleResult(success, error);
    }

