    private <ResultT> ResultT findOneInternal(@Nullable final Bson filter,
                                              @Nullable final FindOptions options,
                                              final Class<ResultT> resultClass) {
        AtomicReference<ResultT> success = new AtomicReference<>(null);
        AtomicReference<ObjectServerError> error = new AtomicReference<>(null);
        OsJNIResultCallback<ResultT> callback = new OsJNIResultCallback<ResultT>(success, error) {
            @Override
            protected ResultT mapSuccess(Object result) {
                return findSuccessMapper(result, resultClass);
            }
        };

        String encodedFilter = (filter == null) ?
                JniBsonProtocol.encode(new Document(), codecRegistry) :
                JniBsonProtocol.encode(filter, codecRegistry);
        if (options == null) {
            nativeFindOne(nativePtr, encodedFilter, callback);
        } else {
            String projectionString = JniBsonProtocol.encode(options.getProjection(), codecRegistry);
            String sortString = JniBsonProtocol.encode(options.getSort(), codecRegistry);

            nativeFindOneWithOptions(nativePtr, encodedFilter, projectionString, sortString, options.getLimit(), callback);
        }

        return ResultHandler.handleResult(success, error);
    }

