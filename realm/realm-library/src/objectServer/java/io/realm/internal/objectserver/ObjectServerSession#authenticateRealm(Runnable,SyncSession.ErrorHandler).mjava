    // Authenticate by getting access tokens for the specific Realm
    void authenticateRealm(final Runnable onSuccess, final SyncSession.ErrorHandler errorHandler) {
        if (networkRequest != null) {
            networkRequest.cancel();
        }
        // Authenticate in a background thread. This allows incremental backoff and retries in a safe manner.
        Future<?> task = SyncManager.NETWORK_POOL_EXECUTOR.submit(new ExponentialBackoffTask<AuthenticateResponse>() {
            @Override
            protected AuthenticateResponse execute() {
                return authServer.loginToRealm(
                        user.getUserToken(),
                        configuration.getServerUrl(),
                        user.getAuthenticationUrl()
                );
            }

            @Override
            protected void onSuccess(AuthenticateResponse response) {
                ObjectServerUser.AccessDescription desc = new ObjectServerUser.AccessDescription(
                        response.getAccessToken(),
                        configuration.getPath(),
                        configuration.shouldDeleteRealmOnLogout()
                );
                user.addRealm(configuration.getServerUrl(), desc);
                onSuccess.run();
            }

            @Override
            protected void onError(AuthenticateResponse response) {
                errorHandler.onError(getUserSession(), response.getError());
            }
        });
        networkRequest = new RealmAsyncTaskImpl(task, SyncManager.NETWORK_POOL_EXECUTOR);
    }

