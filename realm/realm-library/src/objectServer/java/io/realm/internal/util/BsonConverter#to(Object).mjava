    /**
     * Converts value object to BSON value based on type.
     *
     * Converts primitive boxed types to the equivalent BSON equivalent value object and {@link List}
     * of values into {@link BsonArray} of converted values.
     *
     * {@link BsonValue} objects are left as is.
     *
     * @param value The object to convert.
     * @return BSON value representation of the origin value object.
     *
     * @throws IllegalArgumentException If the object could not be mapped to a BSON type.
     */
    // FIXME Review supported types...any obvious types missing?
    public static BsonValue to(Object value) {
        if (value instanceof BsonValue) {
            return (BsonValue) value;
        }
        // Convert list to BsonArray
        else if (value instanceof List) {
            return BsonConverter.to(((List) value).toArray());
        }
        // Native types
        else if (value instanceof Integer) {
            return new BsonInt32((Integer) value);
        } else if (value instanceof Long) {
            return new BsonInt64((Long) value);
        } else if (value instanceof Float) {
            return new BsonDouble((Float) value);
        } else if (value instanceof Double) {
            return new BsonDouble((Double) value);
        } else if (value instanceof Boolean) {
            return new BsonBoolean((Boolean) value);
        } else if (value instanceof String){
            return new BsonString((String) value);
        } else if (value instanceof byte[]) {
            return new BsonBinary((byte[]) value);
        }
        // Bson values
        else if (value instanceof ObjectId) {
            return new BsonObjectId((ObjectId) value);
        }
        else if (value instanceof Decimal128) {
            return new BsonDecimal128((Decimal128) value);
        }
        // FIXME Missing Realm types
        // Date
        // Object
        // List
        // LinkingObject
        // FIXME Missing Bson value
        throw new IllegalArgumentException("Conversion to BSON value not supported for " + value.getClass().getName());
    }

