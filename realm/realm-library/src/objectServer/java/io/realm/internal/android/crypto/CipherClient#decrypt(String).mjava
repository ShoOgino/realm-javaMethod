    /**
     * Takes a previously {@link #encrypt(String)} to decrypted it
     * using the Android Key Store.
     *
     * @param user_encrypted represents the encrypted Token of a {@link io.realm.User}.
     * @return the decrypted Token.
     * @throws KeyStoreException in case the KeyStore is locked or other error.
     */
    public String decrypt(String user_encrypted) throws KeyStoreException {
        if (syncCrypto.is_keystore_unlocked()) {
            try {
                String decrypted = syncCrypto.decrypt(user_encrypted);
                return decrypted;
            } catch (KeyStoreException ex) {
                throw new KeyStoreException(ex);
            }
        } else {
            throw new KeyStoreException("Trying to use SecureUserStore without an unlocked KeyStore");
        }
    }

