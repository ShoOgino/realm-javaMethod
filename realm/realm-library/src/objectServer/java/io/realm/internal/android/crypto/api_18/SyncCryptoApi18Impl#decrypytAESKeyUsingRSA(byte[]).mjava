    private SecretKeySpec decrypytAESKeyUsingRSA(byte[] aesEncKey) throws KeyStoreException {
        try {
            java.security.KeyStore.PrivateKeyEntry privateKeyEntry = (java.security.KeyStore.PrivateKeyEntry) keyStore.getEntry(alias, null);
            Cipher cipher = CipherFactory.get();
            cipher.init(Cipher.DECRYPT_MODE, privateKeyEntry.getPrivateKey());
            CipherInputStream cipherInputStream = new CipherInputStream(new ByteArrayInputStream(aesEncKey), cipher);

            ArrayList<Byte> values = new ArrayList<>();
            int nextByte;
            while ((nextByte = cipherInputStream.read()) != -1) {
                values.add((byte)nextByte);
            }

            final byte[] bytes = new byte[values.size()];
            for (int i = 0; i < bytes.length; i++) {
                bytes[i] = values.get(i).byteValue();
            }

            SecretKeySpec originalKey = new SecretKeySpec(bytes, "AES");
            return originalKey;
        } catch (NoSuchPaddingException e) {
            throw new KeyStoreException(e);
        } catch (NoSuchAlgorithmException e) {
            throw new KeyStoreException(e);
        } catch (NoSuchProviderException e) {
            throw new KeyStoreException(e);
        } catch (UnsupportedEncodingException e) {
            throw new KeyStoreException(e);
        } catch (IOException e) {
            throw new KeyStoreException(e);
        } catch (InvalidKeyException e) {
            throw new KeyStoreException(e);
        } catch (UnrecoverableEntryException e) {
            throw new KeyStoreException(e);
        } catch (KeyStoreException e) {
            throw new KeyStoreException(e);
        }
    }

