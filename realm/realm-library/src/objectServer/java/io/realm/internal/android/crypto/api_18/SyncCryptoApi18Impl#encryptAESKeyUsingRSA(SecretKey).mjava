    private byte[] encryptAESKeyUsingRSA(SecretKey key) throws KeyStoreException {
        try {
            java.security.KeyStore.PrivateKeyEntry privateKeyEntry = (java.security.KeyStore.PrivateKeyEntry) keyStore.getEntry(alias, null);
            RSAPublicKey publicKey = (RSAPublicKey) privateKeyEntry.getCertificate().getPublicKey();

            Cipher cipher = CipherFactory.get();

            cipher.init(Cipher.ENCRYPT_MODE, publicKey);

            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
            CipherOutputStream cipherOutputStream = new CipherOutputStream(outputStream, cipher);
            cipherOutputStream.write(key.getEncoded());
            cipherOutputStream.close();

            return outputStream.toByteArray();
        } catch (NoSuchPaddingException e) {
            throw new KeyStoreException(e);
        } catch (NoSuchAlgorithmException e) {
            throw new KeyStoreException(e);
        } catch (NoSuchProviderException e) {
            throw new KeyStoreException(e);
        } catch (InvalidKeyException e) {
            throw new KeyStoreException(e);
        } catch (KeyStoreException e) {
            throw new KeyStoreException(e);
        } catch (UnrecoverableEntryException e) {
            throw new KeyStoreException(e);
        } catch (IOException e) {
            throw new KeyStoreException(e);
        }
    }

