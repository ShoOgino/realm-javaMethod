    /**
     * Unwrap BSON values for types that just wraps another similar Java type.
     *
     * @param value The BSON value to convert.
     * @param <T> The requested result type of the conversion.
     * @return The converted value object corresponding to the given {@code value}.
     *
     * @throws IllegalArgumentException if not able to convert the value to the requested type.
     * @throws ClassCastException if the BsonValue cannot be converted to the requested type
     *  parameters.
     */
    public static <T> T from(Class<T> clz, BsonValue value) {
        Object result = null;

        if (BsonValue.class.isAssignableFrom(clz)) {
            if (clz.isInstance(value)) {
                return (T) value;
            } else {
                throw new ClassCastException("Cannot convert " + value + " to " + clz.getName());
            }
        }
        BsonType bsonType = value.getBsonType();
        switch (bsonType) {
//            case END_OF_DOCUMENT:
//                break;
            case DOUBLE:
                result = value.asDouble().getValue();
                break;
            case STRING:
                result = value.asString().getValue();
                break;
//            case DOCUMENT:
//                break;
            case ARRAY:
                result = value.asArray().getValues();
                break;
            case BINARY:
                result = value.asBinary().getData();
                break;
//            case UNDEFINED:
//                break;
            case OBJECT_ID:
                result = value.asObjectId().getValue();
                break;
            case BOOLEAN:
                result = value.asBoolean().getValue();
                break;
//            case DATE_TIME:
//                break;
//            case NULL:
//                break;
//            case REGULAR_EXPRESSION:
//                break;
//            case DB_POINTER:
//                break;
//            case JAVASCRIPT:
//                break;
//            case SYMBOL:
//                break;
//            case JAVASCRIPT_WITH_SCOPE:
//                break;
            case INT32:
                result = value.asInt32().getValue();
                break;
//            case TIMESTAMP:
//                break;
            case INT64:
                result = value.asInt64().getValue();
                break;
            case DECIMAL128:
                result = value.asDecimal128().getValue();
                break;
//            case MIN_KEY:
//                break;
//            case MAX_KEY:
//                break;
            default:
                // FIXME
                throw new IllegalArgumentException("Not able to convert " + value + " to " + clz.getName());
        }
        if (clz.isInstance(result)) {
            return (T) result;
        } else  {
            throw new IllegalArgumentException("Not able to convert " + value + " to " + clz.getName());
        }
    }

