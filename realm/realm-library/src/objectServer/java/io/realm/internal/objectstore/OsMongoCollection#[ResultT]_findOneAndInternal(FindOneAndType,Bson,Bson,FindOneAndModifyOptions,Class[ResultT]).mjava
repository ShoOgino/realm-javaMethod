    private  <ResultT> ResultT findOneAndInternal(final FindOneAndType type,
                                                  final Bson filter,
                                                  final Bson update,
                                                  @Nullable final FindOneAndModifyOptions options,
                                                  final Class<ResultT> resultClass) {
        AtomicReference<ResultT> success = new AtomicReference<>(null);
        AtomicReference<ObjectServerError> error = new AtomicReference<>(null);
        OsJNIResultCallback<ResultT> callback = new OsJNIResultCallback<ResultT>(success, error) {
            @Override
            protected ResultT mapSuccess(Object result) {
                return findSuccessMapper(result, resultClass);
            }
        };

        String encodedFilter = JniBsonProtocol.encode(filter, codecRegistry);
        String encodedUpdate = JniBsonProtocol.encode(update, codecRegistry);
        String encodedProjection = null;
        String encodedSort = null;
        if (options != null) {
            encodedProjection = JniBsonProtocol.encode(options.getProjection(), codecRegistry);
            encodedSort = JniBsonProtocol.encode(options.getSort(), codecRegistry);
        }

        switch (type) {
            case UPDATE:
                if (options == null) {
                    nativeFindOneAndUpdate(nativePtr, encodedFilter, encodedUpdate, callback);
                } else {
                    nativeFindOneAndUpdateWithOptions(nativePtr, encodedFilter, encodedUpdate, encodedProjection, encodedSort, options.isUpsert(), options.isReturnNewDocument(), callback);
                }
                break;
            case REPLACE:
                if (options == null) {
                    nativeFindOneAndReplace(nativePtr, encodedFilter, encodedUpdate, callback);
                } else {
                    nativeFindOneAndReplaceWithOptions(nativePtr, encodedFilter, encodedUpdate, encodedProjection, encodedSort, options.isUpsert(), options.isReturnNewDocument(), callback);
                }
                break;
            case DELETE:
                if (options == null) {
                    nativeFindOneAndDelete(nativePtr, encodedFilter, callback);
                } else {
                    nativeFindOneAndDeleteWithOptions(nativePtr, encodedFilter, encodedProjection, encodedSort, options.isUpsert(), options.isReturnNewDocument(), callback);
                }
                break;
        }

        return ResultHandler.handleResult(success, error);
    }

