    private okhttp3.Request makeRequest(String method, String url, Map<String, String> headers, String body){
        okhttp3.Request.Builder builder = new okhttp3.Request.Builder().url(url);

        // Ensure that we have correct custom headers until OS handles it.

        // 1. First of all add all custom headers
        for (Map.Entry<String, String> entry : getCustomRequestHeaders().entrySet()) {
            builder.addHeader(entry.getKey(), entry.getValue());
        }
        // 2. Then replace default authorization header with custom one if present
        String authorizationHeaderValue = headers.get(AppConfiguration.DEFAULT_AUTHORIZATION_HEADER_NAME);
        String authorizationHeaderName = getAuthorizationHeaderName();
        if (authorizationHeaderValue != null && !AppConfiguration.DEFAULT_AUTHORIZATION_HEADER_NAME.equals(authorizationHeaderName)) {
            headers.remove(AppConfiguration.DEFAULT_AUTHORIZATION_HEADER_NAME);
            headers.put(authorizationHeaderName, authorizationHeaderValue);
        }

        // 3. Finally add all headers defined by Object Store
        for (Map.Entry<String, String> entry : headers.entrySet()) {
            builder.addHeader(entry.getKey(), entry.getValue());
        }
        
        switch (method) {
            case "get":
                builder.get();
                break;
            case "delete":
                builder.delete(RequestBody.create(JSON, body));
                break;
            case "patch":
                builder.patch(RequestBody.create(JSON, body));
                break;
            case "post":
                builder.post(RequestBody.create(JSON, body));
                break;
            case "put":
                builder.put(RequestBody.create(JSON, body));
                break;
            default:
                throw new IllegalArgumentException("Unknown method type: " + method);
        }

        return builder.build();
    }

