        /**
         * Creates an instance of the Builder for the SyncConfiguration.
         * <p>
         * Opening a synchronized Realm requires a valid user and an unique URI that identifies that Realm. In URIs,
         * {@code /~/} can be used as a placeholder for a user ID in case the Realm should only be available to one
         * user e.g., {@code "realm://objectserver.realm.io/~/default"}.
         * <p>
         * The URL cannot end with {@code .realm}, {@code .realm.lock} or {@code .realm.management}.
         * <p>
         * The {@code /~/} will automatically be replaced with the user ID when creating the {@link SyncConfiguration}.
         * <p>
         * Moreover, the URI defines the local location on disk. The default location of a synchronized Realm file is
         * {@code /data/data/<packageName>/files/realm-object-server/<user-id>/<last-path-segment>}, but this behavior
         * can be overwritten using {@link #name(String)} and {@link #directory(File)}.
         * <p>
         * Many Android devices are using FAT32 file systems. FAT32 file systems have a limitation that
         * file names cannot be longer than 255 characters. Moreover, the entire URI should not exceed 256 characters.
         * If file name and underlying path are too long to handle for FAT32, a shorter unique name will be generated.
         * See also @{link https://msdn.microsoft.com/en-us/library/aa365247(VS.85).aspx}.
         *
         * @param user the user for this Realm. An authenticated {@link SyncUser} is required to open any Realm managed
         *             by a Realm Object Server.
         * @param uri URI identifying the Realm. If only a path like {@code /~/default} is given, the configuration will
         *            assume the file is located on the same server returned by {@link SyncUser#getAuthenticationUrl()}.
         *
         * @see SyncUser#isValid()
         */
        public Builder(SyncUser user, String uri) {
            this(BaseRealm.applicationContext, user, uri);
        }

