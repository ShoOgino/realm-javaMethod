    /**
     * Fetches a specific user API key associated with the user.
     *
     * @param id the id of the key to fetch.
     * @param callback callback used when the key was fetched or the call failed. The callback
     * will always happen on the same thread as this method was called on.
     * @throws IllegalStateException if called from a non-looper thread.
     */
    public RealmAsyncTask fetchApiKeyAsync(ObjectId id, RealmApp.Callback<RealmUserApiKey> callback) {
        Util.checkLooperThread("Asynchronous fetching an api key is only possible from looper threads.");
        return new RealmApp.Request<RealmUserApiKey>(SyncManager.NETWORK_POOL_EXECUTOR, callback) {
            @Override
            public RealmUserApiKey run() throws ObjectServerError {
                return fetchApiKey(id);
            }
        }.start();
    }

