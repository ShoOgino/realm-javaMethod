    /**
     * Complete the password reset flow by using the reset token sent to the user's email as a one-time authorization
     * token to change the password.
     * <p>
     * This can only be used for users who authenticated with the {@link SyncCredentials.IdentityProvider#USERNAME_PASSWORD}
     * provider, and passed a valid email address as a username.
     * <p>
     * By default, Realm Object Server will send a link to the user's email that will redirect to a webpage where
     * they can enter their new password. If you wish to provide a native UX, you may wish to modify the password
     * authentication provider to use a custom URL with deep linking, so you can open the app, extract the token, and
     * navigate to a view that allows to change the password within the app.
     *
     * @param resetToken the token that was sent to the user's email address.
     * @param newPassword the user's new password.
     * @param authenticationUrl the url used to authenticate the user.
     * @throws IllegalStateException if this method is called on the UI thread.
     * @throws IllegalArgumentException if no {@code token} or {@code newPassword} was provided.
     * @throws ObjectServerError if an error happened on the server.
     */
    public static void completePasswordReset(String resetToken, String newPassword, String authenticationUrl) {
        if (Util.isEmptyString(resetToken)) {
            throw new IllegalArgumentException("Not-null 'token' required.");
        }
        if (Util.isEmptyString(newPassword)) {
            throw new IllegalArgumentException("Not-null 'newPassword' required.");
        }
        URL authUrl = getUrl(authenticationUrl);
        AuthenticationServer authServer = SyncManager.getAuthServer();
        UpdateAccountResponse response = authServer.completePasswordReset(resetToken, newPassword, authUrl);
        if (!response.isValid()) {
            throw response.getError();
        }
    }

