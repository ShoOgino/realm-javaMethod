    /**
     * Creates a PermissionManager for the given user.
     *
     * This class is thread confined, so thread safety is not a concern since all internal
     * communication is routed through the original Handler thread.
     *
     * @param user user to create manager for.
     */
    private PermissionManager(SyncUser user) {
        this.user = user;
        threadId = Thread.currentThread().getId();
        managementRealmConfig = user.createConfiguration(getRealmUrl(RealmType.MANAGEMENT_REALM, user.getAuthenticationUrl()))
                .fullSynchronization()
                .errorHandler(new SyncSession.ErrorHandler() {
                    @Override
                    public void onError(SyncSession session, ObjectServerError error) {
                        synchronized (errorLock) {
                            managementRealmError = error;
                        }
                    }
                })
                .modules(new ManagementModule())
                .sessionStopPolicy(OsRealmConfig.SyncSessionStopPolicy.IMMEDIATELY)
                .build();

        permissionRealmConfig = user.createConfiguration(getRealmUrl(RealmType.PERMISSION_REALM, user.getAuthenticationUrl()))
                .fullSynchronization()
                .errorHandler(new SyncSession.ErrorHandler() {
                    @Override
                    public void onError(SyncSession session, ObjectServerError error) {
                        RealmLog.error("Error in __permission:\n" + error.toString());
                        synchronized (errorLock) {
                            permissionRealmError = error;
                        }
                    }
                })
                .modules(new PermissionModule())
                .waitForInitialRemoteData()
                 // .readOnly() Temporarily disabled due to issues with ROS 3.0.0-alpha.X
                .sessionStopPolicy(OsRealmConfig.SyncSessionStopPolicy.IMMEDIATELY)
                .build();

        defaultPermissionRealmConfig = user.createConfiguration(getRealmUrl(RealmType.DEFAULT_PERMISSION_REALM, user.getAuthenticationUrl()))
                .fullSynchronization()
                .errorHandler(new SyncSession.ErrorHandler() {
                    @Override
                    public void onError(SyncSession session, ObjectServerError error) {
                        RealmLog.error("Error in __wildcardpermissions:\n" + error.toString());
                        synchronized (errorLock) {
                            defaultPermissionRealmError = error;
                        }
                    }
                })
                .modules(new PermissionModule())
                .waitForInitialRemoteData()
                .readOnly()
                .sessionStopPolicy(OsRealmConfig.SyncSessionStopPolicy.IMMEDIATELY)
                .build();
    }

