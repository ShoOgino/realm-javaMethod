    /**
     * Logs out the user from the Realm Object Server. Once the Object Server has confirmed the logout any registered
     * {@link AuthenticationListener} will be notified and user credentials will be deleted from this device.
     *
     * @throws IllegalStateException if any Realms owned by this user is still open. They should be closed before
     *         logging out.
     */
    /* FIXME: Add this back to the javadoc when enable SyncConfiguration.Builder#deleteRealmOnLogout()
     <p>
     Any Realms owned by the user will be deleted if {@link SyncConfiguration.Builder#deleteRealmOnLogout()} is
     also set.
     */
    public void logout() {
        // Acquire lock to prevent users creating new instances
        synchronized (Realm.class) {
            if (!syncUser.isLoggedIn()) {
                return; // Already logged out
            }

            // Ensure that we can log out. If any Realm file is still open we should abort before doing anything
            // else.
            Collection<SyncSession> sessions = syncUser.getSessions();
            for (SyncSession session : sessions) {
                SyncConfiguration config = session.getConfiguration();
                if (Realm.getGlobalInstanceCount(config) > 0) {
                    throw new IllegalStateException("A Realm controlled by this user is still open. Close all Realms " +
                            "before logging out: " + config.getPath());
                }
            }

            // Stop all active sessions immediately. If we waited until after talking to the server
            // there is a high chance errors would be reported from the Sync Client first which would
            // be confusing.
            for (SyncSession session : sessions) {
                session.getOsSession().stop();
            }

            // Remove all local tokens, preventing further connections.
            // FIXME We still need to cache the user token so it can be revoked.
            syncUser.clearTokens();

            if (SyncUser.this.equals(SyncUser.currentUser())) {
                SyncManager.getUserStore().remove(UserStore.CURRENT_USER_KEY);
            }

            // Delete all Realms if needed.
            for (ObjectServerUser.AccessDescription desc : syncUser.getRealms()) {
                // FIXME: This will always be false since SyncConfiguration.Builder.deleteRealmOnLogout() is
                // disabled. Make sure this works for Realm opened in the client thread/other processes.
                if (desc.deleteOnLogout) {
                    File realmFile = new File(desc.localPath);
                    if (realmFile.exists() && !Util.deleteRealm(desc.localPath, realmFile.getParentFile(), realmFile.getName())) {
                        RealmLog.error("Could not delete Realm when user logged out: " + desc.localPath);
                    }
                }
            }

            // Finally revoke server token. The local user is logged out in any case.
            final AuthenticationServer server = SyncManager.getAuthServer();
            ThreadPoolExecutor networkPoolExecutor = SyncManager.NETWORK_POOL_EXECUTOR;
            networkPoolExecutor.submit(new ExponentialBackoffTask<LogoutResponse>() {

                @Override
                protected LogoutResponse execute() {
                    return server.logout(SyncUser.this, syncUser.getAuthenticationUrl());
                }

                @Override
                protected void onSuccess(LogoutResponse response) {
                    SyncManager.notifyUserLoggedOut(SyncUser.this);
                }

                @Override
                protected void onError(LogoutResponse response) {
                    RealmLog.error("Failed to log user out.\n" + response.getError().toString());
                }
            });
        }
    }

