    /**
     * Opening a synchronized Realm requires a {@link SyncConfiguration}. This method creates a
     * {@link SyncConfiguration.Builder} that can be used to create it by calling {@link SyncConfiguration.Builder#build()}.
     * <p>
     * The default synchronization mode for this Realm is <a href="https://docs.realm.io/platform/using-synced-realms/syncing-data">query-based synchronizaton</a>,
     * but see the {@link SyncConfiguration.Builder} class for more details on how to configure a Realm.
     * <p>
     * A synchronized Realm is identified by an unique URI. In the URI, {@code /~/} can be used as a placeholder for
     * a user ID in case the Realm should only be available to one user e.g., {@code "realm://objectserver.realm.io/~/default"}.
     * <p>
     * The URL cannot end with {@code .realm}, {@code .realm.lock} or {@code .realm.management}.
     * <p>
     * The {@code /~/} will automatically be replaced with the user ID when creating the {@link SyncConfiguration}.
     * <p>
     * Moreover, the URI defines the local location on disk. The location of a synchronized Realm file is
     * {@code /data/data/<packageName>/files/realm-object-server/<user-id>/<last-path-segment>}, but this behavior
     * can be overwritten using {@link SyncConfiguration.Builder#name(String)} and {@link SyncConfiguration.Builder#directory(File)}.
     * <p>
     * Many Android devices are using FAT32 file systems. FAT32 file systems have a limitation that
     * file names cannot be longer than 255 characters. Moreover, the entire URI should not exceed 256 characters.
     * If the file name and underlying path are too long to handle for FAT32, a shorter unique name will be generated.
     * See also @{link https://msdn.microsoft.com/en-us/library/aa365247(VS.85).aspx}.
     *
     * @param uri URI identifying the Realm. If only a path like {@code /~/default} is given, the configuration will
     *            assume the file is located on the same server returned by {@link #getAuthenticationUrl()}.
     *
     * @throws IllegalStateException if the user isn't valid. See {@link #isValid()}.
     */
    public SyncConfiguration.Builder createConfiguration(String uri) {
        if (!isValid()) {
            throw new IllegalStateException("Configurations can only be created from valid users");
        }
        return new SyncConfiguration.Builder(this, uri).partialRealm();
    }

