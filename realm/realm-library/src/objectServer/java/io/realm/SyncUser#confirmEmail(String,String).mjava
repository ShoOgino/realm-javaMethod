    /**
     * Complete the email confirmation flow by using the confirmation token sent to the user's email as a one-time
     * authorization token to confirm their email.
     * <p>
     * This can only be used for users who authenticated with the {@link SyncCredentials.IdentityProvider#USERNAME_PASSWORD}
     * provider, and passed a valid email address as a username.
     * <p>
     * By default, Realm Object Server will send a link to the user's email that will redirect to a webpage where
     * they can enter their new password. If you wish to provide a native UX, you may wish to modify the password
     * authentication provider to use a custom URL with deep linking, so you can open the app, extract the token,
     * and navigate to a view that allows to confirm the email within the app.
     *
     * @param confirmationToken the token that was sent to the user's email address.
     * @param authenticationUrl the url used to authenticate the user.
     * @throws IllegalStateException if this method is called on the UI thread.
     * @throws IllegalArgumentException if no {@code confirmationToken} was provided.
     * @throws ObjectServerError if an error happened on the server.
     */
    public static void confirmEmail(String confirmationToken, String authenticationUrl) throws ObjectServerError {
        if (Util.isEmptyString(confirmationToken)) {
            throw new IllegalArgumentException("Not-null 'confirmationToken' required.");
        }
        URL authUrl = getUrl(authenticationUrl);
        AuthenticationServer authServer = SyncManager.getAuthServer();
        UpdateAccountResponse response = authServer.confirmEmail(confirmationToken, authUrl);
        if (!response.isValid()) {
            throw response.getError();
        }
    }

