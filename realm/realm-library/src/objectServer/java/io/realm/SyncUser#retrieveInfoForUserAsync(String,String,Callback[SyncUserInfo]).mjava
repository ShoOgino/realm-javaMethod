    /**
     * Given a Realm Object Server authentication provider and a provider identifier for a user (for example, a username), asynchronously look up and return user information for that user.
     *
     * @param providerUserIdentity The username or identity of the user as issued by the authentication provider.
     *                             In most cases this is different from the Realm Object Server-issued identity.
     * @param provider The authentication provider {@link io.realm.SyncCredentials.IdentityProvider} that manages the user whose information is desired.
     *
     * @return {@code SyncUser} associated with the given identity provider and providerId, or {@code null} in case
     * of an {@code invalid} provider or {@code providerId}.
     * @param callback callback when the lookup has completed or failed. The callback will always happen on the same thread
     * as this method is called on.
     * @return representation of the async task that can be used to cancel it if needed.
     */
    public RealmAsyncTask retrieveInfoForUserAsync(final String providerUserIdentity, final String provider, final Callback<SyncUserInfo> callback) {
        checkLooperThread("Asynchronously retrieving user is only possible from looper threads.");
        //noinspection ConstantConditions
        if (callback == null) {
            throw new IllegalArgumentException("Non-null 'callback' required.");
        }

        return new Request<SyncUserInfo>(SyncManager.NETWORK_POOL_EXECUTOR, callback) {
            @Override
            public SyncUserInfo run() throws ObjectServerError {
                return retrieveInfoForUser(providerUserIdentity, provider);
            }
        }.start();
    }

