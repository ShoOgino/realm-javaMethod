    // Invokes actual MongoDB Realm Function in the context of the associated user/app.
    @Override
    public <T> T invoke(String name, List<?> args, CodecRegistry codecRegistry, Decoder<T> resultDecoder) {
        Util.checkEmpty(name, "name");

        String encodedArgs;
        try {
            encodedArgs = JniBsonProtocol.encode(args, codecRegistry);
        } catch (CodecConfigurationException e) {
            throw new ObjectServerError(ErrorCode.BSON_CODEC_NOT_FOUND, "Could not resolve encoder for arguments", e);
        } catch (Exception e) {
            throw new ObjectServerError(ErrorCode.BSON_ENCODING, "Error encoding function arguments", e);
        }

        // NativePO calling scheme is actually synchronous
        AtomicReference<String> success = new AtomicReference<>(null);
        AtomicReference<ObjectServerError> error = new AtomicReference<>(null);
        OsJNIResultCallback<String> callback = new OsJNIResultCallback<String>(success, error) {
            @Override
            protected String mapSuccess(Object result) {
                return (String) result;
            }
        };
        nativeCallFunction(user.getApp().nativePtr, user.osUser.getNativePtr(), name, encodedArgs, callback);
        String encodedResponse = ResultHandler.handleResult(success, error);
        T result;
        try {
            result = JniBsonProtocol.decode(encodedResponse, resultDecoder);
        } catch (Exception e) {
            throw new ObjectServerError(ErrorCode.BSON_DECODING, "Error decoding function result", e);
        }
        return result;
    }

