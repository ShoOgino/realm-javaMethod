    /**
     * Logs in as a user with the given credentials associated with an authentication provider.
     * <p>
     * The user who logs in becomes the current user. Other App functionality acts on behalf of
     * the current user.
     * <p>
     * If there was already a current user, that user is still logged in and can be found in the
     * list returned by {@link #allUsers()}.
     * <p>
     * It is also possible to switch between which user is considered the current user by using
     * {@link #switchUser(User)}.
     *
     * @param credentials the credentials representing the type of login.
     * @return a {@link User} representing the logged in user.
     * @throws AppException if the user could not be logged in.
     */
    public User login(Credentials credentials) throws AppException {
        Util.checkNull(credentials, "credentials");
        AtomicReference<User> success = new AtomicReference<>(null);
        AtomicReference<AppException> error = new AtomicReference<>(null);
        nativeLogin(nativePtr, credentials.osCredentials.getNativePtr(), new OsJNIResultCallback<User>(success, error) {
            @Override
            protected User mapSuccess(Object result) {
                Long nativePtr = (Long) result;
                return new User(nativePtr, App.this);
            }
        });
        User user = ResultHandler.handleResult(success, error);
        notifyUserLoggedIn(user);
        return user;
    }

