    /**
     * Calling this method will block until all known local changes have been uploaded to the server or the specified
     * timeout is hit. This will involve network access, so calling this method should only be done from a non-UI
     * thread.
     * <p>
     * This method cannot be called before the Realm has been opened.
     *
     * @throws IllegalStateException if called on the Android main thread.
     * @throws InterruptedException if the upload took longer than the specified timeout or the thread was interrupted while uploading was in progress.
     * The upload will continue in the background even after this exception is thrown.
     * @throws IllegalArgumentException if {@code timeout} is less than or equal to {@code 0} or {@code unit} is {@code null}.
     * @return {@code true} if the data was uploaded before the timeout. {@code false} if the operation timed out or otherwise failed.
     */
    public boolean uploadAllLocalChanges(long timeout, TimeUnit unit) throws InterruptedException {
        Util.checkNotOnMainThread("uploadAllLocalChanges() cannot be called from the main thread.");
        checkTimeout(timeout, unit);

        // Blocking only happens at the Java layer. To prevent deadlocking the underlying SyncSession we register
        // an async listener there and let it callback to the Java Session when done. This feels icky at best, but
        // since all operations on the SyncSession operate under a shared mutex, we would prevent all other actions on the
        // session, including trying to stop it.
        // In Java we cannot lock on the Session object either since it will prevent any attempt at modifying the
        // lifecycle while it is in a waiting state. Thus we use a specialised mutex.
        synchronized (waitForChangesMutex) {
            return waitForChanges(DIRECTION_UPLOAD, timeout, unit);
        }
    }

