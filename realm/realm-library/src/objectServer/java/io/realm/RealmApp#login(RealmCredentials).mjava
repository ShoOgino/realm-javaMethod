    /**
     * Logs in as a user with the given credentials associated with an authentication provider.
     * <p>
     * The user who logs in becomes the current user. Other RealmApp functionality acts on behalf of
     * the current user.
     * <p>
     * If there was already a current user, that user is still logged in and can be found in the
     * list returned by {@link #allUsers()}.
     * <p>
     * It is also possible to switch between which user is considered the current user by using
     * {@link #switchUser(RealmUser)}.
     *
     * @param credentials the credentials representing the type of login.
     * @return a {@link RealmUser} representing the logged in user.
     * @throws ObjectServerError if the user could not be logged in.
     */
    public RealmUser login(RealmCredentials credentials) throws ObjectServerError {
        Util.checkNull(credentials, "credentials");
        AtomicReference<RealmUser> success = new AtomicReference<>(null);
        AtomicReference<ObjectServerError> error = new AtomicReference<>(null);
        nativeLogin(nativePtr, credentials.osCredentials.getNativePtr(), new OsJNIResultCallback<RealmUser>(success, error) {
            @Override
            protected RealmUser mapSuccess(Object result) {
                Long nativePtr = (Long) result;
                return new RealmUser(nativePtr, RealmApp.this);
            }
        });
        RealmUser user = ResultHandler.handleResult(success, error);
        notifyUserLoggedIn(user);
        return user;
    }

