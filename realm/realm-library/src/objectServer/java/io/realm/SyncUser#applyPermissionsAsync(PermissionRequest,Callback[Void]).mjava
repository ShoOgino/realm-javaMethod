    /**
     * Applies a given set of permissions to a Realm. Only a user with {@link io.realm.permissions.AccessLevel#ADMIN}
     * privileges to the Realm can use this method.
     * <p>
     * A {@link PermissionRequest} object encapsulates a description of which users are granted what
     * {@link io.realm.permissions.AccessLevel}s for which Realm(s).
     * <p>
     * Once the request is successfully handled, a {@link Permission} entry is created for each
     * affected user and can be found by them using {@link #retrieveGrantedPermissionsAsync(Callback)}.
     *
     * @param request request object describing which permissions to grant and to what Realm(s).
     * @param callback callback when the request either succeeded or failed.
     * @return async task representing the request. This can be used to cancel it if needed.
     *
     * @throws IllegalStateException if this method is called from a thread without a looper.
     */
    public RealmAsyncTask applyPermissionsAsync(PermissionRequest request, Callback<Void> callback) {
        checkLooperThread("Asynchronously updating  permissions is only possible from looper threads.");
        checkCallbackNotNull(callback);
        return new Request<Void>(SyncManager.NETWORK_POOL_EXECUTOR, callback) {
            @Override
            public Void run() throws ObjectServerError {
                applyPermissions(request);
                return null;
            }
        }.start();
    }

