    /**
     * Creates a custom set of credentials. The behaviour will depend on the type of {@code identityProvider} and
     * {@code userInfo} used.
     *
     * @param identityProvider provider used to verify the credentials.
     * @param userIdentifier String identifying the user. Usually a username of userIdentifier.
     * @param userInfo data describing the user further or {@code null} if the user does not have any extra data. The
     *              data will be serialized to JSON, so all values must be mappable to a valid JSON data type. Custom
     *              classes will be converted using {@code toString()}.
     * @return a set of credentials that can be used to log into the Object Server using
     *         {@link SyncUser#loginAsync(SyncCredentials, String, SyncUser.Callback)}.
     * @throws IllegalArgumentException if any parameter is either {@code null} or empty.
     */
    public static SyncCredentials custom(String identityProvider, String userIdentifier, Map<String, Object> userInfo) {
        if (identityProvider == null || identityProvider.equals("")) {
            throw new IllegalArgumentException("Non-null 'identityProvider' required.");
        }
        if (userIdentifier == null || userIdentifier.equals("")) {
            throw new IllegalArgumentException("Non-null 'userIdentifier' required.");
        }
        if (userInfo == null) {
            userInfo = new HashMap<String, Object>();
        }
        return new SyncCredentials(identityProvider, userIdentifier, userInfo);
    }

