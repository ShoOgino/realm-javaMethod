    /**
     * Delete the Realm file from the filesystem for a custom named Realm.
     * The Realm must be unused and closed before calling this method.
     *
     * @param realmFile The reference to the Realm file.
     * @return false if a file could not be deleted. The failing file will be logged.
     */
    public static synchronized boolean deleteRealmFile(File realmFile) {
        boolean result = true;
        File realmFolder = realmFile.getParentFile();
        String fileName = realmFile.getName();

        String id = getCanonicalPath(realmFile);
        AtomicInteger counter = openRealms.get(id);
        if (counter != null && counter.get() > 0) {
            throw new IllegalStateException("It's not allowed to delete the file associated with an open Realm. " +
                    "Remember to close() all the instances of the Realm before deleting its file.");
        }

        List<File> filesToDelete = Arrays.asList(realmFile,
                new File(realmFolder, fileName + ".lock"),
                new File(realmFolder, fileName + ".lock_a"),
                new File(realmFolder, fileName + ".lock_b"),
                new File(realmFolder, fileName + ".log"));
        for (File fileToDelete : filesToDelete) {
            if (fileToDelete.exists()) {
                boolean deleteResult = fileToDelete.delete();
                if (!deleteResult) {
                    result = false;
                    RealmLog.w("Could not delete the file " + fileToDelete);
                }
            }
        }
        return result;
    }

