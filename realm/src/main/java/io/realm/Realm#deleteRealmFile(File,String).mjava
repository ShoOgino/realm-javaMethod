    /**
     * TODO Should we just remove this altogether and only make it part of the Configutation. Addng a
     * deleteRealmWhenClosing() would cover all use cases I think?
     *
     * Delete the given Realm file defined by its from the filesystem for a custom named Realm.
     * The realm must be unused and closed before calling this method.
     *
     * @param folder The folder where the Realm is stored, usually Context.getFilesDir().
     * @param fileName the name of the custom Realm (i.e. "myCustomRealm.realm").
     * @return false if a file could not be deleted. The failing file will be logged.
     */
    public static synchronized boolean deleteRealmFile(File folder, String fileName) {
        boolean result = true;
        File writableFolder = folder;

        File realmFile = new File(writableFolder, fileName);
        int realmId = realmFile.getAbsolutePath().hashCode();

        AtomicInteger counter = openRealms.get(realmId);
        if (counter != null && counter.get() > 0) {
            throw new IllegalStateException("It's not allowed to delete the file associated with an open Realm. " +
                    "Remember to close() all the instances of the Realm before deleting its file.");
        }

        List<File> filesToDelete = Arrays.asList(realmFile, new File(writableFolder, fileName + ".lock"));
        for (File fileToDelete : filesToDelete) {
            if (fileToDelete.exists()) {
                boolean deleteResult = fileToDelete.delete();
                if (!deleteResult) {
                    result = false;
                    Log.w(TAG, "Could not delete the file " + fileToDelete);
                }
            }
        }
        return result;
    }

