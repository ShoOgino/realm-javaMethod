    private static Realm createAndValidate(String absolutePath, boolean validateSchema) {
        Map<String, Realm> realms = realmsCache.get();
        Realm realm = realms.get(absolutePath);
        if (realm == null) {
            realm = new Realm(absolutePath);
            realms.put(absolutePath, realm);
            realmsCache.set(realms);
        }
        if (validateSchema) {
            // FIXME - get rid fo validatedPaths - only validate if we don't have a cached realm
            if (!validatedPaths.contains(absolutePath)) {
                Class<?> validationClass;
                try {
                    validationClass = Class.forName("io.realm.ValidationList");
                } catch (ClassNotFoundException e) {
                    throw new RealmException("Could not find the generated ValidationList class");
                }
                Method getProxyClassesMethod;
                try {
                    getProxyClassesMethod = validationClass.getMethod("getProxyClasses");
                } catch (NoSuchMethodException e) {
                    throw new RealmException("Could not find the getProxyClasses method in the ValidationList class");
                }
                List<String> proxyClasses;
                try {
                    proxyClasses = (List<String>) getProxyClassesMethod.invoke(null);
                } catch (IllegalAccessException e) {
                    throw new RealmException("Could not execute the getProxyClasses method in the ValidationList class");
                } catch (InvocationTargetException e) {
                    throw new RealmException("An exception was thrown in the getProxyClasses method in the ValidationList class");
                }

                long version = realm.getVersion();
                try {
                    if (version == UNVERSIONED) {
                        realm.beginTransaction();
                        realm.setVersion(0);
                    }

                    for (String className : proxyClasses) {
                        String modelClassName = Iterables.getLast(Splitter.on(".").split(className));
                        String generatedClassName = "io.realm." + modelClassName + "RealmProxy";
                        Class<?> generatedClass;
                        try {
                            generatedClass = Class.forName(generatedClassName);
                        } catch (ClassNotFoundException e) {
                            throw new RealmException("Could not find the generated " + generatedClassName + " class");
                        }

                        if (version == UNVERSIONED) {
                            Method initTableMethod;
                            try {
                                initTableMethod = generatedClass.getMethod("initTable", new Class[]{ImplicitTransaction.class});
                            } catch (NoSuchMethodException e) {
                                throw new RealmException("Could not find the initTable method in the generated " + generatedClassName + " class");
                            }
                            try {
                                initTableMethod.invoke(null, realm.transaction);
                            } catch (IllegalAccessException e) {
                                throw new RealmException("Could not execute the initTable method in the " + generatedClassName + " class");
                            } catch (InvocationTargetException e) {
                                throw new RealmException("An exception was thrown in the initTable method in the " + generatedClassName + " class");
                            }
                        }

                        // Populate the columnIndices table
                        Method fieldNamesMethod;
                        try {
                            fieldNamesMethod = generatedClass.getMethod("getFieldNames");
                        } catch (NoSuchMethodException e) {
                            throw new RealmException("Could not find the getFieldNames method in the generated " + generatedClassName + " class");
                        }
                        List<String> fieldNames;
                        try {
                            fieldNames = (List<String>)fieldNamesMethod.invoke(null);
                        } catch (IllegalAccessException e) {
                            throw new RealmException("Could not execute the getFieldNames method in the generated " + generatedClassName + " class");
                        } catch (InvocationTargetException e) {
                            throw new RealmException("An exception was thrown in the getFieldNames method in the generated " + generatedClassName + " class");
                        }
                        Table table = realm.transaction.getTable(TABLE_PREFIX + modelClassName);
                        for (String fieldName : fieldNames) {
                            long columnIndex = table.getColumnIndex(fieldName);
                            if (columnIndex == -1) {
                                throw new RealmException("Column not found in the Realm");
                            }
                            columnIndices.put(modelClassName, fieldName, columnIndex);
                        }

                        Method validateMethod;
                        try {
                            validateMethod = generatedClass.getMethod("validateTable", new Class[]{ImplicitTransaction.class});
                        } catch (NoSuchMethodException e) {
                            throw new RealmException("Could not find the validateTable method in the generated " + generatedClassName + " class");
                        }
                        try {
                            validateMethod.invoke(null, realm.transaction);
                        } catch (IllegalAccessException e) {
                            throw new RealmException("Could not execute the validateTable method in the " + generatedClassName + " class");
                        } catch (InvocationTargetException e) {
                            throw new RealmMigrationNeededException(e.getMessage());
                        }
                    }
                    validatedPaths.add(absolutePath);
                }
                finally {
                    if (version == UNVERSIONED) {
                        realm.commitTransaction();
                    }
                }
            }
        }
        return realm;
    }

