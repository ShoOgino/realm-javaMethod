    private static Realm createAndValidate(String absolutePath, boolean validateSchema) {
        ThreadRealm threadRealm = new ThreadRealm(absolutePath);
        SoftReference<Realm> realmSoftReference = threadRealm.get();
        Realm realm = realmSoftReference.get();
        if (realm == null) {
            // The garbage collector decided to get rid of the realm instance
            Realm newRealm = new Realm(absolutePath);
            threadRealm.set(new SoftReference<Realm>(newRealm));
            realm = newRealm;
        }
        if (validateSchema) {
            // FIXME - get rid fo validatedPaths - only validate if we don't have a cached realm
            if (!validatedPaths.contains(absolutePath)) {
                Class<?> validationClass;
                try {
                    validationClass = Class.forName("io.realm.ValidationList");
                } catch (ClassNotFoundException e) {
                    throw new RealmException("Could not find the generated ValidationList class");
                }
                Method getProxyClassesMethod;
                try {
                    getProxyClassesMethod = validationClass.getMethod("getProxyClasses");
                } catch (NoSuchMethodException e) {
                    throw new RealmException("Could not find the getProxyClasses method in the ValidationList class");
                }
                List<String> proxyClasses;
                try {
                    proxyClasses = (List<String>) getProxyClassesMethod.invoke(null);
                } catch (IllegalAccessException e) {
                    throw new RealmException("Could not execute the getProxyClasses method in the ValidationList class");
                } catch (InvocationTargetException e) {
                    throw new RealmException("An exception was thrown in the getProxyClasses method in the ValidationList class");
                }

                realm.beginTransaction();
                long version = realm.getVersion();
                for (String className : proxyClasses) {
                    String modelClassName = Iterables.getLast(Splitter.on(".").split(className));
                    String generatedClassName = "io.realm." + modelClassName + "RealmProxy";
                    Class<?> generatedClass = null;
                    try {
                        generatedClass = Class.forName(generatedClassName);
                    } catch (ClassNotFoundException e) {
                        throw new RealmException("Could not find the generated " + generatedClassName + " class");
                    }
                    if (version == -1) {
                        Method initTableMethod;
                        try {
                            initTableMethod = generatedClass.getMethod("initTable", new Class[]{ImplicitTransaction.class});
                        } catch (NoSuchMethodException e) {
                            throw new RealmException("Could not find the initTable method in the generated " + generatedClassName + " class");
                        }
                        try {
                            initTableMethod.invoke(null, realm.transaction);
                        } catch (IllegalAccessException e) {
                            throw new RealmException("Could not execute the initTable method in the " + generatedClassName + " class");
                        } catch (InvocationTargetException e) {
                            throw new RealmException("An exception was thrown in the initTable method in the " + generatedClassName + " class");
                        }
                    }
                    Method validateMethod = null;
                    try {
                        validateMethod = generatedClass.getMethod("validateTable", new Class[]{ImplicitTransaction.class});
                    } catch (NoSuchMethodException e) {
                        throw new RealmException("Could not find the validateTable method in the generated " + generatedClassName + " class");
                    }
                    try {
                        validateMethod.invoke(null, realm.transaction);
                    } catch (IllegalAccessException e) {
                        throw new RealmException("Could not execute the validateTable method in the " + generatedClassName + " class");
                    } catch (InvocationTargetException e) {
                        throw new RealmMigrationNeededException(e.getMessage());
                    }
                }
                if (version == -1) {
                    realm.setVersion(0);
                }
                realm.commitTransaction();
                validatedPaths.add(absolutePath);
            }
        }
        return realm;
    }

