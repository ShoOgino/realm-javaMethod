    private static Realm createAndValidate(String absolutePath, boolean validateSchema) {
        ThreadRealm threadRealm = new ThreadRealm(absolutePath);
        SoftReference<Realm> realmSoftReference = threadRealm.get();
        Realm realm = realmSoftReference.get();
        if (realm == null) {
            // The garbage collector decided to get rid of the realm instance
            Realm newRealm = new Realm(absolutePath);
            threadRealm.set(new SoftReference<Realm>(newRealm));
            realm = newRealm;
        }
        if (validateSchema) {
            if (!validatedPaths.contains(absolutePath)) {
                try {
                    Class<?> validationClass = Class.forName("io.realm.ValidationList");
                    Method getProxyClassesMethod = validationClass.getMethod("getProxyClasses");
                    List<String> proxyClasses = (List<String>) getProxyClassesMethod.invoke(null);
                    for (String className : proxyClasses) {
                        Class<?> modelClass = Class.forName(className);
                        String modelClassName = Iterables.getLast(Splitter.on(".").split(className));
                        String generatedClassName = "io.realm." + modelClassName + "RealmProxy";
                        Class<?> generatedClass = Class.forName(generatedClassName);
                        if (!initialized) {
                            initialized = true;
                            Method initTableMethod = generatedClass.getMethod("initTable", new Class[]{ImplicitTransaction.class});
                            realm.beginTransaction();
                            initTableMethod.invoke(null, realm.transaction);
                            realm.commitTransaction();
                        }
                        Method validateMethod = generatedClass.getMethod("validateTable", new Class[]{ImplicitTransaction.class});
                        validateMethod.invoke(null, realm.transaction);
                    }
                } catch (ClassNotFoundException e) {
                    e.printStackTrace();
                    return null; // TODO: throw RealmException
                } catch (NoSuchMethodException e) {
                    e.printStackTrace();
                    return null; // TODO: throw RealmException
                } catch (IllegalAccessException e) {
                    e.printStackTrace();
                    return null; // TODO: throw RealmException
                } catch (InvocationTargetException e) {
                    e.printStackTrace();
                    return null; // TODO: throw RealmException
                }
                validatedPaths.add(absolutePath);
            }
        }
        return realm;
    }

