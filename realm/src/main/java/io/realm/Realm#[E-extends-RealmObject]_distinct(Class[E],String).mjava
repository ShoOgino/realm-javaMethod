    /**
     * Return a distinct set of objects of a specific class. If no objects exist, the
     * returned {@link RealmResulsts} will not be @{code null}. The RealmResults.size() to check the
     * number of objects instead.
     * @param clazz the Class to get objects of.
     * @param fieldName the field name.
     * @return A RealmResults containing objects.
     * @throws IllegalArgumentException if a field name does not exist or the field is not indexed.
     */
    public <E extends RealmObject> RealmResults<E> distinct(Class<E> clazz, String fieldName) {
        if (fieldName == null) {
            throw new IllegalArgumentException("fieldName must be provided.");
        }

        Table table = this.getTable(clazz);
        long columnIndex = table.getColumnIndex(fieldName);
        if (columnIndex == -1) {
            throw new IllegalArgumentException(String.format("Field name '%s' does not exist.", fieldName));
        }

        TableView tableView = table.getDistinctView(columnIndex);
        return new RealmResults(this, tableView, clazz);
    }

