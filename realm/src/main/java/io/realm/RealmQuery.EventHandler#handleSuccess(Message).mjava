        private void handleSuccess(final Message message) {
            Bundle bundle = message.getData();
            try {
                switch (message.arg1) {
                    case FIND_FIRST_QUERY: {
                        E realmObject = realm.getByPointer(clazz,
                                query.importHandoverRow(bundle.getLong(QUERY_RESULT_POINTER_ARG),
                                        bundle.getLong(CALLER_SHARED_GROUP_POINTER_ARG)));

                        callbackRealmObject.onSuccess(realmObject);
                        callbackRealmObject = null;
                        break;
                    }
                    case FIND_ALL_QUERY: {
                        RealmResults<E> resultList = new RealmResults<E>(realm,
                                query.importHandoverTableView(bundle.getLong(QUERY_RESULT_POINTER_ARG),
                                        bundle.getLong(CALLER_SHARED_GROUP_POINTER_ARG)),
                                clazz);

                        callbackRealmResults.onSuccess(resultList);
                        Realm.asyncRealmResults.get().add(new WeakReference<RealmResults<?>>(resultList));
                        callbackRealmResults = null;
                        break;
                    }
                    case FIND_ALL_SORTED_QUERY: {
                        RealmResults<E> resultList = new RealmResults<E>(realm,
                                query.importHandoverTableView(bundle.getLong(QUERY_RESULT_POINTER_ARG),
                                        bundle.getLong(CALLER_SHARED_GROUP_POINTER_ARG)),
                                clazz);

                        callbackRealmResults.onSuccess(resultList);
                        Realm.asyncRealmResults.get().add(new WeakReference<RealmResults<?>>(resultList));
                        callbackRealmResults = null;
                        break;
                    }
                    case FIND_ALL_SORTED_MULTI_QUERY: {
                        RealmResults<E> resultList = new RealmResults<E>(realm,
                                query.importHandoverTableView(bundle.getLong(QUERY_RESULT_POINTER_ARG),
                                        bundle.getLong(CALLER_SHARED_GROUP_POINTER_ARG)),
                                clazz);

                        callbackRealmResults.onSuccess(resultList);
                        Realm.asyncRealmResults.get().add(new WeakReference<RealmResults<?>>(resultList));
                        callbackRealmResults = null;
                        break;
                    }
                }

            } catch (BadVersionException e) {
                handleUnreachableVersion(message);

            } catch (Exception e) {
                handoverQueryPtr = -1;
                handoverTableViewPtr = -1;
                handoverRowPtr = -1;
                message.obj = e;
                handleError(message);
            }
        }

