    private static Realm createAndValidate(String absolutePath, byte[] key, boolean validateSchema) {
        Map<String, Realm> realms = realmsCache.get();
        Realm realm = realms.get(absolutePath);

        if (realm == null) {
            realm = new Realm(absolutePath, key);
            realms.put(absolutePath, realm);
            realmsCache.set(realms);
        }
        if (validateSchema) {
            Class<?> validationClass;
            try {
                validationClass = Class.forName("io.realm.ValidationList");
            } catch (ClassNotFoundException e) {
                throw new RealmException("Could not find the generated ValidationList class");
            }
            Method getProxyClassesMethod;
            try {
                getProxyClassesMethod = validationClass.getMethod("getProxyClasses");
            } catch (NoSuchMethodException e) {
                throw new RealmException("Could not find the getProxyClasses method in the ValidationList class");
            }
            List<String> proxyClasses;
            try {
                //noinspection unchecked
                proxyClasses = (List<String>) getProxyClassesMethod.invoke(null);
            } catch (IllegalAccessException e) {
                throw new RealmException("Could not execute the getProxyClasses method in the ValidationList class");
            } catch (InvocationTargetException e) {
                throw new RealmException("An exception was thrown in the getProxyClasses method in the ValidationList class");
            }

            long version = realm.getVersion();
            try {
                realm.beginTransaction();
                if (version == UNVERSIONED) {
                    realm.setVersion(0);
                }

                for (String className : proxyClasses) {
                    String[] splitted = className.split("\\.");
                    String modelClassName = splitted[splitted.length - 1];
                    String generatedClassName = "io.realm." + modelClassName + "RealmProxy";
                    Class<?> generatedClass;
                    try {
                        generatedClass = Class.forName(generatedClassName);
                    } catch (ClassNotFoundException e) {
                        throw new RealmException("Could not find the generated " + generatedClassName + " class");
                    }

                    // if not versioned, create table
                    if (version == UNVERSIONED) {
                        Method initTableMethod;
                        try {
                            initTableMethod = generatedClass.getMethod("initTable", new Class[]{ImplicitTransaction.class});
                        } catch (NoSuchMethodException e) {
                            throw new RealmException("Could not find the initTable method in the generated " + generatedClassName + " class");
                        }
                        try {
                            initTableMethod.invoke(null, realm.transaction);
                        } catch (IllegalAccessException e) {
                            throw new RealmException("Could not execute the initTable method in the " + generatedClassName + " class");
                        } catch (InvocationTargetException e) {
                            throw new RealmException("An exception was thrown in the initTable method in the " + generatedClassName + " class");
                        }
                    }

                    // validate created table
                    Method validateMethod;
                    try {
                        validateMethod = generatedClass.getMethod("validateTable", new Class[]{ImplicitTransaction.class});
                    } catch (NoSuchMethodException e) {
                        throw new RealmException("Could not find the validateTable method in the generated " + generatedClassName + " class");
                    }
                    try {
                        validateMethod.invoke(null, realm.transaction);
                    } catch (IllegalAccessException e) {
                        throw new RealmException("Could not execute the validateTable method in the " + generatedClassName + " class");
                    } catch (InvocationTargetException e) {
                        throw new RealmMigrationNeededException(e.getMessage(), e);
                    }

                    // Populate the columnIndices table
                    Method fieldNamesMethod;
                    try {
                        fieldNamesMethod = generatedClass.getMethod("getFieldNames");
                    } catch (NoSuchMethodException e) {
                        throw new RealmException("Could not find the getFieldNames method in the generated " + generatedClassName + " class");
                    }
                    List<String> fieldNames;
                    try {
                        //noinspection unchecked
                        fieldNames = (List<String>) fieldNamesMethod.invoke(null);
                    } catch (IllegalAccessException e) {
                        throw new RealmException("Could not execute the getFieldNames method in the generated " + generatedClassName + " class");
                    } catch (InvocationTargetException e) {
                        throw new RealmException("An exception was thrown in the getFieldNames method in the generated " + generatedClassName + " class");
                    }
                    Table table = realm.transaction.getTable(TABLE_PREFIX + modelClassName);
                    for (String fieldName : fieldNames) {
                        long columnIndex = table.getColumnIndex(fieldName);
                        if (columnIndex == -1) {
                            throw new RealmMigrationNeededException("Column '" + fieldName + "' not found for type '" + modelClassName + "'");
                        }
                        Map<String, Long> innerMap = columnIndices.get(modelClassName);
                        if (innerMap == null) {
                            innerMap = new HashMap<String, Long>();
                        }
                        innerMap.put(fieldName, columnIndex);
                        columnIndices.put(modelClassName, innerMap);
                    }
                }
            } finally {
                realm.commitTransaction();
            }
        }

        return realm;
    }

