    /**
     * Instantiates and adds a new object to the realm
     *
     * @return              The new object
     * @param <E>
     */
    public <E extends RealmObject> E create(Class<E> clazz) {
        String generatedClassName;
        if (generatedClassNames.containsKey(clazz)) {
            generatedClassName = generatedClassNames.get(clazz);
        } else {
            generatedClassName = clazz.getName() + "RealmProxy";
            generatedClassNames.put(clazz, generatedClassName);
        }


        Class<?> generatedClass;
        try {
            if (generatedClasses.containsKey(generatedClassName)) {
                generatedClass = generatedClasses.get(generatedClassName);
            } else {
                generatedClass = Class.forName(generatedClassName);
                generatedClasses.put(generatedClassName, generatedClass);
            }
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
            return null; // TODO: throw RealmException
        }

        Method method;
        try {
            if (initTableMethods.containsKey(generatedClass)) {
                method = initTableMethods.get(generatedClass);
            } else {
                method = generatedClass.getMethod("initTable", new Class[] {ImplicitTransaction.class});
                initTableMethods.put(generatedClass, method);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            return null; // TODO: throw RealmException
        }

        Table table;
        try {
            table = (Table)method.invoke(null, transaction);
        } catch (IllegalAccessException e) {
            e.printStackTrace();
            return null; // TODO: throw RealmException
        } catch (InvocationTargetException e) {
            e.printStackTrace();
            return null; // TODO: throw RealmException
        }

        long rowIndex = table.addEmptyRow();
        return get(clazz, rowIndex);
    }

