    public void testSortByString() {
        RealmResults<AllTypes> resultList = testRealm.where(AllTypes.class).findAll();
        RealmResults<AllTypes> sortedList = resultList.where().findAll();
        sortedList.sort(FIELD_STRING, RealmResults.SORT_ORDER_DESCENDING);

        assertEquals(resultList.size(), sortedList.size());
        assertEquals(TEST_DATA_SIZE, sortedList.size());
        assertEquals(resultList.first().getColumnString(), sortedList.last().getColumnString());

        RealmResults<AllTypes> reverseList = sortedList.where().findAll();
        reverseList.sort(FIELD_STRING, RealmResults.SORT_ORDER_ASCENDING);
        assertEquals(TEST_DATA_SIZE, reverseList.size());
        assertEquals(resultList.first().getColumnString(), reverseList.first().getColumnString());

        int numberOfDigits = 1 + ((int) Math.log10(TEST_DATA_SIZE));
        int largestNumber = 1;
        for (int i = 1; i < numberOfDigits; i++)
            largestNumber *= 10;  // 10*10* ... *10
        largestNumber = largestNumber - 1;
        assertEquals(resultList.get(largestNumber).getColumnString(), reverseList.last().getColumnString());
        RealmResults<AllTypes> reverseSortedList = reverseList.where().findAll();
        reverseList.sort(FIELD_STRING, RealmResults.SORT_ORDER_DESCENDING);
        assertEquals(TEST_DATA_SIZE, reverseSortedList.size());
    }

