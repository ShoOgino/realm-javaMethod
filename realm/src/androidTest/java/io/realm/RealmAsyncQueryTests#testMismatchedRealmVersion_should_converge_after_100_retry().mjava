    public void testMismatchedRealmVersion_should_converge_after_100_retry () throws Throwable {
        final CountDownLatch signalCallbackFinishedLatch = new CountDownLatch(1);
        final Looper[] looper = new Looper[1];
        final AtomicInteger numberOfEntries = new AtomicInteger(10);
        final Random random = new Random(System.currentTimeMillis());
        final Throwable[] threadAssertionError = new Throwable[1];
        ExecutorService executorService = Executors.newSingleThreadExecutor();
        setDebugModeForAsyncRealmQuery(100, RetryPolicy.MODE_INDEFINITELY, 0);
        executorService.submit(new Runnable() {
            @Override
            public void run() {
                Looper.prepare();
                looper[0] = Looper.myLooper();
                Realm realm = null;
                try {
                    realm = openRealmInstance("test_should_converge_after_100_retry");
                    populateTestRealm(realm, numberOfEntries.get());
                    // async query (will run on different thread)
                    realm.findAsync(AllTypes.class,
                            new Realm.DebugQueryCallback<AllTypes>() {
                                @Override
                                public void onSuccess(RealmResults<AllTypes> results) {
                                    try {
                                        if (numberOfEntries.get() > 10) {
                                            assertEquals(10, results.size());
                                        } else {
                                            assertEquals(numberOfEntries.get(), results.size());
                                        }

                                        //Make sure access to RealmObject will not throw an Exception
                                        for (int i = 0, size = results.size(); i < size; i++) {
                                            assertEquals(i, results.get(i).getColumnLong());
                                        }

                                    } catch (AssertionFailedError e) {
                                        threadAssertionError[0] = e;

                                    } finally {
                                        // whatever happened, make sure to notify the waiting TestCase Thread
                                        signalCallbackFinishedLatch.countDown();
                                    }
                                }

                                @Override
                                public void onError(Throwable t) {
                                    try {
                                        threadAssertionError[0] = t;
                                    } finally {
                                        signalCallbackFinishedLatch.countDown();
                                    }
                                }

                                @Override
                                public void onBackgroundQueryCompleted(Realm realm) {
                                    //Triggered on the background thread to alter the caller's Realm state
                                    numberOfEntries.set(random.nextInt(100));
                                    populateTestRealm(realm, numberOfEntries.get());//this is already inside a transaction
                                }

                            })
                            .between("columnLong", 0, 9).findAll();

                    Looper.loop();//ready to receive callback

                } catch (Exception e) {
                    threadAssertionError[0] = e;
                } finally {
                    if (signalCallbackFinishedLatch.getCount() > 0) {
                        // opening Realm crashed, not even callbacks get the chance to be called
                        signalCallbackFinishedLatch.countDown();
                    }
                    if (realm != null) {
                        realm.close();
                    }
                }
            }
        });

        // wait until the callback of our async query proceed
        signalCallbackFinishedLatch.await();
        looper[0].quit();
        executorService.shutdownNow();
        if (null != threadAssertionError[0]) {
            // Throw any assertion errors happened in the background thread
            throw threadAssertionError[0];
        }
    }

