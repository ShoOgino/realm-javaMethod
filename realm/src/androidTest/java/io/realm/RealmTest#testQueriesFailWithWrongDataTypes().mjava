    // Note that this test is relying on the values set while initializing the test dataset
    public void testQueriesFailWithWrongDataTypes() throws IOException {
        RealmResults<AllTypes> resultList = null;

        try { resultList = testRealm.where(AllTypes.class).equalTo("columnstring",3333).findAll(); fail("Realm.where should fail with illegal argument"); } catch (IllegalArgumentException e) { }
        try { resultList = testRealm.where(AllTypes.class).equalTo("columnstring",true).findAll(); fail("Realm.where should fail with illegal argument"); } catch (IllegalArgumentException e) { }
        try { resultList = testRealm.where(AllTypes.class).equalTo("columnstring",3.1415f).findAll(); fail("Realm.where should fail with illegal argument"); } catch (IllegalArgumentException e) { }
        try { resultList = testRealm.where(AllTypes.class).equalTo("columnstring",3.1415d).findAll(); fail("Realm.where should fail with illegal argument"); } catch (IllegalArgumentException e) { }

        try { resultList = testRealm.where(AllTypes.class).equalTo("columnfloat",12).findAll(); fail("Realm.where should fail with illegal argument"); } catch (IllegalArgumentException e) { }
        try { resultList = testRealm.where(AllTypes.class).equalTo("columnfloat",true).findAll(); fail("Realm.where should fail with illegal argument"); } catch (IllegalArgumentException e) { }
        try { resultList = testRealm.where(AllTypes.class).equalTo("columnfloat","string").findAll(); fail("Realm.where should fail with illegal argument"); } catch (IllegalArgumentException e) { }
        try { resultList = testRealm.where(AllTypes.class).equalTo("columnfloat", 3.1415d).findAll(); fail("Realm.where should fail with illegal argument"); } catch (IllegalArgumentException e) { }

        try { resultList = testRealm.where(AllTypes.class).equalTo("columnlong",true).findAll(); fail("Realm.where should fail with illegal argument"); } catch (IllegalArgumentException e) { }
        try { resultList = testRealm.where(AllTypes.class).equalTo("columnlong","string").findAll(); fail("Realm.where should fail with illegal argument"); } catch (IllegalArgumentException e) { }
        try { resultList = testRealm.where(AllTypes.class).equalTo("columnlong",3.1415f).findAll(); fail("Realm.where should fail with illegal argument"); } catch (IllegalArgumentException e) { }
        try { resultList = testRealm.where(AllTypes.class).equalTo("columnlong",3.1415d).findAll(); fail("Realm.where should fail with illegal argument"); } catch (IllegalArgumentException e) { }

        try { resultList = testRealm.where(AllTypes.class).equalTo("columnboolean","test").findAll(); fail("Realm.where should fail with illegal argument"); } catch (IllegalArgumentException e) { }
        try { resultList = testRealm.where(AllTypes.class).equalTo("columnboolean",7).findAll(); fail("Realm.where should fail with illegal argument"); } catch (IllegalArgumentException e) { }
        try { resultList = testRealm.where(AllTypes.class).equalTo("columnboolean",3.1415f).findAll(); fail("Realm.where should fail with illegal argument"); } catch (IllegalArgumentException e) { }
        try { resultList = testRealm.where(AllTypes.class).equalTo("columnboolean",3.1415d).findAll(); fail("Realm.where should fail with illegal argument"); } catch (IllegalArgumentException e) { }

        try { resultList = testRealm.where(AllTypes.class).equalTo("columnbinary","test").findAll(); fail("Realm.where should fail with illegal argument"); } catch (IllegalArgumentException e) { }
        try { resultList = testRealm.where(AllTypes.class).equalTo("columnbinary",7).findAll(); fail("Realm.where should fail with illegal argument"); } catch (IllegalArgumentException e) { }
        try { resultList = testRealm.where(AllTypes.class).equalTo("columnbinary",3.1415f).findAll(); fail("Realm.where should fail with illegal argument"); } catch (IllegalArgumentException e) { }
        try { resultList = testRealm.where(AllTypes.class).equalTo("columnbinary",3.1415d).findAll(); fail("Realm.where should fail with illegal argument"); } catch (IllegalArgumentException e) { }
    }

