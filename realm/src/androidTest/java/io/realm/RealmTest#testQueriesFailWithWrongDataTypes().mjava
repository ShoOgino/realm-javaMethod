    // Note that this test is relying on the values set while initializing the test dataset
    public void testQueriesFailWithWrongDataTypes() throws IOException {
        RealmResults<AllTypes> resultList = null;

        try {
            resultList = testRealm.where(AllTypes.class).equalTo("columnString", 3333).findAll();
            fail("Realm.where should fail with illegal argument");
        } catch (IllegalArgumentException e) {
        }
        try {
            resultList = testRealm.where(AllTypes.class).equalTo("columnString", true).findAll();
            fail("Realm.where should fail with illegal argument");
        } catch (IllegalArgumentException e) {
        }
        try {
            resultList = testRealm.where(AllTypes.class).equalTo("columnString", 3.1415f).findAll();
            fail("Realm.where should fail with illegal argument");
        } catch (IllegalArgumentException e) {
        }
        try {
            resultList = testRealm.where(AllTypes.class).equalTo("columnString", 3.1415d).findAll();
            fail("Realm.where should fail with illegal argument");
        } catch (IllegalArgumentException e) {
        }

        try {
            resultList = testRealm.where(AllTypes.class).equalTo("columnFloat", 12).findAll();
            fail("Realm.where should fail with illegal argument");
        } catch (IllegalArgumentException e) {
        }
        try {
            resultList = testRealm.where(AllTypes.class).equalTo("columnFloat", true).findAll();
            fail("Realm.where should fail with illegal argument");
        } catch (IllegalArgumentException e) {
        }
        try {
            resultList = testRealm.where(AllTypes.class).equalTo("columnFloat", "string").findAll();
            fail("Realm.where should fail with illegal argument");
        } catch (IllegalArgumentException e) {
        }
        try {
            resultList = testRealm.where(AllTypes.class).equalTo("columnFloat", 3.1415d).findAll();
            fail("Realm.where should fail with illegal argument");
        } catch (IllegalArgumentException e) {
        }

        try {
            resultList = testRealm.where(AllTypes.class).equalTo("columnLong", true).findAll();
            fail("Realm.where should fail with illegal argument");
        } catch (IllegalArgumentException e) {
        }
        try {
            resultList = testRealm.where(AllTypes.class).equalTo("columnLong", "string").findAll();
            fail("Realm.where should fail with illegal argument");
        } catch (IllegalArgumentException e) {
        }
        try {
            resultList = testRealm.where(AllTypes.class).equalTo("columnLong", 3.1415f).findAll();
            fail("Realm.where should fail with illegal argument");
        } catch (IllegalArgumentException e) {
        }
        try {
            resultList = testRealm.where(AllTypes.class).equalTo("columnLong", 3.1415d).findAll();
            fail("Realm.where should fail with illegal argument");
        } catch (IllegalArgumentException e) {
        }

        try {
            resultList = testRealm.where(AllTypes.class).equalTo("columnBoolean", "test").findAll();
            fail("Realm.where should fail with illegal argument");
        } catch (IllegalArgumentException e) {
        }
        try {
            resultList = testRealm.where(AllTypes.class).equalTo("columnBoolean", 7).findAll();
            fail("Realm.where should fail with illegal argument");
        } catch (IllegalArgumentException e) {
        }
        try {
            resultList = testRealm.where(AllTypes.class).equalTo("columnBoolean", 3.1415f).findAll();
            fail("Realm.where should fail with illegal argument");
        } catch (IllegalArgumentException e) {
        }
        try {
            resultList = testRealm.where(AllTypes.class).equalTo("columnBoolean", 3.1415d).findAll();
            fail("Realm.where should fail with illegal argument");
        } catch (IllegalArgumentException e) {
        }

        try {
            resultList = testRealm.where(AllTypes.class).equalTo("columnBinary", "test").findAll();
            fail("Realm.where should fail with illegal argument");
        } catch (IllegalArgumentException e) {
        }
        try {
            resultList = testRealm.where(AllTypes.class).equalTo("columnBinary", 7).findAll();
            fail("Realm.where should fail with illegal argument");
        } catch (IllegalArgumentException e) {
        }
        try {
            resultList = testRealm.where(AllTypes.class).equalTo("columnBinary", 3.1415f).findAll();
            fail("Realm.where should fail with illegal argument");
        } catch (IllegalArgumentException e) {
        }
        try {
            resultList = testRealm.where(AllTypes.class).equalTo("columnBinary", 3.1415d).findAll();
            fail("Realm.where should fail with illegal argument");
        } catch (IllegalArgumentException e) {
        }
    }

