    public void testAsyncDistinctNotIndexedFields() throws Throwable {
        final CountDownLatch signalCallbackFinished = new CountDownLatch(4);
        final Throwable[] threadAssertionError = new Throwable[1];
        final Looper[] backgroundLooper = new Looper[1];
        final ExecutorService executorService = Executors.newSingleThreadExecutor();
        executorService.submit(new Runnable() {
            @Override
            public void run() {
                Looper.prepare();
                backgroundLooper[0] = Looper.myLooper();

                Realm realm = null;
                try {
                    realm = openRealmInstance("testAsyncDistinctNotIndexedFields");
                    final long numberOfBlocks = 25;
                    final long numberOfObjects = 10; // must be greater than 1

                    populateForDistinct(realm, numberOfBlocks, numberOfObjects, false);

                    for (String fieldName : new String[]{"Boolean", "Long", "Date", "String"}) {
                        try {
                            realm.distinctAsync(AnnotationIndexTypes.class, "notIndex" + fieldName);
                            fail("notIndex" + fieldName);
                        } catch (IllegalArgumentException ignored) {
                            signalCallbackFinished.countDown();
                        }
                    }

                    Looper.loop();
                } catch (Throwable e) {
                    e.printStackTrace();
                    threadAssertionError[0] = e;

                } finally {
                    if (signalCallbackFinished.getCount() > 0) {
                        signalCallbackFinished.countDown();
                    }
                    if (realm != null) {
                        realm.close();
                    }
                }
            }
        });

        // wait until the callback of our async query proceed
        TestHelper.awaitOrFail(signalCallbackFinished);

        executorService.shutdownNow();
        if (null != threadAssertionError[0]) {
            // throw any assertion errors happened in the background thread
            throw threadAssertionError[0];
        }
        if (backgroundLooper[0] != null) {
            // failing to quit the looper will not execute the finally block responsible
            // of closing the Realm
            backgroundLooper[0].quit();
        }
    }

