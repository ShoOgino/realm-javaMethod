    public void testDeleteObjectFromMultipleThreads() throws InterruptedException, ExecutionException {

        Callable<Long> worker = new Callable<Long>() {
            @Override
            public Long call() throws Exception {
                Realm realm = Realm.getInstance(getContext(), false);
                RealmResults<AllTypes> result = realm.allObjects(AllTypes.class);

                realm.beginTransaction();
                for (AllTypes obj : result) {
                    obj.removeFromRealm();
                }
                realm.commitTransaction();
                return realm.getTable(AllTypes.class).size();
            }
        };

        // Run same job on 2 threads.
        ExecutorService executorService = Executors.newFixedThreadPool(2);
        List<Callable<Long>> callables = Arrays.asList(worker, worker);
        List<Future<Long>> results = executorService.invokeAll(callables, 5, TimeUnit.SECONDS);

        // Only proceed here once both threads are done
        // Then check that objects are deleted from Realm on all 3 threads.
        assertEquals(Long.valueOf(0), results.get(0).get()); // Thread 1
        assertEquals(Long.valueOf(0), results.get(1).get()); // Thread 2
        assertEquals(0, testRealm.allObjects(AllTypes.class).size()); // Main thread
    }

