    public void testWriteCopyTwoThreads() throws InterruptedException, ExecutionException {
        final AtomicBoolean isReady = new AtomicBoolean(false);

        for (int i = 1; i <= 3; i++) {
            Realm.deleteRealmFile(getContext(), "file" + i + ".realm");
        }

        Realm realm1 = Realm.getInstance(getContext(), "file1.realm");
        realm1.beginTransaction();
        AllTypes allTypes = realm1.createObject(AllTypes.class);
        allTypes.setColumnString("Hello World");
        realm1.commitTransaction();

        realm1.writeCopy(getContext().getFilesDir() + "/file2.realm");

        ExecutorService executorService = Executors.newSingleThreadExecutor();
        Future<Boolean> future = executorService.submit(new Callable<Boolean>() {
            @Override
            public Boolean call() throws Exception {
                Looper.prepare();
                Realm realm2 = Realm.getInstance(getContext(), "file1.realm");
                for (int i = 0; i < 10; i++) {
                    realm2.allObjects(AllTypes.class).size();
                }
                isReady.set(true);
                Looper.loop();
                return true;
            }
        });

        // wait for thread to get going
        while (!isReady.get()) {
            Thread.sleep(1000);
        }

        realm1.writeCopy(getContext().getFilesDir() + "/file3.realm");

        realm1.beginTransaction();
        realm1.allObjects(AllTypes.class).first().setColumnString("Hello Universe");
        realm1.commitTransaction();

        assertTrue(new File(getContext().getFilesDir() + "/file1.realm").length() > new File(getContext().getFilesDir() + "/file2.realm").length()); // open read transaction increases size
        assertTrue(new File(getContext().getFilesDir() + "/file1.realm").length() > new File(getContext().getFilesDir() + "/file3.realm").length()); // file3.realm is compacted

        // kill thread
        try {
            future.get(2, TimeUnit.SECONDS);
        } catch (TimeoutException ignore) {}
    }

