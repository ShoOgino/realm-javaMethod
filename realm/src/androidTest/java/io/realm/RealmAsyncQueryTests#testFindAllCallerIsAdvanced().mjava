    // simulate a use case, when the caller thread advance read, while the background thread
    // is operating on a previous version, this will should retry the query on the worker thread
    // to deliver the results once (suing the latest version of the Realm)
    public void testFindAllCallerIsAdvanced() throws Throwable {
        final CountDownLatch signalCallbackFinished = new CountDownLatch(1);
        final CountDownLatch callbackInvokedFinished = new CountDownLatch(1);
        final Throwable[] threadAssertionError = new Throwable[1];
        final AtomicInteger numberOfInvocation = new AtomicInteger(0);
        final ExecutorService executorService = Executors.newSingleThreadExecutor();
        executorService.submit(new Runnable() {
            @Override
            public void run() {
                Looper.prepare();
                final boolean[] isFirstIdle = {true};
                Looper.myQueue().addIdleHandler(new MessageQueue.IdleHandler() {
                    @Override
                    public boolean queueIdle() {
                        if (isFirstIdle[0]) {
                            isFirstIdle[0] = false;
                            return true;

                        } else {
                            signalCallbackFinished.countDown();
                            return false; // unregister from the future IdleHandler events
                        }
                    }
                });

                try {
                    final AtomicInteger numberOfIntercept = new AtomicInteger(1);
                    final Realm realm = openRealmInstance("testFindAllCallerIsAdvanced");
                    final CountDownLatch updateCallerThread = new CountDownLatch(1);
                    final Handler handler = new HandlerProxy(realm.getHandler()) {
                        @Override
                        public boolean onInterceptMessage(int what) {
                            switch (what) {
                                case Realm.REALM_UPDATE_ASYNC_QUERIES: {
                                    // posting this as a runnable guarantee that  REALM_UPDATE_ASYNC_QUERIES
                                    // logic complete before resuming the awaiting REALM_COMPLETED_ASYNC_QUERY
                                    post(new Runnable() {
                                        @Override
                                        public void run() {
                                            updateCallerThread.countDown();
                                        }
                                    });
                                    break;
                                }
                                case Realm.REALM_COMPLETED_ASYNC_QUERY: {
                                    if (numberOfIntercept.getAndDecrement() > 0) {
                                        // we advance the Realm so we can simulate a retry
                                        // this is intercepted on the worker thread, we need to use
                                        // the Realm on the original thread
                                        postAtFront(new Runnable() {
                                            @Override
                                            public void run() {
                                                // this should trigger the update of all
                                                // async queries
                                                realm.beginTransaction();
                                                realm.createObject(AllTypes.class);
                                                realm.commitTransaction();
                                                sendEmptyMessage(Realm.REALM_CHANGED);
                                            }
                                        });

                                        // make this worker thread wait, until we finish
                                        // updating all queries from another thread
                                        try {
                                            updateCallerThread.await();
                                        } catch (InterruptedException e) {
                                            e.printStackTrace();
                                            threadAssertionError[0] = e;
                                        }
                                    }
                                    break;
                                }
                            }
                            return false;
                        }
                    };
                    realm.setHandler(handler);
                    Realm.asyncQueryExecutor.pause();

                    populateTestRealm(realm, 10);
                    final RealmResults<AllTypes> realmResults = realm.where(AllTypes.class)
                            .between("columnLong", 0, 4)
                            .findAllAsync();

                    assertFalse(realmResults.isLoaded());
                    assertEquals(0, realmResults.size());

                    Realm.asyncQueryExecutor.resume();

                    realmResults.addChangeListener(new RealmChangeListener() {
                        @Override
                        public void onChange() {
                            try {
                                assertEquals(1, numberOfInvocation.incrementAndGet());
                                assertTrue(realmResults.isLoaded());
                                assertEquals(6, realmResults.size());
                            } catch (AssertionFailedError e) {
                                threadAssertionError[0] = e;
                            } finally {
                                callbackInvokedFinished.countDown();
                            }
                        }
                    });

                    Looper.loop();

                } catch (Exception e) {
                    e.printStackTrace();
                    threadAssertionError[0] = e;
                }
            }
        });

        // wait until the callback of our async query proceed
        signalCallbackFinished.await(7, TimeUnit.SECONDS);
        callbackInvokedFinished.await(7, TimeUnit.SECONDS);
        if (null != threadAssertionError[0]) {
            // throw any assertion errors happened in the background thread
            throw threadAssertionError[0];
        }

        assertEquals(1, numberOfInvocation.get());
        executorService.shutdownNow();
    }

