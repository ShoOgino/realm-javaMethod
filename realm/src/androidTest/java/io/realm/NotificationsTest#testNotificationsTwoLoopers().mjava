    public void testNotificationsTwoLoopers() {
        final AtomicInteger counter = new AtomicInteger(0);
        final Queue<Handler> handlers = new ConcurrentLinkedQueue<Handler>();

        Thread listenerThread = new Thread() {
            @Override
            public void run() {
                Looper.prepare();
                Realm realm = Realm.getInstance(getContext());
                realm.addChangeListener(new RealmChangeListener() {
                    @Override
                    public void onChange() {
                        counter.incrementAndGet();
                        Looper.myLooper().quit();
                    }
                });
                Looper.loop();
            }
        };
        listenerThread.start();

        Thread writerThread = new Thread() {

            @Override
            public void run() {
                Looper.prepare();
                Realm realm = Realm.getInstance(getContext());
                realm.addChangeListener(new RealmChangeListener() {
                    @Override
                    public void onChange() {
                        counter.incrementAndGet();
                    }
                });
                Handler handler = new Handler();
                handlers.add(handler);
                Looper.loop();
            }
        };
        writerThread.start();
        while (handlers.isEmpty()) {
            try {
                Thread.sleep(10);
            } catch (InterruptedException e) {
                fail();
            }
        }
        Handler handler = handlers.poll();
        handler.post(new Runnable() {
            @Override
            public void run() {
                Realm realm = Realm.getInstance(getContext());
                realm.beginTransaction();
                Dog dog = realm.createObject(Dog.class);
                dog.setName("Rex");
                realm.commitTransaction();
                Looper.myLooper().quit();
            }
        });

        try {
            writerThread.join();
            listenerThread.join(2000);
        } catch (InterruptedException e) {
            fail();
        }

        assertEquals(2, counter.get());
    }

