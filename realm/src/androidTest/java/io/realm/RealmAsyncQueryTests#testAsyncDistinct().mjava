    public void testAsyncDistinct() throws Throwable {
        final CountDownLatch signalCallbackFinished = new CountDownLatch(4);
        final CountDownLatch signalClosedRealm = new CountDownLatch(1);
        final Throwable[] threadAssertionError = new Throwable[1];
        final Looper[] backgroundLooper = new Looper[1];
        final ExecutorService executorService = Executors.newSingleThreadExecutor();
        executorService.submit(new Runnable() {
            @Override
            public void run() {
                Looper.prepare();
                backgroundLooper[0] = Looper.myLooper();

                Realm realm = null;
                try {
                    Realm.asyncQueryExecutor.pause();
                    realm = openRealmInstance("testAsyncDistinct");
                    final long numberOfBlocks = 25;
                    final long numberOfObjects = 10; // must be greater than 1

                    populateForDistinct(realm, numberOfBlocks, numberOfObjects, false);

                    final RealmResults<AnnotationIndexTypes> distinctBool = realm.distinctAsync(AnnotationIndexTypes.class, "indexBoolean");
                    final RealmResults<AnnotationIndexTypes> distinctLong = realm.distinctAsync(AnnotationIndexTypes.class, "indexLong");
                    final RealmResults<AnnotationIndexTypes> distinctDate = realm.distinctAsync(AnnotationIndexTypes.class, "indexDate");
                    final RealmResults<AnnotationIndexTypes> distinctString = realm.distinctAsync(AnnotationIndexTypes.class, "indexString");

                    assertFalse(distinctBool.isLoaded());
                    assertTrue(distinctBool.isValid());
                    assertTrue(distinctBool.isEmpty());

                    assertFalse(distinctLong.isLoaded());
                    assertTrue(distinctLong.isValid());
                    assertTrue(distinctLong.isEmpty());

                    assertFalse(distinctDate.isLoaded());
                    assertTrue(distinctDate.isValid());
                    assertTrue(distinctDate.isEmpty());

                    assertFalse(distinctString.isLoaded());
                    assertTrue(distinctString.isValid());
                    assertTrue(distinctString.isEmpty());

                    Realm.asyncQueryExecutor.resume();

                    distinctBool.addChangeListener(new RealmChangeListener() {
                        @Override
                        public void onChange() {
                            assertEquals(2, distinctBool.size());
                            signalCallbackFinished.countDown();
                        }
                    });

                    distinctLong.addChangeListener(new RealmChangeListener() {
                        @Override
                        public void onChange() {
                            assertEquals(numberOfBlocks, distinctLong.size());
                            signalCallbackFinished.countDown();
                        }
                    });

                    distinctDate.addChangeListener(new RealmChangeListener() {
                        @Override
                        public void onChange() {
                            assertEquals(numberOfBlocks, distinctDate.size());
                            signalCallbackFinished.countDown();
                        }
                    });

                    distinctString.addChangeListener(new RealmChangeListener() {
                        @Override
                        public void onChange() {
                            assertEquals(numberOfBlocks, distinctString.size());
                            signalCallbackFinished.countDown();
                        }
                    });

                    Looper.loop();
                } catch (Throwable e) {
                    e.printStackTrace();
                    threadAssertionError[0] = e;

                } finally {
                    if (signalCallbackFinished.getCount() > 0) {
                        signalCallbackFinished.countDown();
                    }
                    if (realm != null) {
                        realm.close();
                    }
                    signalClosedRealm.countDown();
                }
            }
        });

        // wait until the callback of our async query proceed
        TestHelper.awaitOrFail(signalCallbackFinished);
        executorService.shutdownNow();
        if (backgroundLooper[0] != null) {
            // failing to quit the looper will not execute the finally block responsible
            // of closing the Realm
            backgroundLooper[0].quit();
        }

        TestHelper.awaitOrFail(signalClosedRealm);

        if (null != threadAssertionError[0]) {
            // throw any assertion errors happened in the background thread
            throw threadAssertionError[0];
        }

    }

