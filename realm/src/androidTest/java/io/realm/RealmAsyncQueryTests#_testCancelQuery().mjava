    // cancel a pending query
    public void _testCancelQuery() throws Throwable {
        setDebugModeForAsyncRealmQuery(ADVANCE_THREE_READ, RetryPolicy.MODE_INDEFINITELY, RETRY_NUMBER_NOT_APPLICABLE);

        final AtomicInteger retryNumber = new AtomicInteger(0);
        final CountDownLatch signalQueryRunning = new CountDownLatch(1);
        final Looper[] looper = new Looper[1];
        final Throwable[] threadAssertionError = new Throwable[1];
        ExecutorService executorService = Executors.newSingleThreadExecutor();
        final RealmQuery.Request[] asyncRequest = new RealmQuery.Request[1];
        executorService.submit(new Runnable() {
            @Override
            public void run() {
                Looper.prepare();
                looper[0] = Looper.myLooper();
                Realm realm = null;
                try {
                    realm = openRealmInstance("test_cancel_query");
                    populateTestRealm(realm, 10);

                    asyncRequest[0] = realm.where(AllTypes.class)
                            .between("columnLong", 0, 9)
                            .findAll(new RealmResults.DebugRealmResultsQueryCallback<AllTypes>() {
                                @Override
                                public void onSuccess(RealmResults<AllTypes> results) {
                                    threadAssertionError[0] = new AssertionFailedError("onSuccess called on a cancelled query");
                                }

                                @Override
                                public void onError(Exception t) {
                                    threadAssertionError[0] = new AssertionFailedError("onError called on a cancelled query");
                                }

                                @Override
                                public void onBackgroundQueryCompleted(Realm realm) {
                                    populateTestRealm(realm, 1);
                                    // after 2 retries we cancel the query
                                    if (retryNumber.incrementAndGet() == 2) {
                                        asyncRequest[0].cancel();
                                        signalQueryRunning.countDown();
                                    }
                                }
                            });

                    Looper.loop();

                } catch (Exception e) {
                    e.printStackTrace();
                    threadAssertionError[0] = e;

                } finally {
                    if (signalQueryRunning.getCount() > 0) {
                        signalQueryRunning.countDown();
                    }
                    if (realm != null) {
                        realm.close();
                    }
                }
            }
        });

        signalQueryRunning.await();
        executorService.shutdown();
        executorService.awaitTermination(5, TimeUnit.SECONDS);

        assertTrue(asyncRequest[0].isCancelled());

        looper[0].quit();
        executorService.shutdownNow();

        if (null != threadAssertionError[0]) {
            throw threadAssertionError[0];
        }
    }

