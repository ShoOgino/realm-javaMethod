    public void testUnloadedRealmListsShouldBeTheSameInstance () throws Throwable {
        final CountDownLatch signalCallbackFinished = new CountDownLatch(1);
        final Throwable[] threadAssertionError = new Throwable[1];
        final Looper[] backgroundLooper = new Looper[1];
        final ExecutorService executorService = Executors.newSingleThreadExecutor();
        executorService.submit(new Runnable() {
            @Override
            public void run() {
                Looper.prepare();
                backgroundLooper[0] = Looper.myLooper();

                Realm realm = null;
                try {
                    realm = openRealmInstance("testUnloadedRealmListsShouldBeTheSameInstance");
                    Realm.asyncQueryExecutor.pause();

                    populateTestRealm(realm, 10);
                    final AllTypes alltypes1 = realm.where(AllTypes.class)
                            .equalTo("columnLong", 0)
                            .findFirstAsync();

                    final AllTypes alltypes2 = realm.where(AllTypes.class)
                            .equalTo("columnLong", 4)
                            .findFirstAsync();

                    assertFalse(alltypes1.isLoaded());
                    assertNotNull(alltypes1.getColumnRealmList());
                    assertEquals(0, alltypes1.getColumnRealmList().size());

                    assertFalse(alltypes2.isLoaded());
                    assertNotNull(alltypes2.getColumnRealmList());
                    assertEquals(0, alltypes2.getColumnRealmList().size());

                    assertEquals(alltypes1.getColumnRealmList(), alltypes2.getColumnRealmList());
                    assertTrue(alltypes1.getColumnRealmList() == alltypes2.getColumnRealmList());

                    Realm.asyncQueryExecutor.resume();
                    signalCallbackFinished.countDown();
                    Looper.loop();

                } catch (Throwable e) {
                    e.printStackTrace();
                    threadAssertionError[0] = e;

                } finally {
                    if (signalCallbackFinished.getCount() > 0) {
                        signalCallbackFinished.countDown();
                    }
                    if (realm != null) {
                        realm.close();
                    }
                }
            }
        });

        // wait until the callback of our async query proceed
        TestHelper.awaitOrFail(signalCallbackFinished);

        executorService.shutdownNow();
        if (null != threadAssertionError[0]) {
            // throw any assertion errors happened in the background thread
            throw threadAssertionError[0];
        }
        if (backgroundLooper[0] != null) {
            // failing to quit the looper will not execute the finally block responsible
            // of closing the Realm
            backgroundLooper[0].quit();
        }
    }

