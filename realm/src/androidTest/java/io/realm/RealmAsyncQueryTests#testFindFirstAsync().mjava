    // similar UC as #testFindAllAsync using 'findFirst'
    public void testFindFirstAsync() throws  Throwable {
        final CountDownLatch signalCallbackFinished = new CountDownLatch(1);
        final Throwable[] threadAssertionError = new Throwable[1];
        final RealmObject[] result = new RealmObject[1];
        final ExecutorService executorService = Executors.newSingleThreadExecutor();
        executorService.submit(new Runnable() {
            @Override
            public void run() {
                Looper.prepare();
                final boolean[] isFirstIdle = {true};
                Looper.myQueue().addIdleHandler(new MessageQueue.IdleHandler() {
                    @Override
                    public boolean queueIdle() {
                        if (isFirstIdle[0]) {
                            isFirstIdle[0] = false;
                            return true;

                        } else {
                            // Last message (i.e REALM_COMPLETED_ASYNC_QUERY was processed)
                            try {
                                assertTrue(result[0].isLoaded());
                                //TODO assert value are correct for empty & populated object + test RealmList & RealmObject
                            } catch (AssertionFailedError e) {
                                threadAssertionError[0] = e;
                            } finally {
                                signalCallbackFinished.countDown();
                            }
                            return false; // unregister from the future IdleHandler events
                        }
                    }
                });

                Realm realm = null;
                try {
                    realm = openRealmInstance("testFindFirstAsync");
                    populateTestRealm(realm, 10);

                    final AllTypes firstAsync = realm.where(AllTypes.class).findFirstAsync();
                    result[0] = firstAsync;

                    Looper.loop();

                } catch (Throwable e) {
                    e.printStackTrace();
                    threadAssertionError[0] = e;

                } finally {
                    if (signalCallbackFinished.getCount() > 0) {
                        signalCallbackFinished.countDown();
                    }
                    if (realm != null) {
                        realm.close();
                    }
                }
            }
        });

        // wait until the callback of our async query proceed
        if (null != threadAssertionError[0]) {
            // throw any assertion errors happened in the background thread
            throw threadAssertionError[0];
        }
        executorService.shutdownNow();
    }

