    public void testFindFirstAsync() throws  Throwable {
        final CountDownLatch signalCallbackFinished = new CountDownLatch(1);
        final Throwable[] threadAssertionError = new Throwable[1];
        final ExecutorService executorService = Executors.newSingleThreadExecutor();
        executorService.submit(new Runnable() {
            @Override
            public void run() {
                Looper.prepare();

                Realm realm = null;
                try {
                    realm = openRealmInstance("testFindFirstAsync");
                    final RealmThreadPoolExecutor asyncQueryExecutor =  Realm.asyncQueryExecutor;
                    final Handler handler = realm.getHandler();
                    populateTestRealm(realm, 10);
//                    realm.beginTransaction();
                    final AllTypes firstAsync = realm.where(AllTypes.class).findFirstAsync();

////                    final RealmResults<AllTypes> realmResults = realm.where(AllTypes.class)
////                            .between("columnLong", 0, 4)
////                            .findAllAsync();
//                    AllTypes firstAsync = realm.createObject(AllTypes.class);
//                    assertFalse(firstAsync.isLoaded());
//                    assertEquals("", firstAsync.getColumnString());
//                    assertEquals(0,firstAsync.getColumnLong());
//                    assertEquals(0f,firstAsync.getColumnFloat());
//                    assertEquals(0d, firstAsync.getColumnDouble());
//                    assertFalse(firstAsync.isColumnBoolean());
//                    assertNotNull(firstAsync.getColumnBinary());
//                    assertEquals(0, firstAsync.getColumnBinary().length);
//                    assertNull(firstAsync.getColumnRealmObject());
//                    assertNotNull(firstAsync.getColumnRealmList());
//                    assertEquals(0, firstAsync.getColumnRealmList().size());
//                    realm.commitTransaction();
//                    assertEquals(0, realmResults.size());

                    handler.postDelayed(new Runnable() {
                        @Override
                        public void run() {
                            try {
                                assertTrue(firstAsync.isLoaded());
                                //TODO assert value are correct for empty & populated object + test RealmList & RealmObject
                            } catch (AssertionFailedError e) {
                                threadAssertionError[0] = e;
                            } finally {
                                signalCallbackFinished.countDown();
                            }
                        }
                    }, 16);// give the looper a chance to process REALM_COMPLETED_ASYNC_QUERY message


//                    firstAsync.load();
//                    assertTrue(firstAsync.isLoaded());
                    Looper.loop();// ready to receive callback

                } catch (Throwable e) {
                    e.printStackTrace();
                    threadAssertionError[0] = e;

                } finally {
                    if (signalCallbackFinished.getCount() > 0) {
                        signalCallbackFinished.countDown();
                    }
                    if (realm != null) {
                        realm.close();
                    }
                }
            }
        });

        // wait until the callback of our async query proceed
//        signalCallbackFinished.await(7, TimeUnit.SECONDS);
        signalCallbackFinished.await();


        executorService.shutdownNow();
        if (null != threadAssertionError[0]) {
            // throw any assertion errors happened in the background thread
            throw threadAssertionError[0];
        }
    }

