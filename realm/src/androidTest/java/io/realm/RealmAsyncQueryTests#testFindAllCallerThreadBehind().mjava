    // UC:
    //   1- insert 10 objects
    //   2- start 2 async queries to find all objects [0-9] & objects[0-4]
    //   3- assert both RealmResults are empty (Worker Thread didn't complete)
    //   4- start a third thread to insert 2 more elements
    //   5- the third thread signal a REALM_CHANGE that should update all async queries
    //   6- when the results from step [2] completes they should be ignored, since a pending
    //      update (using the latest realm) for all async queries is in progress
    //   7- onChange notification will be triggered once
    public void testFindAllCallerThreadBehind() throws Throwable {
        final CountDownLatch signalCallbackFinished = new CountDownLatch(2);
        final Throwable[] threadAssertionError = new Throwable[1];
        final ExecutorService executorService = Executors.newSingleThreadExecutor();
        executorService.submit(new Runnable() {
            @Override
            public void run() {
                Looper.prepare();
                try {
                    final Realm realm = openRealmInstance("testFindAllCallerThreadBehind");
                    final AtomicInteger numberOfCompletedAsyncQuery = new AtomicInteger(0);
                    final AtomicInteger numberOfInterceptedChangeMessage = new AtomicInteger(0);
                    final Handler handler = new HandlerProxy(realm.getHandler()) {
                        @Override
                        public boolean onInterceptMessage(int what) {
                            switch (what) {
                                case Realm.REALM_CHANGED: {
                                    // should only intercept the first REALM_CHANGED coming from the
                                    // background update thread

                                    // swallow this message, so the caller thread
                                    // remain behind the worker thread. This has as
                                    // a consequence to ignore the delivered result & wait for the
                                    // upcoming REALM_CHANGED to batch update all async queries
                                    return numberOfInterceptedChangeMessage.getAndIncrement() == 0;
                                }
                                case Realm.REALM_COMPLETED_ASYNC_QUERY: {
                                    if (numberOfCompletedAsyncQuery.incrementAndGet() == 2) {
                                        // both queries have completed now (& their results should be ignored)
                                        // now send the REALM_CHANGED event that should batch update all queries
                                        sendEmptyMessage(Realm.REALM_CHANGED);
                                    }
                                }
                            }
                            return false;
                        }
                    };
                    realm.setHandler(handler);
                    Realm.asyncQueryExecutor.pause();

                    populateTestRealm(realm, 10);
                    final RealmResults<AllTypes> realmResults1 = realm.where(AllTypes.class)
                            .findAllAsync();
                    final RealmResults<AllTypes> realmResults2 = realm.where(AllTypes.class)
                            .between("columnLong", 0, 4).findAllAsync();

                    assertFalse(realmResults1.isLoaded());
                    assertFalse(realmResults2.isLoaded());
                    assertEquals(0, realmResults1.size());
                    assertEquals(0, realmResults2.size());

                    // advance the Realm from a background thread
                    final CountDownLatch bgThreadLatch = new CountDownLatch(1);
                    new Thread() {
                        @Override
                        public void run() {
                            Realm bgRealm = Realm.getInstance(realm.getConfiguration());
                            bgRealm.beginTransaction();
                            bgRealm.where(AllTypes.class).equalTo("columnLong", 4).findFirst().setColumnString("modified");
                            bgRealm.createObject(AllTypes.class);
                            bgRealm.createObject(AllTypes.class);
                            bgRealm.commitTransaction();
                            bgRealm.close();
                            bgThreadLatch.countDown();
                        }
                    }.start();
                    bgThreadLatch.await();
                    Realm.asyncQueryExecutor.resume();

                    final AtomicInteger maxNumberOfNotificationsQuery1 = new AtomicInteger(1);
                    final AtomicInteger maxNumberOfNotificationsQuery2 = new AtomicInteger(1);
                    realmResults1.addChangeListener(new RealmChangeListener() {
                        @Override
                        public void onChange() {
                            try {
                                assertTrue(maxNumberOfNotificationsQuery1.getAndDecrement() > 0);
                                assertTrue(realmResults1.isLoaded());
                                assertEquals(12, realmResults1.size());
                                assertEquals("modified", realmResults1.get(4).getColumnString());

                            } catch (AssertionFailedError e) {
                                threadAssertionError[0] = e;
                            } finally {
                                signalCallbackFinished.countDown();
                            }
                        }
                    });

                    realmResults2.addChangeListener(new RealmChangeListener() {
                        @Override
                        public void onChange() {
                            try {
                                assertTrue(maxNumberOfNotificationsQuery2.getAndDecrement() > 0);
                                assertTrue(realmResults2.isLoaded());
                                assertEquals(7, realmResults2.size());// the 2 add rows has columnLong == 0
                                assertEquals("modified", realmResults2.get(4).getColumnString());

                            } catch (AssertionFailedError e) {
                                threadAssertionError[0] = e;
                            } finally {
                                signalCallbackFinished.countDown();
                            }
                        }
                    });

                    Looper.loop();

                } catch (Exception e) {
                    e.printStackTrace();
                    threadAssertionError[0] = e;

                } finally {
                    if (signalCallbackFinished.getCount() > 0) {
                        signalCallbackFinished.countDown();
                    }

                }
            }
        });

        signalCallbackFinished.await(7, TimeUnit.SECONDS);
        if (null != threadAssertionError[0]) {
            // throw any assertion errors happened in the background thread
            throw threadAssertionError[0];
        }
        executorService.shutdownNow();
    }

