    // finding element [0-4] asynchronously then wait for the promise to be loaded
    // no use of notification callback
    public void testFindAllSortedAsync() throws Throwable {
        final CountDownLatch signalCallbackFinished = new CountDownLatch(1);
        final Throwable[] threadAssertionError = new Throwable[1];
        final ExecutorService executorService = Executors.newSingleThreadExecutor();
        executorService.submit(new Runnable() {
            @Override
            public void run() {
                Looper.prepare();

                Realm realm = null;
                try {
                    realm = openRealmInstance("testFindAllSortedAsync");
                    final Handler handler = realm.getHandler();
                    final RealmThreadPoolExecutor asyncQueryExecutor =  Realm.asyncQueryExecutor;
                    asyncQueryExecutor.pause();

                    populateTestRealm(realm, 10);
                    final RealmResults<AllTypes> realmResults = realm.where(AllTypes.class)
                            .between("columnLong", 0, 4)
                            .findAllSortedAsync("columnString", RealmResults.SORT_ORDER_DESCENDING);

                    assertFalse(realmResults.isLoaded());
                    assertEquals(0, realmResults.size());

                    asyncQueryExecutor.resume();

                    handler.postDelayed(new Runnable() {
                        @Override
                        public void run() {
                            try {
                                assertTrue(realmResults.isLoaded());
                                assertEquals(5, realmResults.size());
                                assertEquals("test data 4", realmResults.get(0).getColumnString());
                                assertEquals("test data 3", realmResults.get(1).getColumnString());
                                assertEquals("test data 2", realmResults.get(2).getColumnString());
                                assertEquals("test data 1", realmResults.get(3).getColumnString());
                                assertEquals("test data 0", realmResults.get(4).getColumnString());

                            } catch (AssertionFailedError e) {
                                threadAssertionError[0] = e;
                            } finally {
                                signalCallbackFinished.countDown();
                            }
                        }
                    }, 16);// give the looper a chance to process REALM_COMPLETED_ASYNC_QUERY message

                    Looper.loop();// ready to receive callback

                } catch (Exception e) {
                    e.printStackTrace();
                    threadAssertionError[0] = e;

                } finally {
                    if (signalCallbackFinished.getCount() > 0) {
                        signalCallbackFinished.countDown();
                    }
                    if (realm != null) {
                        realm.close();
                    }
                }
            }
        });

        // wait until the callback of our async query proceed
//        signalCallbackFinished.await(7, TimeUnit.SECONDS);
        signalCallbackFinished.await();


        executorService.shutdownNow();
        if (null != threadAssertionError[0]) {
            // throw any assertion errors happened in the background thread
            throw threadAssertionError[0];
        }
    }

