    // This should crash because the number of retries is less the the number of modifications
    public void testMismatchedRealmVersion_should_crash_after_2_retries () throws Throwable {
        final CountDownLatch signalCallbackFinishedLatch = new CountDownLatch(1);
        final Looper[] looper = new Looper[1];
        final Throwable[] threadAssertionError = new Throwable[1];
        ExecutorService executorService = Executors.newSingleThreadExecutor();
        //simulate 3 modification to the caller's Realm each time a result from the background thread
        // try to handover the result to the caller's Realm
        setDebugModeForAsyncRealmQuery(3, RetryPolicy.MODE_MAX_RETRY, 2);
        executorService.submit(new Runnable() {
            @Override
            public void run() {
                Looper.prepare();
                looper[0] = Looper.myLooper();
                Realm realm = null;
                try {
                    realm = openRealmInstance("test_should_crash_after_2_retries");
                    populateTestRealm(realm, 10);
                    // async query (will run on different thread)
                    realm.findAsync(AllTypes.class,
                            new Realm.DebugQueryCallback<AllTypes>() {
                                @Override
                                public void onSuccess(RealmResults<AllTypes> results) {
                                    try {
                                        signalCallbackFinishedLatch.countDown();

                                    } catch (AssertionFailedError e) {
                                        threadAssertionError[0] = e;

                                    } finally {
                                        // whatever happened, make sure to notify the waiting TestCase Thread
                                        signalCallbackFinishedLatch.countDown();
                                    }
                                }

                                @Override
                                public void onError(Throwable t) {
                                    try {
                                        threadAssertionError[0] = t;
                                    } finally {
                                        signalCallbackFinishedLatch.countDown();
                                    }
                                }

                                @Override
                                public void onBackgroundQueryCompleted(Realm realm) {
                                    //Triggered on the background thread to alter the caller's Realm state
                                    populateTestRealm(realm, 3);//this is already inside a transaction
                                }

                            })
                            .between("columnLong", 0, 9).findAll();

                    Looper.loop();//ready to receive callback

                } catch (Exception e) {
                    threadAssertionError[0] = e;
                } finally {
                    if (signalCallbackFinishedLatch.getCount() > 0) {
                        // opening Realm crashed, not even callbacks get the chance to be called
                        signalCallbackFinishedLatch.countDown();
                    }
                    if (realm != null) {
                        realm.close();
                    }
                }
            }
        });

        // wait until the callback of our async query proceed
        signalCallbackFinishedLatch.await();
        looper[0].quit();
        executorService.shutdownNow();
        if (null == threadAssertionError[0] || !(threadAssertionError[0] instanceof UnreachableVersionException)) {
            fail("Expecting RuntimeException: Unspecified exception." +
                    " Handover failed due to version mismatch in io_realm_internal_TableQuery.cpp");
        }
    }

