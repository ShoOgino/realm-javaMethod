    // It is necessary to overload this method.
    // AndroidTestRunner does call Looper.prepare() and we can have a looper in the case. The problem is all the test
    // cases are running in a single thread!!! And after Looper.quit() called, it cannot start again. That means we
    // can only have one case in this class LoL.
    // By overloading this method, we create a new thread and looper to run the real case. And use latch to wait until
    // it is finished. Then we can get rid of creating the thread in the test method, using array to store exception, many
    // levels of nested code. Make the test case more nature.
    @Override
    public void runBare() throws Throwable {
        final Throwable[] throwableArray = new Throwable[1];
        final CountDownLatch latch = new CountDownLatch(1);
        Thread thread = new Thread(new Runnable() {
            @Override
            public void run() {
                Looper.prepare();
                try {
                    RealmInterprocessTest.super.runBare();
                } catch (Throwable throwable) {
                    throwableArray[0] = throwable;
                } finally {
                    latch.countDown();
                }
            }
        });

        thread.start();
        latch.await();

        if (throwableArray[0] != null) {
            throw throwableArray[0];
        }
    }

