    // Test a nullable field already has a non-null value, update it through JSON with null value
    // of the corresponding field.
    public void testUpdateNullTypesJSONWithNulls() throws IOException, JSONException {
        String json = TestHelper.streamToString(loadJsonFromAssets("nulltypes.json"));
        JSONArray jsonArray = new JSONArray(json);
        // Nullable fields with values
        JSONObject jsonObject = jsonArray.getJSONObject(1);
        jsonObject.put("id", 1);

        testRealm.beginTransaction();
        // Now object with id 1 has values for all nullable fields.
        testRealm.createObjectFromJson(NullTypes.class, jsonObject);
        testRealm.commitTransaction();
        RealmResults<NullTypes> nullTypesRealmResults = testRealm.allObjects(NullTypes.class);
        assertEquals(2, nullTypesRealmResults.size());
        checkNullableValuesAreNotNull(nullTypesRealmResults.first());

        // Update object with id 1, nullable fields should have null values
        JSONArray array = new JSONArray(json);
        testRealm.beginTransaction();
        testRealm.createOrUpdateAllFromJson(NullTypes.class, array);
        testRealm.commitTransaction();

        nullTypesRealmResults = testRealm.allObjects(NullTypes.class);
        assertEquals(3, nullTypesRealmResults.size());

        NullTypes nullTypes1 = nullTypesRealmResults.where().equalTo("id", 1).findFirst();
        checkNullableValuesAreNull(nullTypes1);
    }

