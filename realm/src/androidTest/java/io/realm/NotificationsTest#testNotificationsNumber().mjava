    public void testNotificationsNumber () throws InterruptedException, ExecutionException {
        Realm.deleteRealmFile(getContext());

        final AtomicInteger counter = new AtomicInteger(0);
        final AtomicBoolean isReady = new AtomicBoolean(false);

        ExecutorService executorService = Executors.newSingleThreadExecutor();
        Future<Boolean> future = executorService.submit(new Callable<Boolean>() {
            @Override
            public Boolean call() throws Exception {
                Looper.prepare();
                Realm realm = Realm.getInstance(getContext());
                realm.addChangeListener(new RealmChangeListener() {
                    @Override
                    public void onChange() {
                        counter.incrementAndGet();
                    }
                });
                isReady.set(true);
                Looper.loop();
                return true;
            }
        });

        while(!isReady.get()) {
            Thread.sleep(5);
        }

        Realm realm = Realm.getInstance(getContext(), false);
        realm.beginTransaction();
        Dog dog = realm.createObject(Dog.class);
        dog.setName("Rex");
        realm.commitTransaction();

        try {
            future.get(1, TimeUnit.SECONDS);
        } catch (TimeoutException ignore) {}

        assertEquals(2, counter.get());
    }

