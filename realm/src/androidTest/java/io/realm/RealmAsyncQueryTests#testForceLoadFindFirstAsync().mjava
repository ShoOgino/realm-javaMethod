    // similar UC as #testForceLoadAsync using 'findFirst'
    public void testForceLoadFindFirstAsync() throws Throwable {
        final CountDownLatch signalCallbackFinished = new CountDownLatch(1);
        final CountDownLatch signalClosedRealm = new CountDownLatch(1);
        final Throwable[] threadAssertionError = new Throwable[1];
        final Looper[] backgroundLooper = new Looper[1];
        final ExecutorService executorService = Executors.newSingleThreadExecutor();
        executorService.submit(new Runnable() {
            @Override
            public void run() {
                Looper.prepare();
                backgroundLooper[0] = Looper.myLooper();

                Realm realm = null;
                try {
                    realm = openRealmInstance("testForceLoadFindFirstAsync");
                    Realm.asyncQueryExecutor.pause();

                    populateTestRealm(realm, 10);
                    final AllTypes realmResults = realm.where(AllTypes.class)
                            .between("columnLong", 4, 9)
                            .findFirstAsync();

                    assertFalse(realmResults.isLoaded());
                    assertEquals("", realmResults.getColumnString());

                    Realm.asyncQueryExecutor.resume();

                    assertTrue(realmResults.load());
                    assertTrue(realmResults.isLoaded());
                    assertEquals("test data 4", realmResults.getColumnString());

                    signalCallbackFinished.countDown();
                    Looper.loop();

                } catch (Throwable e) {
                    e.printStackTrace();
                    threadAssertionError[0] = e;

                } finally {
                    if (signalCallbackFinished.getCount() > 0) {
                        signalCallbackFinished.countDown();
                    }
                    if (realm != null) {
                        realm.close();
                    }
                    signalClosedRealm.countDown();
                }
            }
        });

        // wait until the callback of our async query proceed
        TestHelper.awaitOrFail(signalCallbackFinished);
        if (backgroundLooper[0] != null) {
            // failing to quit the looper will not execute the finally block responsible
            // of closing the Realm
            backgroundLooper[0].quit();
        }

        TestHelper.awaitOrFail(signalClosedRealm);

        if (null != threadAssertionError[0]) {
            // throw any assertion errors happened in the background thread
            throw threadAssertionError[0];
        }


        executorService.shutdownNow();
    }

