    public void testAsyncDistinctFieldDoesNotExist() throws Throwable {
        final CountDownLatch signalCallbackFinished = new CountDownLatch(1);
        final CountDownLatch signalClosedRealm = new CountDownLatch(1);
        final Throwable[] threadAssertionError = new Throwable[1];
        final Looper[] backgroundLooper = new Looper[1];
        final ExecutorService executorService = Executors.newSingleThreadExecutor();
        executorService.submit(new Runnable() {
            @Override
            public void run() {
                Looper.prepare();
                backgroundLooper[0] = Looper.myLooper();

                Realm realm = null;
                try {
                    realm = openRealmInstance("testAsyncDistinctFieldDoesNotExist");
                    final long numberOfBlocks = 25;
                    final long numberOfObjects = 10; // must be greater than 1
                    populateForDistinct(realm, numberOfBlocks, numberOfObjects, false);

                    try {
                        realm.distinctAsync(AnnotationIndexTypes.class, "doesNotExist");
                        fail();
                    } catch (IllegalArgumentException ignored) {
                        signalCallbackFinished.countDown();
                    }

                    Looper.loop();
                } catch (Throwable e) {
                    e.printStackTrace();
                    threadAssertionError[0] = e;

                } finally {
                    if (signalCallbackFinished.getCount() > 0) {
                        signalCallbackFinished.countDown();
                    }
                    if (realm != null) {
                        realm.close();
                    }
                    signalClosedRealm.countDown();
                }
            }
        });

        exitOrThrow(executorService, signalCallbackFinished, signalClosedRealm, backgroundLooper, threadAssertionError);
    }

