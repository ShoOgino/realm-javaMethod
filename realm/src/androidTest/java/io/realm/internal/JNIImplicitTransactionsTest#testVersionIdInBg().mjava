    public void testVersionIdInBg() throws Throwable {
        deleteFile();
        SharedGroup sg = new SharedGroup(testFile, true, SharedGroup.Durability.FULL, null); // TODO: try with encryption

//        ReadTransaction readTransaction = sg.beginRead();
//        sg.promoteToWrite();
//        Table table = readTransaction.getTable("test");
//        table.addColumn(ColumnType.INTEGER, "integer");
//        table.addEmptyRow();
//        sg.commitAndContinueAsRead();

        // Create a table
        WriteTransaction wt = sg.beginWrite();
        if (!wt.hasTable("test")) {
            Table table = wt.getTable("test");
            table.addColumn(ColumnType.INTEGER, "integer");
            table.addEmptyRow();
        }
//        wt.commit();
        sg.commitAndContinueAsRead();

//        sg.advanceRead();

        final SharedGroup.VersionID versionID = sg.getVersion();
        Log.d("REALM", ">>>>>>>>>>>>>>>>>>>>>>> testVersionIdInBg versionID=" + versionID.toString());
        final Throwable[] threadAssertionError = new Throwable[1];
        final CountDownLatch signalCallbackFinished = new CountDownLatch(1);

        new Thread() {
            @Override
            public void run() {
                SharedGroup sg = new SharedGroup(testFile, true, SharedGroup.Durability.FULL, null);
                sg.beginImplicitTransaction();
                SharedGroup.VersionID versionIdBg = sg.getVersion();
                Log.d("REALM", ">>>>>>>>>>>>>>>>>>>>>>> background versionID=" + versionID.toString());
                try {
                    assertEquals(0, versionID.compareTo(versionIdBg));
                } catch (AssertionFailedError e) {
                    threadAssertionError[0] = e;
                } finally {
                    sg.close();
                    signalCallbackFinished.countDown();
                }
            }
        }.start();
        sg.close();
        signalCallbackFinished.await();

        if (null != threadAssertionError[0]) {
            // throw any assertion errors happened in the background thread
            throw threadAssertionError[0];
        }

    }

