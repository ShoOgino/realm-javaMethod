    public void testMustFailOnWriteInReadTransactions() {
        SharedGroup db = new SharedGroup(testFile, SharedGroup.Durability.FULL, null);

        writeOneTransaction(db, 1);

        ReadTransaction t = db.beginRead();
        Table table = t.getTable("EmployeeTable");

        try { table.addAt(0, 0, false);             fail();} catch (IllegalStateException e) {assertNotNull(e);}
        try { table.add(0, false);                  fail();} catch (IllegalStateException e) {assertNotNull(e);}
        try { table.addEmptyRow();                  fail();} catch (IllegalStateException e) {assertNotNull(e);}
        try { table.addEmptyRows(1);                fail();} catch (IllegalStateException e) {assertNotNull(e);}
        try { table.adjust(0,0);                    fail();} catch (IllegalStateException e) {assertNotNull(e);}
        try { table.clear();                        fail();} catch (IllegalStateException e) {assertNotNull(e);}
        try { table.clearSubtable(0,0);             fail();} catch (IllegalStateException e) {assertNotNull(e);}
        try { table.optimize();                     fail();} catch (IllegalStateException e) {assertNotNull(e);}
        try { table.remove(0);                      fail();} catch (IllegalStateException e) {assertNotNull(e);}
        try { table.removeLast();                   fail();} catch (IllegalStateException e) {assertNotNull(e);}
        try { table.setBinaryByteArray(0,0,null);   fail();} catch (IllegalStateException e) {assertNotNull(e);}
        try { table.setBoolean(0,0,false);          fail();} catch (IllegalStateException e) {assertNotNull(e);}
        try { table.setDate(0,0,new Date(0));       fail();} catch (IllegalStateException e) {assertNotNull(e);}
        try { table.setIndex(0);                    fail();} catch (IllegalStateException e) {assertNotNull(e);}
        try { table.setLong(0,0,0);                 fail();} catch (IllegalStateException e) {assertNotNull(e);}
        try { table.setMixed(0,0,null);             fail();} catch (IllegalStateException e) {assertNotNull(e);}
        try { table.setString(0,0,"");              fail();} catch (IllegalStateException e) {assertNotNull(e);}
        try { table.updateFromSpec(null);           fail();} catch (IllegalStateException e) {assertNotNull(e);}

        TableQuery q = table.where();
        try { q.remove();                           fail();} catch (IllegalStateException e) {assertNotNull(e);}
        try { q.remove(0,0);                        fail();} catch (IllegalStateException e) {assertNotNull(e);}

        TableView v = q.findAll();
        try { v.adjust(0, 0);                       fail();} catch (IllegalStateException e) {assertNotNull(e);}
        try { v.clear();                            fail();} catch (IllegalStateException e) {assertNotNull(e);}
        try { v.clearSubtable(0, 0);                fail();} catch (IllegalStateException e) {assertNotNull(e);}
        try { v.remove(0);                          fail();} catch (IllegalStateException e) {assertNotNull(e);}
        try { v.removeLast();                       fail();} catch (IllegalStateException e) {assertNotNull(e);}
        try { v.setBinaryByteArray(0, 0, null);     fail();} catch (IllegalStateException e) {assertNotNull(e);}
        try { v.setBoolean(0, 0, false);            fail();} catch (IllegalStateException e) {assertNotNull(e);}
        try { v.setDate(0, 0, new Date());          fail();} catch (IllegalStateException e) {assertNotNull(e);}
        try { v.setLong(0, 0, 0);                   fail();} catch (IllegalStateException e) {assertNotNull(e);}
        try { v.setString(0,0,"");                  fail();} catch (IllegalStateException e) {assertNotNull(e);}
        try { v.setMixed(0, 0, null);               fail();} catch (IllegalStateException e) {assertNotNull(e);}

        t.endRead();
    }

