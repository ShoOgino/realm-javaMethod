    // similar UC as #testFindAllAsyncWithNotification using 'findAllSorted'
    public void testFindAllSortedAsyncRetry() throws Throwable {
        final CountDownLatch signalCallbackFinished = new CountDownLatch(1);
        final Throwable[] threadAssertionError = new Throwable[1];
        final ExecutorService executorService = Executors.newSingleThreadExecutor();
        executorService.submit(new Runnable() {
            @Override
            public void run() {
                Looper.prepare();
                try {
                    final AtomicInteger numberOfIntercept = new AtomicInteger(1);
                    final Realm realm = openRealmInstance("testFindAllSortedAsyncRetry");
                    final Handler handler = new HandlerProxy(realm.handler) {
                        @Override
                        public boolean onInterceptMessage(int what) {
                            switch (what) {
                                case Realm.REALM_COMPLETED_ASYNC_QUERY: {
                                    if (numberOfIntercept.getAndDecrement() > 0) {
                                        // We advance the Realm so we can simulate a retry
                                        // This is intercepted on the worker thread, we need to use
                                        // the Realm on the original thread
                                        postAtFront(new Runnable() {
                                            @Override
                                            public void run() {
                                                realm.beginTransaction();
                                                realm.clear(AllTypes.class);
                                                realm.commitTransaction();
                                            }
                                        });
                                    }
                                    break;
                                }
                            }
                            return false;
                        }
                    };
                    realm.setHandler(handler);
                    Realm.asyncQueryExecutor.pause();

                    populateTestRealm(realm, 10);
                    final RealmResults<AllTypes> realmResults = realm.where(AllTypes.class)
                            .between("columnLong", 4, 8)
                            .findAllSortedAsync("columnString", RealmResults.SORT_ORDER_ASCENDING);

                    assertFalse(realmResults.isLoaded());
                    assertEquals(0, realmResults.size());

                    Realm.asyncQueryExecutor.resume();

                    final AtomicInteger numberOfInvocation = new AtomicInteger(0);
                    realmResults.addChangeListener(new RealmChangeListener() {
                        @Override
                        public void onChange() {
                            try {
                                assertEquals(1, numberOfInvocation.incrementAndGet());
                                assertTrue(realmResults.isLoaded());
                                assertEquals(0, realmResults.size());
                            } catch (AssertionFailedError e) {
                                threadAssertionError[0] = e;
                            } finally {
                                signalCallbackFinished.countDown();
                            }
                        }
                    });

                    Looper.loop();

                } catch (Exception e) {
                    e.printStackTrace();
                    threadAssertionError[0] = e;

                } finally {
                    if (signalCallbackFinished.getCount() > 0) {
                        signalCallbackFinished.countDown();
                    }
                }
            }
        });

        // wait until the callback of our async query proceed
        signalCallbackFinished.await(7, TimeUnit.SECONDS);

        if (null != threadAssertionError[0]) {
            // throw any assertion errors happened in the background thread
            throw threadAssertionError[0];
        }
        executorService.shutdownNow();
    }

