    @SuppressWarnings("cast")
    public static some.test.AllTypes createOrUpdateUsingJsonObject(Realm realm, JSONObject json, boolean update)
            throws JSONException {
        final List<String> excludeFields = new ArrayList<String>(18);
        some.test.AllTypes obj = null;
        if (update) {
            Table table = realm.getTable(some.test.AllTypes.class);
            AllTypesColumnInfo columnInfo = (AllTypesColumnInfo) realm.getSchema().getColumnInfo(some.test.AllTypes.class);
            long pkColumnKey = columnInfo.columnStringColKey;
            long objKey = Table.NO_MATCH;
            if (json.isNull("columnString")) {
                objKey = table.findFirstNull(pkColumnKey);
            } else {
                objKey = table.findFirstString(pkColumnKey, json.getString("columnString"));
            }
            if (objKey != Table.NO_MATCH) {
                final BaseRealm.RealmObjectContext objectContext = BaseRealm.objectContext.get();
                try {
                    objectContext.set(realm, table.getUncheckedRow(objKey), realm.getSchema().getColumnInfo(some.test.AllTypes.class), false, Collections.<String> emptyList());
                    obj = new io.realm.some_test_AllTypesRealmProxy();
                } finally {
                    objectContext.clear();
                }
            }
        }
        if (obj == null) {
            if (json.has("columnObject")) {
                excludeFields.add("columnObject");
            }
            if (json.has("columnObjectWithoutPk")) {
                excludeFields.add("columnObjectWithoutPk");
            }
            if (json.has("columnRealmList")) {
                excludeFields.add("columnRealmList");
            }
            if (json.has("columnRealmListNoPk")) {
                excludeFields.add("columnRealmListNoPk");
            }
            if (json.has("columnRealmFinalList")) {
                excludeFields.add("columnRealmFinalList");
            }
            if (json.has("columnRealmFinalListNoPk")) {
                excludeFields.add("columnRealmFinalListNoPk");
            }
            if (json.has("columnStringList")) {
                excludeFields.add("columnStringList");
            }
            if (json.has("columnBinaryList")) {
                excludeFields.add("columnBinaryList");
            }
            if (json.has("columnBooleanList")) {
                excludeFields.add("columnBooleanList");
            }
            if (json.has("columnLongList")) {
                excludeFields.add("columnLongList");
            }
            if (json.has("columnIntegerList")) {
                excludeFields.add("columnIntegerList");
            }
            if (json.has("columnShortList")) {
                excludeFields.add("columnShortList");
            }
            if (json.has("columnByteList")) {
                excludeFields.add("columnByteList");
            }
            if (json.has("columnDoubleList")) {
                excludeFields.add("columnDoubleList");
            }
            if (json.has("columnFloatList")) {
                excludeFields.add("columnFloatList");
            }
            if (json.has("columnDateList")) {
                excludeFields.add("columnDateList");
            }
            if (json.has("columnDecimal128List")) {
                excludeFields.add("columnDecimal128List");
            }
            if (json.has("columnObjectIdList")) {
                excludeFields.add("columnObjectIdList");
            }
            if (json.has("columnString")) {
                if (json.isNull("columnString")) {
                    obj = (io.realm.some_test_AllTypesRealmProxy) realm.createObjectInternal(some.test.AllTypes.class, null, true, excludeFields);
                } else {
                    obj = (io.realm.some_test_AllTypesRealmProxy) realm.createObjectInternal(some.test.AllTypes.class, json.getString("columnString"), true, excludeFields);
                }
            } else {
                throw new IllegalArgumentException("JSON object doesn't have the primary key field 'columnString'.");
            }
        }
        final some_test_AllTypesRealmProxyInterface objProxy = (some_test_AllTypesRealmProxyInterface) obj;
        if (json.has("columnLong")) {
            if (json.isNull("columnLong")) {
                throw new IllegalArgumentException("Trying to set non-nullable field 'columnLong' to null.");
            } else {
                objProxy.realmSet$columnLong((long) json.getLong("columnLong"));
            }
        }
        if (json.has("columnFloat")) {
            if (json.isNull("columnFloat")) {
                throw new IllegalArgumentException("Trying to set non-nullable field 'columnFloat' to null.");
            } else {
                objProxy.realmSet$columnFloat((float) json.getDouble("columnFloat"));
            }
        }
        if (json.has("columnDouble")) {
            if (json.isNull("columnDouble")) {
                throw new IllegalArgumentException("Trying to set non-nullable field 'columnDouble' to null.");
            } else {
                objProxy.realmSet$columnDouble((double) json.getDouble("columnDouble"));
            }
        }
        if (json.has("columnBoolean")) {
            if (json.isNull("columnBoolean")) {
                throw new IllegalArgumentException("Trying to set non-nullable field 'columnBoolean' to null.");
            } else {
                objProxy.realmSet$columnBoolean((boolean) json.getBoolean("columnBoolean"));
            }
        }
        if (json.has("columnDecimal128")) {
            if (json.isNull("columnDecimal128")) {
                objProxy.realmSet$columnDecimal128(null);
            } else {
                Object decimal = json.get("columnDecimal128");
                if (decimal instanceof org.bson.types.Decimal128) {
                    objProxy.realmSet$columnDecimal128((org.bson.types.Decimal128) decimal);
                } else if (decimal instanceof String) {
                    objProxy.realmSet$columnDecimal128(org.bson.types.Decimal128.parse((String)decimal));
                } else if (decimal instanceof Integer) {
                    objProxy.realmSet$columnDecimal128(new org.bson.types.Decimal128((Integer)(decimal)));
                } else if (decimal instanceof Long) {
                    objProxy.realmSet$columnDecimal128(new org.bson.types.Decimal128((Long)(decimal)));
                } else if (decimal instanceof Double) {
                    objProxy.realmSet$columnDecimal128(new org.bson.types.Decimal128(new java.math.BigDecimal((Double)(decimal))));
                } else {
                    throw new UnsupportedOperationException(decimal.getClass() + " is not supported as a Decimal128 value");
                }
            }
        }
        if (json.has("columnObjectId")) {
            if (json.isNull("columnObjectId")) {
                objProxy.realmSet$columnObjectId(null);
            } else {
                Object id = json.get("columnObjectId");
                if (id instanceof org.bson.types.ObjectId) {
                    objProxy.realmSet$columnObjectId((org.bson.types.ObjectId) id);
                } else {
                    objProxy.realmSet$columnObjectId(new org.bson.types.ObjectId((String)id));
                }
            }
        }
        if (json.has("columnDate")) {
            if (json.isNull("columnDate")) {
                objProxy.realmSet$columnDate(null);
            } else {
                Object timestamp = json.get("columnDate");
                if (timestamp instanceof String) {
                    objProxy.realmSet$columnDate(JsonUtils.stringToDate((String) timestamp));
                } else {
                    objProxy.realmSet$columnDate(new Date(json.getLong("columnDate")));
                }
            }
        }
        if (json.has("columnBinary")) {
            if (json.isNull("columnBinary")) {
                objProxy.realmSet$columnBinary(null);
            } else {
                objProxy.realmSet$columnBinary(JsonUtils.stringToBytes(json.getString("columnBinary")));
            }
        }
        if (json.has("columnMutableRealmInteger")) {
            objProxy.realmGet$columnMutableRealmInteger().set((json.isNull("columnMutableRealmInteger")) ? null : json.getLong("columnMutableRealmInteger"));
        }
        if (json.has("columnObject")) {
            if (json.isNull("columnObject")) {
                objProxy.realmSet$columnObject(null);
            } else {
                some.test.AllTypes columnObjectObj = some_test_AllTypesRealmProxy.createOrUpdateUsingJsonObject(realm, json.getJSONObject("columnObject"), update);
                objProxy.realmSet$columnObject(columnObjectObj);
            }
        }
        if (json.has("columnObjectWithoutPk")) {
            if (json.isNull("columnObjectWithoutPk")) {
                objProxy.realmSet$columnObjectWithoutPk(null);
            } else {
                some.test.Simple columnObjectWithoutPkObj = some_test_SimpleRealmProxy.createOrUpdateUsingJsonObject(realm, json.getJSONObject("columnObjectWithoutPk"), update);
                objProxy.realmSet$columnObjectWithoutPk(columnObjectWithoutPkObj);
            }
        }
        if (json.has("columnRealmList")) {
            if (json.isNull("columnRealmList")) {
                objProxy.realmSet$columnRealmList(null);
            } else {
                objProxy.realmGet$columnRealmList().clear();
                JSONArray array = json.getJSONArray("columnRealmList");
                for (int i = 0; i < array.length(); i++) {
                    some.test.AllTypes item = some_test_AllTypesRealmProxy.createOrUpdateUsingJsonObject(realm, array.getJSONObject(i), update);
                    objProxy.realmGet$columnRealmList().add(item);
                }
            }
        }
        if (json.has("columnRealmListNoPk")) {
            if (json.isNull("columnRealmListNoPk")) {
                objProxy.realmSet$columnRealmListNoPk(null);
            } else {
                objProxy.realmGet$columnRealmListNoPk().clear();
                JSONArray array = json.getJSONArray("columnRealmListNoPk");
                for (int i = 0; i < array.length(); i++) {
                    some.test.Simple item = some_test_SimpleRealmProxy.createOrUpdateUsingJsonObject(realm, array.getJSONObject(i), update);
                    objProxy.realmGet$columnRealmListNoPk().add(item);
                }
            }
        }
        if (json.has("columnRealmFinalList")) {
            if (json.isNull("columnRealmFinalList")) {
                objProxy.realmSet$columnRealmFinalList(null);
            } else {
                objProxy.realmGet$columnRealmFinalList().clear();
                JSONArray array = json.getJSONArray("columnRealmFinalList");
                for (int i = 0; i < array.length(); i++) {
                    some.test.AllTypes item = some_test_AllTypesRealmProxy.createOrUpdateUsingJsonObject(realm, array.getJSONObject(i), update);
                    objProxy.realmGet$columnRealmFinalList().add(item);
                }
            }
        }
        if (json.has("columnRealmFinalListNoPk")) {
            if (json.isNull("columnRealmFinalListNoPk")) {
                objProxy.realmSet$columnRealmFinalListNoPk(null);
            } else {
                objProxy.realmGet$columnRealmFinalListNoPk().clear();
                JSONArray array = json.getJSONArray("columnRealmFinalListNoPk");
                for (int i = 0; i < array.length(); i++) {
                    some.test.Simple item = some_test_SimpleRealmProxy.createOrUpdateUsingJsonObject(realm, array.getJSONObject(i), update);
                    objProxy.realmGet$columnRealmFinalListNoPk().add(item);
                }
            }
        }
        ProxyUtils.setRealmListWithJsonObject(objProxy.realmGet$columnStringList(), json, "columnStringList");
        ProxyUtils.setRealmListWithJsonObject(objProxy.realmGet$columnBinaryList(), json, "columnBinaryList");
        ProxyUtils.setRealmListWithJsonObject(objProxy.realmGet$columnBooleanList(), json, "columnBooleanList");
        ProxyUtils.setRealmListWithJsonObject(objProxy.realmGet$columnLongList(), json, "columnLongList");
        ProxyUtils.setRealmListWithJsonObject(objProxy.realmGet$columnIntegerList(), json, "columnIntegerList");
        ProxyUtils.setRealmListWithJsonObject(objProxy.realmGet$columnShortList(), json, "columnShortList");
        ProxyUtils.setRealmListWithJsonObject(objProxy.realmGet$columnByteList(), json, "columnByteList");
        ProxyUtils.setRealmListWithJsonObject(objProxy.realmGet$columnDoubleList(), json, "columnDoubleList");
        ProxyUtils.setRealmListWithJsonObject(objProxy.realmGet$columnFloatList(), json, "columnFloatList");
        ProxyUtils.setRealmListWithJsonObject(objProxy.realmGet$columnDateList(), json, "columnDateList");
        ProxyUtils.setRealmListWithJsonObject(objProxy.realmGet$columnDecimal128List(), json, "columnDecimal128List");
        ProxyUtils.setRealmListWithJsonObject(objProxy.realmGet$columnObjectIdList(), json, "columnObjectIdList");
        return obj;
    }

