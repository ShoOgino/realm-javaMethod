    public static NullTypesColumnInfo validateTable(SharedRealm sharedRealm, boolean allowExtraColumns) {
        if (!sharedRealm.hasTable("class_NullTypes")) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "The 'NullTypes' class is missing from the schema for this Realm.");
        }
        Table table = sharedRealm.getTable("class_NullTypes");
        final long columnCount = table.getColumnCount();
        if (columnCount != 21) {
            if (columnCount < 21) {
                throw new RealmMigrationNeededException(sharedRealm.getPath(), "Field count is less than expected - expected 21 but was " + columnCount);
            }
            if (allowExtraColumns) {
                RealmLog.debug("Field count is more than expected - expected 21 but was %1$d", columnCount);
            } else {
                throw new RealmMigrationNeededException(sharedRealm.getPath(), "Field count is more than expected - expected 21 but was " + columnCount);
            }
        }
        Map<String, RealmFieldType> columnTypes = new HashMap<String, RealmFieldType>();
        for (long i = 0; i < columnCount; i++) {
            columnTypes.put(table.getColumnName(i), table.getColumnType(i));
        }

        final NullTypesColumnInfo columnInfo = new NullTypesColumnInfo(sharedRealm, table);

        if (table.hasPrimaryKey()) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Primary Key defined for field " + table.getColumnName(table.getPrimaryKey()) + " was removed.");
        }

        ProxyUtils.verifyField(sharedRealm, columnTypes, "fieldStringNotNull", RealmFieldType.STRING, "String");
        if (table.isColumnNullable(columnInfo.fieldStringNotNullIndex)) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Field 'fieldStringNotNull' does support null values in the existing Realm file. Remove @Required or @PrimaryKey from field 'fieldStringNotNull' or migrate using RealmObjectSchema.setNullable().");
        }
        ProxyUtils.verifyField(sharedRealm, columnTypes, "fieldStringNull", RealmFieldType.STRING, "String");
        if (!table.isColumnNullable(columnInfo.fieldStringNullIndex)) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Field 'fieldStringNull' is required. Either set @Required to field 'fieldStringNull' or migrate using RealmObjectSchema.setNullable().");
        }
        ProxyUtils.verifyField(sharedRealm, columnTypes, "fieldBooleanNotNull", RealmFieldType.BOOLEAN, "Boolean");
        if (table.isColumnNullable(columnInfo.fieldBooleanNotNullIndex)) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Field 'fieldBooleanNotNull' does support null values in the existing Realm file. Remove @Required or @PrimaryKey from field 'fieldBooleanNotNull' or migrate using RealmObjectSchema.setNullable().");
        }
        ProxyUtils.verifyField(sharedRealm, columnTypes, "fieldBooleanNull", RealmFieldType.BOOLEAN, "Boolean");
        if (!table.isColumnNullable(columnInfo.fieldBooleanNullIndex)) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(),"Field 'fieldBooleanNull' does not support null values in the existing Realm file. Either set @Required, use the primitive type for field 'fieldBooleanNull' or migrate using RealmObjectSchema.setNullable().");
        }
        ProxyUtils.verifyField(sharedRealm, columnTypes, "fieldBytesNotNull", RealmFieldType.BINARY, "byte[]");
        if (table.isColumnNullable(columnInfo.fieldBytesNotNullIndex)) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Field 'fieldBytesNotNull' does support null values in the existing Realm file. Remove @Required or @PrimaryKey from field 'fieldBytesNotNull' or migrate using RealmObjectSchema.setNullable().");
        }
        ProxyUtils.verifyField(sharedRealm, columnTypes, "fieldBytesNull", RealmFieldType.BINARY, "byte[]");
        if (!table.isColumnNullable(columnInfo.fieldBytesNullIndex)) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Field 'fieldBytesNull' is required. Either set @Required to field 'fieldBytesNull' or migrate using RealmObjectSchema.setNullable().");
        }
        ProxyUtils.verifyField(sharedRealm, columnTypes, "fieldByteNotNull", RealmFieldType.INTEGER, "Byte");
        if (table.isColumnNullable(columnInfo.fieldByteNotNullIndex)) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Field 'fieldByteNotNull' does support null values in the existing Realm file. Remove @Required or @PrimaryKey from field 'fieldByteNotNull' or migrate using RealmObjectSchema.setNullable().");
        }
        ProxyUtils.verifyField(sharedRealm, columnTypes, "fieldByteNull", RealmFieldType.INTEGER, "Byte");
        if (!table.isColumnNullable(columnInfo.fieldByteNullIndex)) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(),"Field 'fieldByteNull' does not support null values in the existing Realm file. Either set @Required, use the primitive type for field 'fieldByteNull' or migrate using RealmObjectSchema.setNullable().");
        }
        ProxyUtils.verifyField(sharedRealm, columnTypes, "fieldShortNotNull", RealmFieldType.INTEGER, "Short");
        if (table.isColumnNullable(columnInfo.fieldShortNotNullIndex)) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Field 'fieldShortNotNull' does support null values in the existing Realm file. Remove @Required or @PrimaryKey from field 'fieldShortNotNull' or migrate using RealmObjectSchema.setNullable().");
        }
        ProxyUtils.verifyField(sharedRealm, columnTypes, "fieldShortNull", RealmFieldType.INTEGER, "Short");
        if (!table.isColumnNullable(columnInfo.fieldShortNullIndex)) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(),"Field 'fieldShortNull' does not support null values in the existing Realm file. Either set @Required, use the primitive type for field 'fieldShortNull' or migrate using RealmObjectSchema.setNullable().");
        }
        ProxyUtils.verifyField(sharedRealm, columnTypes, "fieldIntegerNotNull", RealmFieldType.INTEGER, "Integer");
        if (table.isColumnNullable(columnInfo.fieldIntegerNotNullIndex)) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Field 'fieldIntegerNotNull' does support null values in the existing Realm file. Remove @Required or @PrimaryKey from field 'fieldIntegerNotNull' or migrate using RealmObjectSchema.setNullable().");
        }
        ProxyUtils.verifyField(sharedRealm, columnTypes, "fieldIntegerNull", RealmFieldType.INTEGER, "Integer");
        if (!table.isColumnNullable(columnInfo.fieldIntegerNullIndex)) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(),"Field 'fieldIntegerNull' does not support null values in the existing Realm file. Either set @Required, use the primitive type for field 'fieldIntegerNull' or migrate using RealmObjectSchema.setNullable().");
        }
        ProxyUtils.verifyField(sharedRealm, columnTypes, "fieldLongNotNull", RealmFieldType.INTEGER, "Long");
        if (table.isColumnNullable(columnInfo.fieldLongNotNullIndex)) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Field 'fieldLongNotNull' does support null values in the existing Realm file. Remove @Required or @PrimaryKey from field 'fieldLongNotNull' or migrate using RealmObjectSchema.setNullable().");
        }
        ProxyUtils.verifyField(sharedRealm, columnTypes, "fieldLongNull", RealmFieldType.INTEGER, "Long");
        if (!table.isColumnNullable(columnInfo.fieldLongNullIndex)) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(),"Field 'fieldLongNull' does not support null values in the existing Realm file. Either set @Required, use the primitive type for field 'fieldLongNull' or migrate using RealmObjectSchema.setNullable().");
        }
        ProxyUtils.verifyField(sharedRealm, columnTypes, "fieldFloatNotNull", RealmFieldType.FLOAT, "Float");
        if (table.isColumnNullable(columnInfo.fieldFloatNotNullIndex)) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Field 'fieldFloatNotNull' does support null values in the existing Realm file. Remove @Required or @PrimaryKey from field 'fieldFloatNotNull' or migrate using RealmObjectSchema.setNullable().");
        }
        ProxyUtils.verifyField(sharedRealm, columnTypes, "fieldFloatNull", RealmFieldType.FLOAT, "Float");
        if (!table.isColumnNullable(columnInfo.fieldFloatNullIndex)) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(),"Field 'fieldFloatNull' does not support null values in the existing Realm file. Either set @Required, use the primitive type for field 'fieldFloatNull' or migrate using RealmObjectSchema.setNullable().");
        }
        ProxyUtils.verifyField(sharedRealm, columnTypes, "fieldDoubleNotNull", RealmFieldType.DOUBLE, "Double");
        if (table.isColumnNullable(columnInfo.fieldDoubleNotNullIndex)) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Field 'fieldDoubleNotNull' does support null values in the existing Realm file. Remove @Required or @PrimaryKey from field 'fieldDoubleNotNull' or migrate using RealmObjectSchema.setNullable().");
        }
        ProxyUtils.verifyField(sharedRealm, columnTypes, "fieldDoubleNull", RealmFieldType.DOUBLE, "Double");
        if (!table.isColumnNullable(columnInfo.fieldDoubleNullIndex)) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(),"Field 'fieldDoubleNull' does not support null values in the existing Realm file. Either set @Required, use the primitive type for field 'fieldDoubleNull' or migrate using RealmObjectSchema.setNullable().");
        }
        ProxyUtils.verifyField(sharedRealm, columnTypes, "fieldDateNotNull", RealmFieldType.DATE, "Date");
        if (table.isColumnNullable(columnInfo.fieldDateNotNullIndex)) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Field 'fieldDateNotNull' does support null values in the existing Realm file. Remove @Required or @PrimaryKey from field 'fieldDateNotNull' or migrate using RealmObjectSchema.setNullable().");
        }
        ProxyUtils.verifyField(sharedRealm, columnTypes, "fieldDateNull", RealmFieldType.DATE, "Date");
        if (!table.isColumnNullable(columnInfo.fieldDateNullIndex)) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Field 'fieldDateNull' is required. Either set @Required to field 'fieldDateNull' or migrate using RealmObjectSchema.setNullable().");
        }
        ProxyUtils.verifyField(sharedRealm, columnTypes, "fieldObjectNull", RealmFieldType.OBJECT, "NullTypes");
        if (!sharedRealm.hasTable("class_NullTypes")) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Missing class 'class_NullTypes' for field 'fieldObjectNull'");
        }
        Table table_20 = sharedRealm.getTable("class_NullTypes");
        if (!table.getLinkTarget(columnInfo.fieldObjectNullIndex).hasSameSchema(table_20)) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Invalid RealmObject for field 'fieldObjectNull': '" + table.getLinkTarget(columnInfo.fieldObjectNullIndex).getName() + "' expected - was '" + table_20.getName() + "'");
        }

        return columnInfo;
    }

