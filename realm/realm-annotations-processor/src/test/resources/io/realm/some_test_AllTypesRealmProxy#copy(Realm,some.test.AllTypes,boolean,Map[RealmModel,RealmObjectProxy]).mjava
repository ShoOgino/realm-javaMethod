    public static some.test.AllTypes copy(Realm realm, some.test.AllTypes newObject, boolean update, Map<RealmModel,RealmObjectProxy> cache) {
        RealmObjectProxy cachedRealmObject = cache.get(newObject);
        if (cachedRealmObject != null) {
            return (some.test.AllTypes) cachedRealmObject;
        }

        // rejecting default values to avoid creating unexpected objects from RealmModel/RealmList fields.
        some.test.AllTypes realmObject = realm.createObjectInternal(some.test.AllTypes.class, ((some_test_AllTypesRealmProxyInterface) newObject).realmGet$columnString(), false, Collections.<String>emptyList());
        cache.put(newObject, (RealmObjectProxy) realmObject);

        some_test_AllTypesRealmProxyInterface realmObjectSource = (some_test_AllTypesRealmProxyInterface) newObject;
        some_test_AllTypesRealmProxyInterface realmObjectCopy = (some_test_AllTypesRealmProxyInterface) realmObject;

        realmObjectCopy.realmSet$columnLong(realmObjectSource.realmGet$columnLong());
        realmObjectCopy.realmSet$columnFloat(realmObjectSource.realmGet$columnFloat());
        realmObjectCopy.realmSet$columnDouble(realmObjectSource.realmGet$columnDouble());
        realmObjectCopy.realmSet$columnBoolean(realmObjectSource.realmGet$columnBoolean());
        realmObjectCopy.realmSet$columnDate(realmObjectSource.realmGet$columnDate());
        realmObjectCopy.realmSet$columnBinary(realmObjectSource.realmGet$columnBinary());

        realmObjectCopy.realmGet$columnMutableRealmInteger().set(realmObjectSource.realmGet$columnMutableRealmInteger().get());

        some.test.AllTypes columnObjectObj = realmObjectSource.realmGet$columnObject();
        if (columnObjectObj == null) {
            realmObjectCopy.realmSet$columnObject(null);
        } else {
            some.test.AllTypes cachecolumnObject = (some.test.AllTypes) cache.get(columnObjectObj);
            if (cachecolumnObject != null) {
                realmObjectCopy.realmSet$columnObject(cachecolumnObject);
            } else {
                realmObjectCopy.realmSet$columnObject(some_test_AllTypesRealmProxy.copyOrUpdate(realm, columnObjectObj, update, cache));
            }
        }

        RealmList<some.test.AllTypes> columnRealmListList = realmObjectSource.realmGet$columnRealmList();
        if (columnRealmListList != null) {
            RealmList<some.test.AllTypes> columnRealmListRealmList = realmObjectCopy.realmGet$columnRealmList();
            columnRealmListRealmList.clear();
            for (int i = 0; i < columnRealmListList.size(); i++) {
                some.test.AllTypes columnRealmListItem = columnRealmListList.get(i);
                some.test.AllTypes cachecolumnRealmList = (some.test.AllTypes) cache.get(columnRealmListItem);
                if (cachecolumnRealmList != null) {
                    columnRealmListRealmList.add(cachecolumnRealmList);
                } else {
                    columnRealmListRealmList.add(some_test_AllTypesRealmProxy.copyOrUpdate(realm, columnRealmListItem, update, cache));
                }
            }
        }

        realmObjectCopy.realmSet$columnStringList(realmObjectSource.realmGet$columnStringList());
        realmObjectCopy.realmSet$columnBinaryList(realmObjectSource.realmGet$columnBinaryList());
        realmObjectCopy.realmSet$columnBooleanList(realmObjectSource.realmGet$columnBooleanList());
        realmObjectCopy.realmSet$columnLongList(realmObjectSource.realmGet$columnLongList());
        realmObjectCopy.realmSet$columnIntegerList(realmObjectSource.realmGet$columnIntegerList());
        realmObjectCopy.realmSet$columnShortList(realmObjectSource.realmGet$columnShortList());
        realmObjectCopy.realmSet$columnByteList(realmObjectSource.realmGet$columnByteList());
        realmObjectCopy.realmSet$columnDoubleList(realmObjectSource.realmGet$columnDoubleList());
        realmObjectCopy.realmSet$columnFloatList(realmObjectSource.realmGet$columnFloatList());
        realmObjectCopy.realmSet$columnDateList(realmObjectSource.realmGet$columnDateList());
        return realmObject;
    }

