    public static AllTypes createDetachedCopy(AllTypes realmObject, int currentDepth, int maxDepth, Map<RealmObject, CacheData<RealmObject>> cache) {
        if (currentDepth > maxDepth || realmObject == null) {
            return null;
        }
        CacheData<AllTypes> cachedObject = (CacheData) cache.get(realmObject);
        AllTypes standaloneObject;
        if (cachedObject != null) {
            // Reuse cached object or recreate it because it was encountered at a lower depth.
            if (currentDepth >= cachedObject.minDepth) {
                return cachedObject.object;
            } else {
                standaloneObject = cachedObject.object;
                cachedObject.minDepth = currentDepth;
            }
        } else {
            standaloneObject = new AllTypes();
            cache.put(realmObject, new RealmObjectProxy.CacheData<RealmObject>(currentDepth, standaloneObject));
        }
        Class<?> clazz = standaloneObject.getClass();
        Field field = null;
        try {
            field = clazz.getDeclaredField("columnString");
        } catch (NoSuchFieldException e) {
            throw new RealmException(e.getMessage());
        }
        field.setAccessible(true);
        try {
            field.set(standaloneObject, ((AllTypesRealmProxy) realmObject).realmGetter$columnString());
        } catch (IllegalAccessException e) {
            throw new RealmException(e.getMessage());
        }
        try {
            field = clazz.getDeclaredField("columnLong");
        } catch (NoSuchFieldException e) {
            throw new RealmException(e.getMessage());
        }
        field.setAccessible(true);
        try {
            field.setLong(standaloneObject, ((AllTypesRealmProxy) realmObject).realmGetter$columnLong());
        } catch (IllegalAccessException e) {
            throw new RealmException(e.getMessage());
        }
        try {
            field = clazz.getDeclaredField("columnFloat");
        } catch (NoSuchFieldException e) {
            throw new RealmException(e.getMessage());
        }
        field.setAccessible(true);
        try {
            field.setFloat(standaloneObject, ((AllTypesRealmProxy) realmObject).realmGetter$columnFloat());
        } catch (IllegalAccessException e) {
            throw new RealmException(e.getMessage());
        }
        try {
            field = clazz.getDeclaredField("columnDouble");
        } catch (NoSuchFieldException e) {
            throw new RealmException(e.getMessage());
        }
        field.setAccessible(true);
        try {
            field.setDouble(standaloneObject, ((AllTypesRealmProxy) realmObject).realmGetter$columnDouble());
        } catch (IllegalAccessException e) {
            throw new RealmException(e.getMessage());
        }
        try {
            field = clazz.getDeclaredField("columnBoolean");
        } catch (NoSuchFieldException e) {
            throw new RealmException(e.getMessage());
        }
        field.setAccessible(true);
        try {
            field.setBoolean(standaloneObject, ((AllTypesRealmProxy) realmObject).realmGetter$columnBoolean());
        } catch (IllegalAccessException e) {
            throw new RealmException(e.getMessage());
        }
        try {
            field = clazz.getDeclaredField("columnDate");
        } catch (NoSuchFieldException e) {
            throw new RealmException(e.getMessage());
        }
        field.setAccessible(true);
        try {
            field.set(standaloneObject, ((AllTypesRealmProxy) realmObject).realmGetter$columnDate());
        } catch (IllegalAccessException e) {
            throw new RealmException(e.getMessage());
        }
        try {
            field = clazz.getDeclaredField("columnBinary");
        } catch (NoSuchFieldException e) {
            throw new RealmException(e.getMessage());
        }
        field.setAccessible(true);
        try {
            field.set(standaloneObject, ((AllTypesRealmProxy) realmObject).realmGetter$columnBinary());
        } catch (IllegalAccessException e) {
            throw new RealmException(e.getMessage());
        }
        try {
            field = clazz.getDeclaredField("columnObject");
        } catch (NoSuchFieldException e) {
            throw new RealmException(e.getMessage());
        }
        field.setAccessible(true);

        // Deep copy of columnObject
        try {
            field.set(standaloneObject, AllTypesRealmProxy.createDetachedCopy( ((AllTypesRealmProxy) realmObject).realmGetter$columnObject(), currentDepth + 1, maxDepth, cache));
        } catch (IllegalAccessException e) {
            throw new RealmException(e.getMessage());
        }
        try {
            field = clazz.getDeclaredField("columnRealmList");
        } catch (NoSuchFieldException e) {
            throw new RealmException(e.getMessage());
        }
        field.setAccessible(true);

        // Deep copy of columnRealmList
        if (currentDepth == maxDepth) {
            try {
                field.set(standaloneObject, null);
            } catch (IllegalAccessException e) {
                throw new RealmException(e.getMessage());
            }
        } else {
            RealmList<AllTypes> managedcolumnRealmListList = ((AllTypesRealmProxy) realmObject).realmGetter$columnRealmList();
            RealmList<AllTypes> standalonecolumnRealmListList = new RealmList<AllTypes>();
            try {
                field.set(standaloneObject, standalonecolumnRealmListList);
            } catch (IllegalAccessException e) {
                throw new RealmException(e.getMessage());
            }
            int nextDepth = currentDepth + 1;
            int size = managedcolumnRealmListList.size();
            for (int i = 0; i < size; i++) {
                AllTypes item = AllTypesRealmProxy.createDetachedCopy(managedcolumnRealmListList.get(i), nextDepth, maxDepth, cache);
                standalonecolumnRealmListList.add(item);
            }
        }
        return standaloneObject;
    }

