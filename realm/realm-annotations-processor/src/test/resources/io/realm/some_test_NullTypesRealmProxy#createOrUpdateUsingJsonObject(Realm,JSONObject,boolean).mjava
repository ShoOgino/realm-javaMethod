    @SuppressWarnings("cast")
    public static some.test.NullTypes createOrUpdateUsingJsonObject(Realm realm, JSONObject json, boolean update)
            throws JSONException {
        final List<String> excludeFields = new ArrayList<String>(25);
        if (json.has("fieldObjectNull")) {
            excludeFields.add("fieldObjectNull");
        }
        if (json.has("fieldStringListNotNull")) {
            excludeFields.add("fieldStringListNotNull");
        }
        if (json.has("fieldStringListNull")) {
            excludeFields.add("fieldStringListNull");
        }
        if (json.has("fieldBinaryListNotNull")) {
            excludeFields.add("fieldBinaryListNotNull");
        }
        if (json.has("fieldBinaryListNull")) {
            excludeFields.add("fieldBinaryListNull");
        }
        if (json.has("fieldBooleanListNotNull")) {
            excludeFields.add("fieldBooleanListNotNull");
        }
        if (json.has("fieldBooleanListNull")) {
            excludeFields.add("fieldBooleanListNull");
        }
        if (json.has("fieldLongListNotNull")) {
            excludeFields.add("fieldLongListNotNull");
        }
        if (json.has("fieldLongListNull")) {
            excludeFields.add("fieldLongListNull");
        }
        if (json.has("fieldIntegerListNotNull")) {
            excludeFields.add("fieldIntegerListNotNull");
        }
        if (json.has("fieldIntegerListNull")) {
            excludeFields.add("fieldIntegerListNull");
        }
        if (json.has("fieldShortListNotNull")) {
            excludeFields.add("fieldShortListNotNull");
        }
        if (json.has("fieldShortListNull")) {
            excludeFields.add("fieldShortListNull");
        }
        if (json.has("fieldByteListNotNull")) {
            excludeFields.add("fieldByteListNotNull");
        }
        if (json.has("fieldByteListNull")) {
            excludeFields.add("fieldByteListNull");
        }
        if (json.has("fieldDoubleListNotNull")) {
            excludeFields.add("fieldDoubleListNotNull");
        }
        if (json.has("fieldDoubleListNull")) {
            excludeFields.add("fieldDoubleListNull");
        }
        if (json.has("fieldFloatListNotNull")) {
            excludeFields.add("fieldFloatListNotNull");
        }
        if (json.has("fieldFloatListNull")) {
            excludeFields.add("fieldFloatListNull");
        }
        if (json.has("fieldDateListNotNull")) {
            excludeFields.add("fieldDateListNotNull");
        }
        if (json.has("fieldDateListNull")) {
            excludeFields.add("fieldDateListNull");
        }
        if (json.has("fieldDecimal128ListNotNull")) {
            excludeFields.add("fieldDecimal128ListNotNull");
        }
        if (json.has("fieldDecimal128ListNull")) {
            excludeFields.add("fieldDecimal128ListNull");
        }
        if (json.has("fieldObjectIdListNotNull")) {
            excludeFields.add("fieldObjectIdListNotNull");
        }
        if (json.has("fieldObjectIdListNull")) {
            excludeFields.add("fieldObjectIdListNull");
        }
        some.test.NullTypes obj = realm.createObjectInternal(some.test.NullTypes.class, true, excludeFields);

        final some_test_NullTypesRealmProxyInterface objProxy = (some_test_NullTypesRealmProxyInterface) obj;
        if (json.has("fieldStringNotNull")) {
            if (json.isNull("fieldStringNotNull")) {
                objProxy.realmSet$fieldStringNotNull(null);
            } else {
                objProxy.realmSet$fieldStringNotNull((String) json.getString("fieldStringNotNull"));
            }
        }
        if (json.has("fieldStringNull")) {
            if (json.isNull("fieldStringNull")) {
                objProxy.realmSet$fieldStringNull(null);
            } else {
                objProxy.realmSet$fieldStringNull((String) json.getString("fieldStringNull"));
            }
        }
        if (json.has("fieldBooleanNotNull")) {
            if (json.isNull("fieldBooleanNotNull")) {
                objProxy.realmSet$fieldBooleanNotNull(null);
            } else {
                objProxy.realmSet$fieldBooleanNotNull((boolean) json.getBoolean("fieldBooleanNotNull"));
            }
        }
        if (json.has("fieldBooleanNull")) {
            if (json.isNull("fieldBooleanNull")) {
                objProxy.realmSet$fieldBooleanNull(null);
            } else {
                objProxy.realmSet$fieldBooleanNull((boolean) json.getBoolean("fieldBooleanNull"));
            }
        }
        if (json.has("fieldBytesNotNull")) {
            if (json.isNull("fieldBytesNotNull")) {
                objProxy.realmSet$fieldBytesNotNull(null);
            } else {
                objProxy.realmSet$fieldBytesNotNull(JsonUtils.stringToBytes(json.getString("fieldBytesNotNull")));
            }
        }
        if (json.has("fieldBytesNull")) {
            if (json.isNull("fieldBytesNull")) {
                objProxy.realmSet$fieldBytesNull(null);
            } else {
                objProxy.realmSet$fieldBytesNull(JsonUtils.stringToBytes(json.getString("fieldBytesNull")));
            }
        }
        if (json.has("fieldByteNotNull")) {
            if (json.isNull("fieldByteNotNull")) {
                objProxy.realmSet$fieldByteNotNull(null);
            } else {
                objProxy.realmSet$fieldByteNotNull((byte) json.getInt("fieldByteNotNull"));
            }
        }
        if (json.has("fieldByteNull")) {
            if (json.isNull("fieldByteNull")) {
                objProxy.realmSet$fieldByteNull(null);
            } else {
                objProxy.realmSet$fieldByteNull((byte) json.getInt("fieldByteNull"));
            }
        }
        if (json.has("fieldShortNotNull")) {
            if (json.isNull("fieldShortNotNull")) {
                objProxy.realmSet$fieldShortNotNull(null);
            } else {
                objProxy.realmSet$fieldShortNotNull((short) json.getInt("fieldShortNotNull"));
            }
        }
        if (json.has("fieldShortNull")) {
            if (json.isNull("fieldShortNull")) {
                objProxy.realmSet$fieldShortNull(null);
            } else {
                objProxy.realmSet$fieldShortNull((short) json.getInt("fieldShortNull"));
            }
        }
        if (json.has("fieldIntegerNotNull")) {
            if (json.isNull("fieldIntegerNotNull")) {
                objProxy.realmSet$fieldIntegerNotNull(null);
            } else {
                objProxy.realmSet$fieldIntegerNotNull((int) json.getInt("fieldIntegerNotNull"));
            }
        }
        if (json.has("fieldIntegerNull")) {
            if (json.isNull("fieldIntegerNull")) {
                objProxy.realmSet$fieldIntegerNull(null);
            } else {
                objProxy.realmSet$fieldIntegerNull((int) json.getInt("fieldIntegerNull"));
            }
        }
        if (json.has("fieldLongNotNull")) {
            if (json.isNull("fieldLongNotNull")) {
                objProxy.realmSet$fieldLongNotNull(null);
            } else {
                objProxy.realmSet$fieldLongNotNull((long) json.getLong("fieldLongNotNull"));
            }
        }
        if (json.has("fieldLongNull")) {
            if (json.isNull("fieldLongNull")) {
                objProxy.realmSet$fieldLongNull(null);
            } else {
                objProxy.realmSet$fieldLongNull((long) json.getLong("fieldLongNull"));
            }
        }
        if (json.has("fieldFloatNotNull")) {
            if (json.isNull("fieldFloatNotNull")) {
                objProxy.realmSet$fieldFloatNotNull(null);
            } else {
                objProxy.realmSet$fieldFloatNotNull((float) json.getDouble("fieldFloatNotNull"));
            }
        }
        if (json.has("fieldFloatNull")) {
            if (json.isNull("fieldFloatNull")) {
                objProxy.realmSet$fieldFloatNull(null);
            } else {
                objProxy.realmSet$fieldFloatNull((float) json.getDouble("fieldFloatNull"));
            }
        }
        if (json.has("fieldDoubleNotNull")) {
            if (json.isNull("fieldDoubleNotNull")) {
                objProxy.realmSet$fieldDoubleNotNull(null);
            } else {
                objProxy.realmSet$fieldDoubleNotNull((double) json.getDouble("fieldDoubleNotNull"));
            }
        }
        if (json.has("fieldDoubleNull")) {
            if (json.isNull("fieldDoubleNull")) {
                objProxy.realmSet$fieldDoubleNull(null);
            } else {
                objProxy.realmSet$fieldDoubleNull((double) json.getDouble("fieldDoubleNull"));
            }
        }
        if (json.has("fieldDateNotNull")) {
            if (json.isNull("fieldDateNotNull")) {
                objProxy.realmSet$fieldDateNotNull(null);
            } else {
                Object timestamp = json.get("fieldDateNotNull");
                if (timestamp instanceof String) {
                    objProxy.realmSet$fieldDateNotNull(JsonUtils.stringToDate((String) timestamp));
                } else {
                    objProxy.realmSet$fieldDateNotNull(new Date(json.getLong("fieldDateNotNull")));
                }
            }
        }
        if (json.has("fieldDateNull")) {
            if (json.isNull("fieldDateNull")) {
                objProxy.realmSet$fieldDateNull(null);
            } else {
                Object timestamp = json.get("fieldDateNull");
                if (timestamp instanceof String) {
                    objProxy.realmSet$fieldDateNull(JsonUtils.stringToDate((String) timestamp));
                } else {
                    objProxy.realmSet$fieldDateNull(new Date(json.getLong("fieldDateNull")));
                }
            }
        }
        if (json.has("fieldDecimal128NotNull")) {
            if (json.isNull("fieldDecimal128NotNull")) {
                objProxy.realmSet$fieldDecimal128NotNull(null);
            } else {
                Object decimal = json.get("fieldDecimal128NotNull");
                if (decimal instanceof org.bson.types.Decimal128) {
                    objProxy.realmSet$fieldDecimal128NotNull((org.bson.types.Decimal128) decimal);
                } else if (decimal instanceof String) {
                    objProxy.realmSet$fieldDecimal128NotNull(org.bson.types.Decimal128.parse((String)decimal));
                } else if (decimal instanceof Integer) {
                    objProxy.realmSet$fieldDecimal128NotNull(new org.bson.types.Decimal128((Integer)(decimal)));
                } else if (decimal instanceof Long) {
                    objProxy.realmSet$fieldDecimal128NotNull(new org.bson.types.Decimal128((Long)(decimal)));
                } else if (decimal instanceof Double) {
                    objProxy.realmSet$fieldDecimal128NotNull(new org.bson.types.Decimal128(new java.math.BigDecimal((Double)(decimal))));
                } else {
                    throw new UnsupportedOperationException(decimal.getClass() + " is not supported as a Decimal128 value");
                }
            }
        }
        if (json.has("fieldDecimal128Null")) {
            if (json.isNull("fieldDecimal128Null")) {
                objProxy.realmSet$fieldDecimal128Null(null);
            } else {
                Object decimal = json.get("fieldDecimal128Null");
                if (decimal instanceof org.bson.types.Decimal128) {
                    objProxy.realmSet$fieldDecimal128Null((org.bson.types.Decimal128) decimal);
                } else if (decimal instanceof String) {
                    objProxy.realmSet$fieldDecimal128Null(org.bson.types.Decimal128.parse((String)decimal));
                } else if (decimal instanceof Integer) {
                    objProxy.realmSet$fieldDecimal128Null(new org.bson.types.Decimal128((Integer)(decimal)));
                } else if (decimal instanceof Long) {
                    objProxy.realmSet$fieldDecimal128Null(new org.bson.types.Decimal128((Long)(decimal)));
                } else if (decimal instanceof Double) {
                    objProxy.realmSet$fieldDecimal128Null(new org.bson.types.Decimal128(new java.math.BigDecimal((Double)(decimal))));
                } else {
                    throw new UnsupportedOperationException(decimal.getClass() + " is not supported as a Decimal128 value");
                }
            }
        }
        if (json.has("fieldObjectIdNotNull")) {
            if (json.isNull("fieldObjectIdNotNull")) {
                objProxy.realmSet$fieldObjectIdNotNull(null);
            } else {
                Object id = json.get("fieldObjectIdNotNull");
                if (id instanceof org.bson.types.ObjectId) {
                    objProxy.realmSet$fieldObjectIdNotNull((org.bson.types.ObjectId) id);
                } else {
                    objProxy.realmSet$fieldObjectIdNotNull(new org.bson.types.ObjectId((String)id));
                }
            }
        }
        if (json.has("fieldObjectIdNull")) {
            if (json.isNull("fieldObjectIdNull")) {
                objProxy.realmSet$fieldObjectIdNull(null);
            } else {
                Object id = json.get("fieldObjectIdNull");
                if (id instanceof org.bson.types.ObjectId) {
                    objProxy.realmSet$fieldObjectIdNull((org.bson.types.ObjectId) id);
                } else {
                    objProxy.realmSet$fieldObjectIdNull(new org.bson.types.ObjectId((String)id));
                }
            }
        }
        if (json.has("fieldObjectNull")) {
            if (json.isNull("fieldObjectNull")) {
                objProxy.realmSet$fieldObjectNull(null);
            } else {
                some.test.NullTypes fieldObjectNullObj = some_test_NullTypesRealmProxy.createOrUpdateUsingJsonObject(realm, json.getJSONObject("fieldObjectNull"), update);
                objProxy.realmSet$fieldObjectNull(fieldObjectNullObj);
            }
        }
        ProxyUtils.setRealmListWithJsonObject(objProxy.realmGet$fieldStringListNotNull(), json, "fieldStringListNotNull");
        ProxyUtils.setRealmListWithJsonObject(objProxy.realmGet$fieldStringListNull(), json, "fieldStringListNull");
        ProxyUtils.setRealmListWithJsonObject(objProxy.realmGet$fieldBinaryListNotNull(), json, "fieldBinaryListNotNull");
        ProxyUtils.setRealmListWithJsonObject(objProxy.realmGet$fieldBinaryListNull(), json, "fieldBinaryListNull");
        ProxyUtils.setRealmListWithJsonObject(objProxy.realmGet$fieldBooleanListNotNull(), json, "fieldBooleanListNotNull");
        ProxyUtils.setRealmListWithJsonObject(objProxy.realmGet$fieldBooleanListNull(), json, "fieldBooleanListNull");
        ProxyUtils.setRealmListWithJsonObject(objProxy.realmGet$fieldLongListNotNull(), json, "fieldLongListNotNull");
        ProxyUtils.setRealmListWithJsonObject(objProxy.realmGet$fieldLongListNull(), json, "fieldLongListNull");
        ProxyUtils.setRealmListWithJsonObject(objProxy.realmGet$fieldIntegerListNotNull(), json, "fieldIntegerListNotNull");
        ProxyUtils.setRealmListWithJsonObject(objProxy.realmGet$fieldIntegerListNull(), json, "fieldIntegerListNull");
        ProxyUtils.setRealmListWithJsonObject(objProxy.realmGet$fieldShortListNotNull(), json, "fieldShortListNotNull");
        ProxyUtils.setRealmListWithJsonObject(objProxy.realmGet$fieldShortListNull(), json, "fieldShortListNull");
        ProxyUtils.setRealmListWithJsonObject(objProxy.realmGet$fieldByteListNotNull(), json, "fieldByteListNotNull");
        ProxyUtils.setRealmListWithJsonObject(objProxy.realmGet$fieldByteListNull(), json, "fieldByteListNull");
        ProxyUtils.setRealmListWithJsonObject(objProxy.realmGet$fieldDoubleListNotNull(), json, "fieldDoubleListNotNull");
        ProxyUtils.setRealmListWithJsonObject(objProxy.realmGet$fieldDoubleListNull(), json, "fieldDoubleListNull");
        ProxyUtils.setRealmListWithJsonObject(objProxy.realmGet$fieldFloatListNotNull(), json, "fieldFloatListNotNull");
        ProxyUtils.setRealmListWithJsonObject(objProxy.realmGet$fieldFloatListNull(), json, "fieldFloatListNull");
        ProxyUtils.setRealmListWithJsonObject(objProxy.realmGet$fieldDateListNotNull(), json, "fieldDateListNotNull");
        ProxyUtils.setRealmListWithJsonObject(objProxy.realmGet$fieldDateListNull(), json, "fieldDateListNull");
        ProxyUtils.setRealmListWithJsonObject(objProxy.realmGet$fieldDecimal128ListNotNull(), json, "fieldDecimal128ListNotNull");
        ProxyUtils.setRealmListWithJsonObject(objProxy.realmGet$fieldDecimal128ListNull(), json, "fieldDecimal128ListNull");
        ProxyUtils.setRealmListWithJsonObject(objProxy.realmGet$fieldObjectIdListNotNull(), json, "fieldObjectIdListNotNull");
        ProxyUtils.setRealmListWithJsonObject(objProxy.realmGet$fieldObjectIdListNull(), json, "fieldObjectIdListNull");
        return obj;
    }

