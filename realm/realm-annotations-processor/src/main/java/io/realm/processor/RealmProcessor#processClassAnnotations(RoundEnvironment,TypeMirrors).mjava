    // Create all proxy classes
    private boolean processClassAnnotations(RoundEnvironment roundEnv, TypeMirrors typeMirrors) {

        for (Element classElement : roundEnv.getElementsAnnotatedWith(RealmClass.class)) {

            // The class must either extend RealmObject or implement RealmModel
            if (!Utils.isImplementingMarkerInterface(classElement)) {
                Utils.error("A RealmClass annotated object must implement RealmModel or derive from RealmObject.", classElement);
                return false;
            }

            // Check the annotation was applied to a Class
            if (!classElement.getKind().equals(ElementKind.CLASS)) {
                Utils.error("The RealmClass annotation can only be applied to classes.", classElement);
                return false;
            }

            ClassMetaData metadata = new ClassMetaData(processingEnv, typeMirrors, (TypeElement) classElement);
            if (!metadata.isModelClass()) { continue; }

            Utils.note("Processing class " + metadata.getSimpleJavaClassName());
            if (!metadata.generate(moduleMetaData)) { return false; }

            classCollection.addClass(metadata);
            backlinksToValidate.addAll(metadata.getBacklinkFields());
        }

        return true;
    }

