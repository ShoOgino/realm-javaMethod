    private void emitInsertOrUpdateListToRealmMethod(JavaWriter writer) throws IOException {
        writer.emitAnnotation("Override");
        writer.beginMethod(
                "void",
                "insertOrUpdate",
                EnumSet.of(Modifier.PUBLIC),
                "Realm", "realm", "Collection<? extends RealmModel>", "objects");

        writer.emitStatement("Iterator<? extends RealmModel> iterator = objects.iterator()");
        writer.emitStatement("RealmModel object = null");
        writer.emitStatement("Map<RealmModel, Long> cache = new IdentityHashMap<RealmModel, Long>(objects.size())");

        writer.beginControlFlow("if (iterator.hasNext())")
                .emitSingleLineComment(" access the first element to figure out the clazz for the routing below")
                .emitStatement("object = iterator.next()")
                .emitSingleLineComment("This cast is correct because obj is either")
                .emitSingleLineComment("generated by RealmProxy or the original type extending directly from RealmObject")
                .emitStatement("@SuppressWarnings(\"unchecked\") Class<RealmModel> clazz = (Class<RealmModel>) ((object instanceof RealmObjectProxy) ? object.getClass().getSuperclass() : object.getClass())")
                .emitEmptyLine();

                emitMediatorSwitch(new ProxySwitchStatement() {
                    @Override
                    public void emitStatement(int i, JavaWriter writer) throws IOException {
                        writer.emitStatement("%s.insertOrUpdate(realm, (%s) object, cache)", proxyClasses.get(i), simpleModelClasses.get(i));
                    }
                }, writer, false);

                writer.beginControlFlow("if (iterator.hasNext())");
                emitMediatorSwitch(new ProxySwitchStatement() {
                    @Override
                    public void emitStatement(int i, JavaWriter writer) throws IOException {
                        writer.emitStatement("%s.insertOrUpdate(realm, iterator, cache)", proxyClasses.get(i));
                    }
                }, writer, false);
                writer.endControlFlow();
        writer.endControlFlow();

        writer.endMethod();
        writer.emitEmptyLine();
    }

