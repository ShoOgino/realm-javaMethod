    private void emitValidateTableMethod(JavaWriter writer) throws IOException {
        writer.beginMethod(
            columnInfoClassName(),        // Return type
            "validateTable",              // Method name
            EnumSet.of(Modifier.PUBLIC, Modifier.STATIC), // Modifiers
            "SharedRealm", "sharedRealm", // Argument type & argument name
            "boolean", "allowExtraColumns");

            writer.beginControlFlow(
            "if (!sharedRealm.hasTable(\"" + Constants.TABLE_PREFIX + this.simpleClassName + "\"))");
        emitMigrationNeededException(writer, "\"The '%s' class is missing from the schema for this Realm.\")",
            metadata.getSimpleClassName());
        writer.endControlFlow();

        writer.emitStatement(
            "Table table = sharedRealm.getTable(\"%s%s\")",
            Constants.TABLE_PREFIX,
            this.simpleClassName);

        // verify number of columns
        writer.emitStatement("final long columnCount = table.getColumnCount()");
        writer.beginControlFlow("if (columnCount != %d)", metadata.getFields().size());
        writer.beginControlFlow("if (columnCount < %d)", metadata.getFields().size());
        emitMigrationNeededException(writer, "\"Field count is less than expected - expected %d but was \" + columnCount)",
            metadata.getFields().size());
        writer.endControlFlow();
        writer.beginControlFlow("if (allowExtraColumns)");
        writer.emitStatement(
            "RealmLog.debug(\"Field count is more than expected - expected %d but was %%1$d\", columnCount)",
            metadata.getFields().size());
        writer.nextControlFlow("else");
        emitMigrationNeededException(writer, "\"Field count is more than expected - expected %d but was \" + columnCount)",
            metadata.getFields().size());
        writer.endControlFlow();
        writer.endControlFlow();

        // create type dictionary for lookup
        writer.emitStatement("Map<String, RealmFieldType> columnTypes = new HashMap<String, RealmFieldType>()");
        writer.beginControlFlow("for (long i = 0; i < columnCount; i++)")
                .emitStatement("columnTypes.put(table.getColumnName(i), table.getColumnType(i))")
            .endControlFlow()
            .emitEmptyLine();

        // create an instance of ColumnInfo
        writer.emitStatement("final %1$s columnInfo = new %1$s(sharedRealm.getPath(), table)", columnInfoClassName())
            .emitEmptyLine();

        // verify primary key definition was not altered
        if (metadata.hasPrimaryKey()) {
            // the current model defines a PK, make sure it's defined in the Realm schema
            String fieldName = metadata.getPrimaryKey().getSimpleName().toString();
            writer.beginControlFlow("if (!table.hasPrimaryKey())");
            emitMigrationNeededException(writer, "\"Primary key not defined for field '%s' in existing Realm file. @PrimaryKey was added.\")",
                    metadata.getPrimaryKey().getSimpleName().toString());
            writer.nextControlFlow("else")
                .beginControlFlow("if (table.getPrimaryKey() != columnInfo.%sIndex)", fieldName);
            emitMigrationNeededException(writer, "\"Primary Key annotation definition was changed, from field \" + table.getColumnName(table.getPrimaryKey()) + \" to field %s\")",
                    metadata.getPrimaryKey().getSimpleName().toString());
            writer.endControlFlow()
                .endControlFlow();
        }
        else {
            // the current model doesn't define a PK, make sure it's not defined in the Realm schema
            writer.beginControlFlow("if (table.hasPrimaryKey())");
            emitMigrationNeededException(writer, "\"Primary Key defined for field \" + table.getColumnName(table.getPrimaryKey()) + \" was removed.\")");
            writer.endControlFlow();
        }
        writer.emitEmptyLine();

        // For each field verify there is a corresponding
        long fieldIndex = -1;
        for (VariableElement field : metadata.getFields()) {
            fieldIndex++;
            String fieldName = field.getSimpleName().toString();
            String fieldTypeQualifiedName = Utils.getFieldTypeQualifiedName(field);
            if (Constants.JAVA_TO_REALM_TYPES.containsKey(fieldTypeQualifiedName)) {
                emitValidateRealmType(writer, field, fieldName, fieldTypeQualifiedName);
            }
            else if (Utils.isRealmModel(field)) { // Links
                emitValidateRealmModelType(writer, field, fieldIndex, fieldName);
            }
            else if (Utils.isRealmList(field)) { // Link Lists
                emitValidateRealmListType(writer, field, fieldIndex, fieldName);
            }
        }

        // verify the backlinks
        Set<Backlink> backlinks = metadata.getBacklinkFields();
        if (backlinks.size() > 0) {
            writer.emitEmptyLine()
                .emitStatement("long backlinkFieldIndex")
                .emitStatement("Table backlinkSourceTable")
                .emitStatement("Table backlinkTargetTable")
                .emitStatement("RealmFieldType backlinkFieldType");
            for (Backlink backlink : metadata.getBacklinkFields()) {
                emitValidateBacklink(writer, backlink);
            }
        }

        writer.emitEmptyLine();
        writer.emitStatement("return %s", "columnInfo");

        writer.endMethod();
        writer.emitEmptyLine();
    }

