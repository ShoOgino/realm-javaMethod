    private void emitColumnIndicesClass(JavaWriter writer) throws IOException {
        writer.beginType(
                columnInfoClassName(),                       // full qualified name of the item to generate
                "class",                                     // the type of the item
                EnumSet.of(Modifier.STATIC, Modifier.FINAL), // modifiers to apply
                "ColumnInfo",                                // base class
                "Cloneable")                                 // interfaces
                .emitEmptyLine();

        // fields
        for (VariableElement variableElement : metadata.getFields()) {
            writer.emitField("long", columnIndexVarName(variableElement),
                    EnumSet.of(Modifier.PUBLIC));
        }
        writer.emitEmptyLine();

        // constructor
        writer.beginConstructor(EnumSet.noneOf(Modifier.class),
                "String", "path",
                "Table", "table");
        writer.emitStatement("final Map<String, Long> indicesMap = new HashMap<String, Long>(%s)",
                metadata.getFields().size());
        for (VariableElement variableElement : metadata.getFields()) {
            final String columnName = variableElement.getSimpleName().toString();
            final String columnIndexVarName = columnIndexVarName(variableElement);
            writer.emitStatement("this.%s = getValidColumnIndex(path, table, \"%s\", \"%s\")",
                    columnIndexVarName, simpleClassName, columnName)
                    .emitStatement("indicesMap.put(\"%s\", this.%s)", columnName, columnIndexVarName);
        }

        writer.emitEmptyLine()
                .emitStatement("setIndicesMap(indicesMap)");
        writer.endConstructor()
                .emitEmptyLine();

        // copyColumnInfoFrom method
        writer.emitAnnotation("Override")
                .beginMethod(
                        "void",                      // return type
                        "copyColumnInfoFrom",        // method name
                        EnumSet.of(Modifier.PUBLIC, Modifier.FINAL), // modifiers
                        "ColumnInfo", "other");      // parameters
        {
            writer.emitStatement("final %1$s otherInfo = (%1$s) other", columnInfoClassName());

            // copy field values
            for (VariableElement variableElement : metadata.getFields()) {
                writer.emitStatement("this.%1$s = otherInfo.%1$s", columnIndexVarName(variableElement));
            }
            writer.emitEmptyLine()
                    .emitStatement("setIndicesMap(otherInfo.getIndicesMap())");
        }
        writer.endMethod()
                .emitEmptyLine();

        // clone method
        //@formatter:off
        writer.emitAnnotation("Override")
            .beginMethod(
                columnInfoClassName(),       // return type
                "clone",                     // method name
                EnumSet.of(Modifier.PUBLIC, Modifier.FINAL)) // modifiers
                // method body
                .emitStatement("return (%1$s) super.clone()", columnInfoClassName())
                .endMethod()
                .emitEmptyLine();
        //@formatter:on

        writer.endType();
    }

