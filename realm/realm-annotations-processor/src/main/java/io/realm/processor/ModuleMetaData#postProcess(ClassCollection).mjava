    /**
     * All model classes have now been processed and the final validation of modules can occur.
     * Any errors or messages will be posted on the provided Messager.
     *
     * @param modelClasses all Realm model classes found by the annotation processor.
     * @return {@code true} if the module is valid, {@code false} otherwise.
     */
    public boolean postProcess(ClassCollection modelClasses) {

        // Process all global modules
        for (String qualifiedModuleClassName : globalModules) {
            Set<ClassMetaData> classData = new LinkedHashSet<>();
            classData.addAll(modelClasses.getClasses());
            defineModule(qualifiedModuleClassName, classData);
        }

        // Process all modules with specific classes
        for (Map.Entry<String, Set<String>> module : specificClassesModules.entrySet()) {
            String qualifiedModuleClassName = module.getKey();
            Set<ClassMetaData> classData = new LinkedHashSet<>();
            for (String qualifiedModelClassName : module.getValue()) {
                if (!modelClasses.containsQualifiedClass(qualifiedModelClassName)) {
                    Utils.error(Utils.stripPackage(qualifiedModelClassName) + " could not be added to the module. " +
                            "Only classes extending RealmObject or implementing RealmModel, which are part of this project, can be added.");
                    return false;

                }
                classData.add(modelClasses.getClassFromQualifiedName(qualifiedModelClassName));
            }
            defineModule(qualifiedModuleClassName, classData);
        }

        // Check that app and library modules are not mixed
        if (modules.size() > 0 && libraryModules.size() > 0) {
            StringBuilder sb = new StringBuilder();
            sb.append("Normal modules and library modules cannot be mixed in the same project.");
            sb.append('\n');
            sb.append("Normal module(s):\n");
            for (String module : modules.keySet()) {
                sb.append("  ");
                sb.append(module);
                sb.append('\n');
            }
            sb.append("Library module(s):\n");
            for (String module : libraryModules.keySet()) {
                sb.append("  ");
                sb.append(module);
                sb.append('\n');
            }
            Utils.error(sb.toString());
            return false;
        }

        // Create default Realm module if needed.
        // Note: Kotlin will trigger the annotation processor even if no Realm annotations are used.
        // The DefaultRealmModule should not be created in this case either.
        if (libraryModules.size() == 0 && modelClasses.size() > 0) {
            shouldCreateDefaultModule = true;
            String defaultModuleName = Constants.REALM_PACKAGE_NAME + "." + Constants.DEFAULT_MODULE_CLASS_NAME;
            modules.put(defaultModuleName, modelClasses.getClasses());
        }

        return true;
    }

