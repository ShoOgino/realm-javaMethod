    private void emitColumnInfoClass(JavaWriter writer) throws IOException {
        writer.beginType(
                columnInfoClassName(),                       // full qualified name of the item to generate
                "class",                                     // the type of the item
                EnumSet.of(Modifier.STATIC, Modifier.FINAL), // modifiers to apply
                "ColumnInfo");                               // base class

        // fields
        writer.emitField("long", "maxColumnIndexValue"); // Must not end with Index as it otherwise could conflict regular fields.
        for (VariableElement variableElement : metadata.getFields()) {
            writer.emitField("long", columnIndexVarName(variableElement));
        }
        writer.emitEmptyLine();

        // constructor #1
        writer.beginConstructor(
                EnumSet.noneOf(Modifier.class),
                "OsSchemaInfo", "schemaInfo");
        writer.emitStatement("super(%s)", metadata.getFields().size());
        writer.emitStatement("OsObjectSchemaInfo objectSchemaInfo = schemaInfo.getObjectSchemaInfo(\"%1$s\")",
                internalClassName);
        for (RealmFieldElement field : metadata.getFields()) {
            writer.emitStatement(
                    "this.%1$sIndex = addColumnDetails(\"%1$s\", \"%2$s\", objectSchemaInfo)",
                    field.getJavaName(),
                    field.getInternalFieldName());
        }
        for (Backlink backlink : metadata.getBacklinkFields()) {
            writer.emitStatement(
                    "addBacklinkDetails(schemaInfo, \"%s\", \"%s\", \"%s\")",
                    backlink.getTargetField(),
                    classCollection.getClassFromQualifiedName(backlink.getSourceClass()).getInternalClassName(),
                    backlink.getSourceField());
        }
        writer
            .emitStatement("this.maxColumnIndexValue = objectSchemaInfo.getMaxColumnIndex()")
            .endConstructor()
            .emitEmptyLine();

        // constructor #2
        writer.beginConstructor(
                EnumSet.noneOf(Modifier.class),
                "ColumnInfo", "src", "boolean", "mutable");
        writer.emitStatement("super(src, mutable)")
                .emitStatement("copy(src, this)");
        writer.endConstructor()
                .emitEmptyLine();

        // no-args copy method
        writer.emitAnnotation("Override")
                .beginMethod(
                        "ColumnInfo",                                   // return type
                        "copy",                                         // method name
                        EnumSet.of(Modifier.PROTECTED, Modifier.FINAL), // modifiers
                        "boolean", "mutable");     // parameters
        writer.emitStatement("return new %s(this, mutable)", columnInfoClassName());
        writer.endMethod()
                .emitEmptyLine();

        // copy method
        writer.emitAnnotation("Override")
                .beginMethod(
                        "void",                                          // return type
                        "copy",                                          // method name
                        EnumSet.of(Modifier.PROTECTED, Modifier.FINAL),  // modifiers
                        "ColumnInfo", "rawSrc", "ColumnInfo", "rawDst"); // parameters
        writer.emitStatement("final %1$s src = (%1$s) rawSrc", columnInfoClassName());
        writer.emitStatement("final %1$s dst = (%1$s) rawDst", columnInfoClassName());
        for (VariableElement variableElement : metadata.getFields()) {
            writer.emitStatement("dst.%1$s = src.%1$s", columnIndexVarName(variableElement));
        }
        writer.emitStatement("dst.maxColumnIndexValue = src.maxColumnIndexValue");
        writer.endMethod();

        writer.endType();
    }

