    /**
     * Segments a string into words as described above
     */
    String[] split(String str) {
        if (str == null || str.isEmpty()) {
            return new String[0];
        }

        Integer previousCodepoint;
        Integer currentCodepoint = null;
        int length = str.length();
        int offset = 0;
        StringBuilder currentWord = new StringBuilder();
        List<String> words = new ArrayList<>();
        Boolean wordAllUpperCase = null;
        int lastCodePointCharLength = 0;
        while (offset < length) {
            previousCodepoint = currentCodepoint;
            currentCodepoint = str.codePointAt(offset);
            int currentCharCount = Character.charCount(currentCodepoint);
            boolean previousCodePointUpperCase = previousCodepoint != null && Character.isUpperCase(previousCodepoint);
            boolean previousCodePointLowerCase = previousCodepoint != null && Character.isLowerCase(previousCodepoint);
            boolean currentCodePointUpperCase = Character.isUpperCase(currentCodepoint);
            boolean currentCodePointLowerCase = Character.isLowerCase(currentCodepoint);

            // Separator char encountered not part of any word, but indicate a boundary
            if (currentCodepoint == '_' || currentCodepoint == '$') {
                if (currentWord.length() > 0) {
                    words.add(currentWord.toString());
                    currentWord.setLength(0);
                }

                wordAllUpperCase = null;
                offset += currentCharCount;
                lastCodePointCharLength = 0;
                continue;
            }

            // Change between lower case and upper case indicate a word boundary
            if (previousCodePointLowerCase && currentCodePointUpperCase) {
                if (currentWord.length() > 0) {
                    words.add(currentWord.toString());
                    currentWord.setLength(0);
                    currentWord.appendCodePoint(currentCodepoint);
                }

                wordAllUpperCase = true;
                offset += currentCharCount;
                lastCodePointCharLength = currentCharCount;
                continue;
            }

            // Change between upper case and lower case indicated a word boundary on the previous
            // char if multiple upper case characters where encountered.
            if (currentWord.length() > 1
                    && (wordAllUpperCase != null && wordAllUpperCase)
                    && previousCodePointUpperCase && currentCodePointLowerCase) {
                words.add(currentWord.substring(0, currentWord.length() - lastCodePointCharLength));
                currentWord.substring(0, currentWord.length() - lastCodePointCharLength);
                currentWord.delete(0, currentWord.length() - lastCodePointCharLength);
                currentWord.appendCodePoint(currentCodepoint);

                wordAllUpperCase = false;
                offset += currentCharCount;
                lastCodePointCharLength = currentCharCount;
                continue;
            }

            // Add codepoint to current word
            currentWord.appendCodePoint(currentCodepoint);
            wordAllUpperCase = currentCodePointUpperCase && (wordAllUpperCase == null || wordAllUpperCase);
            offset += currentCharCount;
            lastCodePointCharLength = currentCharCount;
        }

        // Add final word when exiting loop
        if (currentWord.length() > 0) {
            words.add(currentWord.toString());
        }

        // Remove hungarian notation if found
        if (words.get(0).equals("m")) {
            words.remove(0);
        }

        String[] result = new String[words.size()];
        words.toArray(result);
        return result;
    }

