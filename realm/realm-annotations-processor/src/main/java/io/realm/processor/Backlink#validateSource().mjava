    /**
     * Validate the source side of the backlink.
     *
     * @return true if the backlink source looks good.
     */
    public boolean validateSource() {
        // A @LinkingObjects cannot be @Required
        if (backlink.getAnnotation(Required.class) != null) {
            Utils.error(String.format(
                    "The @LinkingObjects field \"%s.%s\" cannot be @Required.",
                    targetClass,
                    targetField));
            return false;
        }

        // The annotation must have an argument, identifying the linked field
        if ((sourceField == null) || sourceField.equals("")) {
            Utils.error(String.format(
                    "The @LinkingObjects annotation for the field \"%s.%s\" must have a parameter identifying the link target.",
                    targetClass,
                    targetField));
            return false;
        }

        // Using link syntax to try to reference a linked field is not possible.
        if (sourceField.contains(".")) {
            Utils.error(String.format(
                    "The parameter to the @LinkingObjects annotation for the field \"%s.%s\" contains a '.'.  The use of '.' to specify fields in referenced classes is not supported.",
                    targetClass,
                    targetField));
            return false;
        }

        // The annotated element must be a RealmResult
        if (!Utils.isRealmResults(backlink)) {
            Utils.error(String.format(
                    "The field \"%s.%s\" is a \"%s\". Fields annotated with @LinkingObjects must be RealmResults.",
                    targetClass,
                    targetField,
                    backlink.asType()));
            return false;
        }

        if (sourceClass == null) {
            Utils.error(String.format(
                    "\"The field \"%s.%s\", annotated with @LinkingObjects, must specify a generic type.",
                    targetClass,
                    targetField));
            return false;
        }

        // A @LinkingObjects field must be final
        if (!backlink.getModifiers().contains(Modifier.FINAL)) {
            Utils.error(String.format(
                    "A @LinkingObjects field \"%s.%s\" must be final.",
                    targetClass,
                    targetField));
            return false;
        }

        return true;
    }

