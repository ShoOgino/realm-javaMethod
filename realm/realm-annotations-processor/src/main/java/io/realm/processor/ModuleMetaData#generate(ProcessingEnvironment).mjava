    /**
     * Builds the meta data structures for this class. Any errors or messages will be posted on the provided Messager.
     *
     * @return True if meta data was correctly created and processing can continue, false otherwise.
     */
    public boolean generate(ProcessingEnvironment processingEnv) {

        // Check that modules are setup correctly
        for (Element classElement : env.getElementsAnnotatedWith(RealmModule.class)) {
            String classSimpleName = classElement.getSimpleName().toString();

            // Check that the annotation is only applied to a class
            if (!classElement.getKind().equals(ElementKind.CLASS)) {
                Utils.error("The RealmModule annotation can only be applied to classes", classElement);
                return false;
            }

            // Check that allClasses and classes are not set at the same time
            RealmModule module = classElement.getAnnotation(RealmModule.class);
            Utils.note("Processing module " + classSimpleName);
            if (module.allClasses() && hasCustomClassList(classElement)) {
                Utils.error("Setting @RealmModule(allClasses=true) will override @RealmModule(classes={...}) in " + classSimpleName);
                return false;
            }

            // Check that classes added are proper Realm model classes
            String qualifiedName = ((TypeElement) classElement).getQualifiedName().toString();
            Set<ClassMetaData> classes;
            if (module.allClasses()) {
                classes = availableClasses;
            } else {
                classes = new HashSet<ClassMetaData>();
                Set<String> classNames = getClassMetaDataFromModule(classElement);
                for (String fullyQualifiedClassName : classNames) {
                    ClassMetaData metadata = classMetaData.get(fullyQualifiedClassName);
                    if (metadata == null) {
                        Utils.error(Utils.stripPackage(fullyQualifiedClassName) + " could not be added to the module. " +
                                "Only classes extending RealmObject, which are part of this project, can be added.");
                        return false;
                    }
                    classes.add(metadata);
                }
            }

            // Create either a Library or App module
            if (module.library()) {
                libraryModules.put(qualifiedName, classes);
            } else {
                modules.put(qualifiedName, classes);
            }
        }

        // Check that app and library modules are not mixed
        if (modules.size() > 0 && libraryModules.size() > 0) {
            Utils.error("Normal modules and library modules cannot be mixed in the same project");
            return false;
        }

        // Create default Realm module if needed.
        // Note: Kotlin will trigger the annotation processor even if no Realm annotations are used.
        // The DefaultRealmModule should not be created in this case either.
        if (libraryModules.size() == 0 && availableClasses.size() > 0) {
            shouldCreateDefaultModule = true;
            String defaultModuleName = Constants.REALM_PACKAGE_NAME + "." + Constants.DEFAULT_MODULE_CLASS_NAME;
            modules.put(defaultModuleName, availableClasses);
        }

        return true;
    }

