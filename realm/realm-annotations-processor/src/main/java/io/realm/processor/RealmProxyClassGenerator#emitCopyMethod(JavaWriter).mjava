    private void emitCopyMethod(JavaWriter writer) throws IOException {
        writer
            .beginMethod(
            qualifiedJavaClassName, // Return type
            "copy", // Method name
            EnumSet.of(Modifier.PUBLIC, Modifier.STATIC), // Modifiers
            "Realm", "realm",
                    columnInfoClassName(), "columnInfo",
                    qualifiedJavaClassName, "newObject",
                    "boolean", "update",
                    "Map<RealmModel,RealmObjectProxy>", "cache",
                    "Set<ImportFlag>", "flags"

            ); // Argument type & argument name

        writer
            .emitStatement("RealmObjectProxy cachedRealmObject = cache.get(newObject)")
            .beginControlFlow("if (cachedRealmObject != null)")
                .emitStatement("return (%s) cachedRealmObject", qualifiedJavaClassName)
            .endControlFlow()
            .emitEmptyLine();

        writer
            .emitStatement("%1$s realmObjectSource = (%1$s) newObject", interfaceName)
            .emitEmptyLine()
            .emitStatement("Table table = realm.getTable(%s.class)", qualifiedJavaClassName)
            .emitStatement("OsObjectBuilder builder = new OsObjectBuilder(table, columnInfo.maxColumnIndexValue, flags)");

        // Copy basic types
        writer
            .emitEmptyLine()
            .emitSingleLineComment("Add all non-\"object reference\" fields");
        for (RealmFieldElement field : metadata.getBasicTypeFields()) {
            String fieldIndex = fieldIndexVariableReference(field);
            String fieldName = field.getSimpleName().toString();
            String getter = metadata.getInternalGetter(fieldName);
            writer.emitStatement("builder.%s(%s, realmObjectSource.%s())", OsObjectBuilderTypeHelper.getOsObjectBuilderName(field), fieldIndex, getter);
        }

        // Create the underlying object
        writer
            .emitEmptyLine()
            .emitSingleLineComment("Create the underlying object and cache it before setting any object/objectlist references")
            .emitSingleLineComment("This will allow us to break any circular dependencies by using the object cache.")
            .emitStatement("Row row = builder.createNewObject()")
            .emitStatement("%s realmObjectCopy = newProxyInstance(realm, row)", qualifiedGeneratedClassName)
            .emitStatement("cache.put(newObject, realmObjectCopy)");

        // Copy all object references or lists-of-objects
        writer.emitEmptyLine();
        if (!metadata.getObjectReferenceFields().isEmpty()) {
            writer.emitSingleLineComment("Finally add all fields that reference other Realm Objects, either directly or through a list");
        }
        for (RealmFieldElement field : metadata.getObjectReferenceFields()) {
            String fieldType = field.asType().toString();
            String fieldName = field.getSimpleName().toString();
            String getter = metadata.getInternalGetter(fieldName);
            String setter = metadata.getInternalSetter(fieldName);

            if (Utils.isRealmModel(field)) {
                writer
                    .emitStatement("%s %sObj = realmObjectSource.%s()", fieldType, fieldName, getter)
                    .beginControlFlow("if (%sObj == null)", fieldName)
                        .emitStatement("realmObjectCopy.%s(null)", setter)
                    .nextControlFlow("else")
                        .emitStatement("%s cache%s = (%s) cache.get(%sObj)", fieldType, fieldName, fieldType, fieldName)
                        .beginControlFlow("if (cache%s != null)", fieldName)
                            .emitStatement("realmObjectCopy.%s(cache%s)", setter, fieldName)
                        .nextControlFlow("else")
                            .emitStatement("realmObjectCopy.%s(%s.copyOrUpdate(realm, (%s) realm.getSchema().getColumnInfo(%s.class), %sObj, update, cache, flags))",
                                setter, Utils.getProxyClassSimpleName(field),  columnInfoClassName(field), Utils.getFieldTypeQualifiedName(field), fieldName)
                        .endControlFlow()
                    // No need to throw exception here if the field is not nullable. A exception will be thrown in setter.
                    .endControlFlow()
                    .emitEmptyLine();

            } else if (Utils.isRealmModelList(field)) {
                final String genericType = Utils.getGenericTypeQualifiedName(field);
                writer
                    .emitStatement("RealmList<%s> %sList = realmObjectSource.%s()", genericType, fieldName, getter)
                    .beginControlFlow("if (%sList != null)", fieldName)
                        .emitStatement("RealmList<%s> %sRealmList = realmObjectCopy.%s()",
                            genericType, fieldName, getter)
                         // Clear is needed. See bug https://github.com/realm/realm-java/issues/4957
                        .emitStatement("%sRealmList.clear()", fieldName)
                        .beginControlFlow("for (int i = 0; i < %sList.size(); i++)", fieldName)
                            .emitStatement("%1$s %2$sItem = %2$sList.get(i)", genericType, fieldName)
                            .emitStatement("%1$s cache%2$s = (%1$s) cache.get(%2$sItem)", genericType, fieldName)
                            .beginControlFlow("if (cache%s != null)", fieldName)
                                .emitStatement("%1$sRealmList.add(cache%1$s)", fieldName)
                            .nextControlFlow("else")
                                .emitStatement("%1$sRealmList.add(%2$s.copyOrUpdate(realm, (%3$s) realm.getSchema().getColumnInfo(%4$s.class), %1$sItem, update, cache, flags))",
                                    fieldName, Utils.getProxyClassSimpleName(field), columnInfoClassName(field), Utils.getGenericTypeQualifiedName(field))
                            .endControlFlow()
                        .endControlFlow()
                    .endControlFlow()
                    .emitEmptyLine();
            } else {
                throw new IllegalStateException("Unsupported field: " + field);
            }
        }

        writer
            .emitStatement("return realmObjectCopy")
            .endMethod()
            .emitEmptyLine();
    }

